<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/leaf.svg</icon>
  <subtitle>我的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2023-10-28T20:51:20.173Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Python 功力提升的樂趣》筆記（三）函式、註解、docstring</title>
    <link href="https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-03/"/>
    <id>https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-03/</id>
    <published>2023-10-21T08:46:34.000Z</published>
    <updated>2023-10-28T20:51:20.173Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/tS78Ke0.png" alt="Python 功力提升的樂趣"><span class="cap">Python 功力提升的樂趣</span></p><p>這是《<a href="https://www.tenlong.com.tw/products/9789865027711">Python 功力提升的樂趣：寫出乾淨程式碼的最佳實務</a>》閱讀筆記的第 3 篇，也是最後一篇。</p><p>你可以把它當作是一則重點整理，加上我個人的開發經驗與心得。</p><p>本文整理書中的第 10、11 章，而且篇幅幾乎集中在前者。畢竟無論什麼語言，「<strong>寫好函式</strong>」這件事總是如此重要，Python 自然也不例外。</p><h3 id="系列：Python-功力提升的樂趣"><a href="#系列：Python-功力提升的樂趣" class="headerlink" title="系列：Python 功力提升的樂趣"></a>系列：Python 功力提升的樂趣</h3><blockquote><ol><li><a href="https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-01/">《Python 功力提升的樂趣》筆記（一）Black、命名、壞味道</a></li><li><a href="https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-02/">《Python 功力提升的樂趣》筆記（二）Pythonic、行話、陷阱</a></li><li><strong>《Python 功力提升的樂趣》筆記（三）函式、註解、docstring</strong></li></ol></blockquote><hr><h2 id="第-10-章：寫出有效率的函式"><a href="#第-10-章：寫出有效率的函式" class="headerlink" title="第 10 章：寫出有效率的函式"></a>第 10 章：寫出有效率的函式</h2><p>有效率的函式（或說「<strong>好的</strong>」函式）需要你在「<strong>命名、規模大小（行數）、參數數量和複雜性</strong>」之間，做出許多決定和<strong>取捨</strong>。</p><p>這無疑是極具挑戰的事——尤其是取捨。</p><p>人生之難，就難在取捨。</p><p>本章探討的正是這些取捨之間的利弊得失，以及編寫函式的重要原則。不用說，絕對是關鍵的一章。</p><span id="more"></span><blockquote><p>相關文章：重構日誌：如何寫好一個 Python 函式——註解、docstring、解耦（待發表）</p></blockquote><h2 id="函式的規模：小就是好？"><a href="#函式的規模：小就是好？" class="headerlink" title="函式的規模：小就是好？"></a>函式的規模：小就是好？</h2><p>我們都聽過「函式應該盡可能簡單、一次只做一次件事」之類的建言，也表示認同。從這個精神出發，太大或太複雜的函式就應該要進行拆分。</p><p>但！事實是，有效拆分函式是一件耗神、講究細節，且沒有標準答案的事。以致於我們即使知道，也很難完全貫徹，包括我自己。</p><p>出於各種原因，我們常常對現實世界作出一定的妥協。</p><h3 id="小函式的優點"><a href="#小函式的優點" class="headerlink" title="小函式的優點"></a>小函式的優點</h3><p>有些人覺得任何函式都不應該超過 20 行，甚至 10、5 行😂。因為函式「短」往往有下面這些優點：</p><ul><li>單一函式容易理解</li><li>較少的參數（這確實非常重要！）</li><li>易於測試與除錯</li></ul><h3 id="小函式的缺點"><a href="#小函式的缺點" class="headerlink" title="小函式的缺點"></a>小函式的缺點</h3><p>但小也有缺點：</p><ul><li>一樣的邏輯，更小的函式也意味著「更多」的小函式</li><li>函式愈多，結構就愈複雜。即「函式間」的關係會變得更加複雜</li><li>愈多函式，函式間的精準命名將成為巨大的挑戰——這真的很困難！</li></ul><p>這些「缺點」往往也解釋了為何我們不一定那麼積極拆分函式，讓每一個函式都符合「一次只做一件事」原則。</p><p>尤其是小函式造成的大量命名問題，對於命名很講究的我而言，有時確實感到棘手。</p><h3 id="小結：小不等於短"><a href="#小結：小不等於短" class="headerlink" title="小結：小不等於短"></a>小結：小不等於短</h3><p>函式原則上還是應該要盡可能單純一點，該拆就要拆，但不一定要很短。而且其中必然會有很多挑戰。</p><p>從「功能」上去劃分界限、拆分函式，會更有意義與指導性，與可行性。</p><p>作者認為，一味追求短函式，確實可以讓各別函式變得簡單，但卻很可能讓程式的「整體」變得複雜，適得其反。</p><p>他的經驗是，理想情況下，函式最好少於 30 行，最多不超過 200 行。<strong>讓函式在合理情況下盡可能短少</strong>，但不只是為了短少而縮減。</p><hr><h2 id="返回值（return）應該都要有相同的資料型別"><a href="#返回值（return）應該都要有相同的資料型別" class="headerlink" title="返回值（return）應該都要有相同的資料型別"></a>返回值（return）應該都要有相同的資料型別</h2><p>對此，我想說：</p><blockquote><p>這真的好重要啊！（吶喊）</p></blockquote><p>卻常常沒有被好好遵守。</p><p>簡言之，為確保函式的「<strong>可預測性</strong>」，我們應該努力讓函式只回傳「<strong>單一資料型別</strong>」的值。比如<strong>總是</strong>回傳整數或字串，而不要有時回傳字串，有時則回傳布林值。</p><p>這不一定容易做到，但我更常遇到的情況是：<strong>明明有替代方案讓回傳型別單一化，卻沒有善用。</strong></p><h3 id="以False代替raise"><a href="#以False代替raise" class="headerlink" title="以False代替raise"></a>以<code>False</code>代替<code>raise</code></h3><p>最常見的例子就是：<strong>該拋出錯誤時候，卻只用<code>return False</code> 替代</strong>。</p><p>意即，當函式正常執行時，回傳一般正常的 output 值。但當執行失敗時，卻是回傳<code>False</code>——這簡直令人髮指，而且我相信你一定看過這樣的函式。</p><p>必須說明，發生錯誤時不拋出而選擇<code>return False</code>未必總是不好的，就像 Django REST framework 序列化器的<code>is_valid</code>方法，預設也是返回一個布林值（可以用<code>raise_exception=True</code>參數改為直接拋出錯誤），方便你進行更多後續操作。</p><p>不過，如果你選擇在遇到錯誤時<code>return False</code>，則應該在函式正確執行時，<code>return True</code>。</p><p>而且函式命名最好也要跟著配合，讓人一看就知曉<strong>該函式、方法會返回一個布林值</strong>，比如上述的<code>is_valid</code>，或常見的<code>has_permission</code>、<code>is_authenticated</code>等。</p><h3 id="錯誤示範"><a href="#錯誤示範" class="headerlink" title="錯誤示範"></a>錯誤示範</h3><p>我們看一下這個錯誤示範：假設我們有一個函式，其目的是從一個<code>JSON</code>文件中讀取配置資訊。如果讀取成功，它會返回一個 Python 字典；如果讀取失敗，它會捕捉異常並返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_config_from_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            config = json.load(f)</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 這裡是問題所在</span></span><br></pre></td></tr></table></figure><p>這個函式在<code>except</code>區塊裡面直接返回<code>False</code>，這會導致以下問題：</p><ol><li><strong>資料型別不一致</strong>：正常情況下返回一個字典，異常情況下返回<code>False</code>（布林值）。</li><li><strong>誤導函式使用者</strong>：使用者可能會誤以為<code>False</code>是一個有效的配置，進而嘗試在其上進行操作，這會導致更多的錯誤。</li><li><strong>後續處理困難</strong>：函式使用者必須額外檢查返回值是否為<code>False</code>，然後再決定是否進行後續的操作。</li></ol><p>「return 型別不確定」肯定不只發生在例外處理，但它確實<strong>很常發生在例外處理</strong>，因為我看過<strong>不止一次</strong>類似的真實案例。</p><p>很多人本能地會這樣寫，這往往是因為不習慣、不擅長處理錯誤，所以想要用自己平常更熟悉的<code>False</code>。</p><p>除此之外，我還看過「函式正常執行回傳一個類別物件，失敗時回傳一個 Python tuple——包含錯誤代碼和錯誤訊息」這種非常<strong>反直覺</strong>的設計。彷彿是在告訴我們：</p><blockquote><p>這個函式的回傳值，可能是一個物件，也可能是一個 tuple，你自己判斷吧！</p></blockquote><p>會寫出這樣的函式，原因諸多——工作很忙、重構太麻煩了，要新增什麼功能我直接「加上去」就好！</p><p><strong>充滿了技術債味的寫法。</strong></p><h3 id="技術債與認知負擔"><a href="#技術債與認知負擔" class="headerlink" title="技術債與認知負擔"></a>技術債與認知負擔</h3><p>這類「<strong>雙型別 return</strong>」的函式，對於<strong>函式使用者</strong>（有可能是你的同事）的認知，有著「<strong>更高的要求</strong>」——呼叫方必須很了解這個函式的<strong>怪異行為</strong>，才能正確使用與處理後續衍生的問題。</p><p>這在多行或有多個 return 值的複雜函式時，真是一場災難。</p><blockquote><p>期望他人知道自己做了什麼「特別的事」，不是我所知曉的軟體開發之道。</p></blockquote><p>當函式具有這種「雙型別 return」的特性時，會明顯增加呼叫方的「<strong>認知負擔</strong>」。</p><p>這使得程式<strong>不僅難以閱讀和維護，也容易出錯</strong>，因為未來的維護者或其他團隊成員<strong>很可能不知道</strong>這個函式的「獨特」行為。</p><p>無論何時，我們都不應該寫這樣的程式。</p><hr><h2 id="我對寫好函式的基本看法"><a href="#我對寫好函式的基本看法" class="headerlink" title="我對寫好函式的基本看法"></a>我對寫好函式的基本看法</h2><p>寫好函式的重點實在太多了，而本文的篇幅有限，只能擇要為之。</p><p>我也講講我認為函式的撰寫中，最重要的兩點。</p><p>至少遵守這兩點，你的同事會很感激你。</p><h2 id="Docstring-真的很重要"><a href="#Docstring-真的很重要" class="headerlink" title="Docstring 真的很重要"></a>Docstring 真的很重要</h2><p>其一是盡可能地寫 docstring，這不容易，畢竟維護 docstring 也需要心力。</p><blockquote><p>Docstring 就跟所有開發文件一樣——自己很懶得寫，但如果我想調用別人寫好的程式時，卻希望它們越詳細越好。</p></blockquote><p>而且 docstring 也不是有寫就行，還需要從「<strong>讀者</strong>（也就是你的同事）」的角度去思考與表達。不然看起來會很像開發者的自言自語——沒人看得懂。</p><p>在眾多函式中，下列兩種是我認為<strong>一定要寫 docstring</strong> 的：</p><ol><li><strong>專案「自定義」成份濃厚</strong>：除了開發者本人，沒人知道這段程式在幹什麼。這通常源於特殊的業務需求，而且往往行數超多、邏輯超手刻，各種 if&#x2F;else、for 迴圈滿天飛，aka——<strong>沒人想看的程式碼</strong>。</li><li><strong>相對複雜</strong>的函式：愈複雜就愈難理解，這時候 docstring 就是你的好朋友。</li></ol><p>畢竟，看<strong>有描述性的文字</strong>，總比看一長串程式碼，要簡單且友善得多。</p><p>關於我對 docstring 的其它討論，可以參考這兩個部分：</p><ul><li><a href="https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-01/#%E8%A8%BB%E8%A7%A3%E6%98%AF%E4%B8%8D%E9%9C%80%E8%A6%81%E7%9A%84%EF%BC%9F">註解是不需要的？</a></li><li><a href="https://blog.kyomind.tw/good-vscode-extensions/#Python-docstring-%E4%B9%8B%E6%88%91%E8%A6%8B">Python docstring 之我見</a></li></ul><p>我的觀點一向如此：<strong>不寫好 docstring，就稱不上是一流的 Python 開發者。</strong></p><h2 id="函式的行為與命名要一致"><a href="#函式的行為與命名要一致" class="headerlink" title="函式的行為與命名要一致"></a>函式的行為與命名要一致</h2><p>其二，好的函式要「言行一致」。</p><p>你可能會想：</p><blockquote><p>這不是理所當然的嗎？</p></blockquote><p>對，它<strong>「本應該」是理所當然</strong>的，畢竟這不就是函式命名的基本目的？——用來描述函式的行為。</p><p>但我們可以回想一下自己在工作中遇到的各式各樣函式，究竟有多少比例，是真正做到「言行一致」？我覺得可能只有一半。</p><p>或許你會認為「一半」也太誇張了！但我並不這麼想。</p><p>「言行不一致」通常有下面幾種症狀：</p><ol><li>函式名稱只表達了函式「<strong>部分</strong>」的行為。也就是函式做了超過它宣稱要做的事，比如「驗證欄位」函式，竟然還把驗證資料格式化了！</li><li>函式名稱「<strong>言過其實</strong>」，說要驗證加格式化，結果只做了一半。</li><li>名稱太模糊、缺乏業務邏輯描述、濫用技術詞彙等等，<strong>根本看不懂它在說什麼</strong>，更別說言行一致了。</li></ol><p>如果你不能從一個函式的名稱中<strong>有效理解並推測</strong>它應有的行為，那麼這個函式基本上就是失敗（或不健康）的。</p><p>很多時候，函式<strong>最初</strong>可能是「言行一致」的，但隨著後來的修改、刪除、擴充，實際上做的事情變更了，但命名卻沒有跟著改變、重構。</p><p>這些言行不一的函式，充滿了<strong>誤導性</strong>，不斷地挑戰著你的認知、推理能力，還增加了維護成本。</p><p>這樣的例子還少嗎？恐怕每天都在發生。</p><hr><h2 id="第-11-章：注釋、docstring-和-type-hints"><a href="#第-11-章：注釋、docstring-和-type-hints" class="headerlink" title="第 11 章：注釋、docstring 和 type hints"></a>第 11 章：注釋、docstring 和 type hints</h2><p>這章我只摘錄書中的一段話——我特別欣賞與認同的部分：</p><blockquote><p>好的注釋對程式設計師在未來閱讀並理解程式碼作用時提供了簡潔、有用和準確的資訊。這些注釋應該<strong>用來解說程式設計師原本的意圖，並總結某程式碼的作用，而不是只對某行程式碼進行解說。</strong></p></blockquote><blockquote><p>注釋有時會詳細描述程式設計師在編寫程式碼時<strong>所得到的經驗教訓，這些寶貴的資訊可以讓將來的維護者不必再次經歷這些苦難。</strong></p></blockquote><p>說的太好了！</p><p>團隊寫程式，是關於溝通的藝術，畢竟《<a href="https://www.books.com.tw/products/0010254508">人月神話</a>》已經告訴我們：人多不一定比較快。</p><p>溝通不止發生在會議、Jira、Slack 和規格文件上，程式之內也有著大量的溝通，註解是如此，docstring 亦是如此。</p><p>永遠不要低估「對這些細節的用心」所帶能來的巨大影響力。</p><p>優秀的工程師絕不可能輕忽它們。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tS78Ke0.png&quot; alt=&quot;Python 功力提升的樂趣&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是《&lt;a href=&quot;https://www.tenlong.com.tw/products/9789865027711&quot;&gt;Python 功力提升的樂趣：寫出乾淨程式碼的最佳實務&lt;/a&gt;》閱讀筆記的第 3 篇，也是最後一篇。&lt;/p&gt;
&lt;p&gt;你可以把它當作是一則重點整理，加上我個人的開發經驗與心得。&lt;/p&gt;
&lt;p&gt;本文整理書中的第 10、11 章，而且篇幅幾乎集中在前者。畢竟無論什麼語言，「&lt;strong&gt;寫好函式&lt;/strong&gt;」這件事總是如此重要，Python 自然也不例外。&lt;/p&gt;
&lt;h3 id=&quot;系列：Python-功力提升的樂趣&quot;&gt;&lt;a href=&quot;#系列：Python-功力提升的樂趣&quot; class=&quot;headerlink&quot; title=&quot;系列：Python 功力提升的樂趣&quot;&gt;&lt;/a&gt;系列：Python 功力提升的樂趣&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-01/&quot;&gt;《Python 功力提升的樂趣》筆記（一）Black、命名、壞味道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-02/&quot;&gt;《Python 功力提升的樂趣》筆記（二）Pythonic、行話、陷阱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;《Python 功力提升的樂趣》筆記（三）函式、註解、docstring&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第-10-章：寫出有效率的函式&quot;&gt;&lt;a href=&quot;#第-10-章：寫出有效率的函式&quot; class=&quot;headerlink&quot; title=&quot;第 10 章：寫出有效率的函式&quot;&gt;&lt;/a&gt;第 10 章：寫出有效率的函式&lt;/h2&gt;&lt;p&gt;有效率的函式（或說「&lt;strong&gt;好的&lt;/strong&gt;」函式）需要你在「&lt;strong&gt;命名、規模大小（行數）、參數數量和複雜性&lt;/strong&gt;」之間，做出許多決定和&lt;strong&gt;取捨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這無疑是極具挑戰的事——尤其是取捨。&lt;/p&gt;
&lt;p&gt;人生之難，就難在取捨。&lt;/p&gt;
&lt;p&gt;本章探討的正是這些取捨之間的利弊得失，以及編寫函式的重要原則。不用說，絕對是關鍵的一章。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/tS78Ke0.png" type="image"/>
    
    
    <category term="軟體開發" scheme="https://blog.kyomind.tw/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
    <category term="Python" scheme="https://blog.kyomind.tw/tags/Python/"/>
    
    <category term="書" scheme="https://blog.kyomind.tw/tags/%E6%9B%B8/"/>
    
    <category term="筆記" scheme="https://blog.kyomind.tw/tags/%E7%AD%86%E8%A8%98/"/>
    
    <category term="Clean Code" scheme="https://blog.kyomind.tw/tags/Clean-Code/"/>
    
    <category term="閱讀心得" scheme="https://blog.kyomind.tw/tags/%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>2023 那些我已不可或缺的「付費訂閱」推薦</title>
    <link href="https://blog.kyomind.tw/essential-subscriptions-2023/"/>
    <id>https://blog.kyomind.tw/essential-subscriptions-2023/</id>
    <published>2023-10-10T16:12:10.000Z</published>
    <updated>2023-10-28T08:10:02.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/MDQYOVd.png" alt="DALL·E 3"><span class="cap">DALL·E 3</span></p><p>這篇要來講述，2023 年的當下，對我而言「具有一定重要性」的付費訂閱。</p><p>這屬於完全個人化的心得，我會列出那些不可或缺的訂閱項目，並解釋它們對我的重要性所在。</p><p>所謂的「不可或缺」，意思是一旦我停止訂閱，我的工作和生活都會出現挑戰，應該說困擾吧！困擾的大小，就是這些訂閱項目對我的影響力與價值。</p><p>以下排名同時也是重要性排名，就讓我們從最重要的開始吧！</p><span id="more"></span><hr><h2 id="一、ChatGPT-Plus"><a href="#一、ChatGPT-Plus" class="headerlink" title="一、ChatGPT Plus"></a>一、ChatGPT Plus</h2><p>論重中之重，<a href="https://openai.com/blog/chatgpt-plus">ChatGPT Plus</a> 捨我其誰？</p><p>作為一個求知欲旺盛的軟體工程師，ChatGPT 對我而言可不是僅僅「提高工作效率」這麼簡單。</p><p>任何大大小小的事都能問它，而且總能給你一個<strong>相對明確</strong>的回答。在沒有它之前，這是我們無法奢求的。</p><p>所以，它帶給我的遠不只是效率，更是智識上的愉悅與滿足。</p><p>隨著 Plus 附加的功能愈來愈多，更別說最近加入的<a href="https://help.openai.com/en/articles/6825453-chatgpt-release-notes#h_e3a2ee7903">影像辨識</a>（<a href="https://openai.com/research/gpt-4v-system-card">GPT-4V</a>），與整合了 DALL·E 3 的<a href="https://www.ithome.com.tw/news/158860">繪圖功能</a>，我感覺這每月 20 美元的價值實在太過誇張。</p><p>如果你問我，我對這個服務目前為止的定價接受度上限為何？我可能會說是每月 40 美元——可見我確實離不開它。</p><h2 id="二、Setapp"><a href="#二、Setapp" class="headerlink" title="二、Setapp"></a>二、Setapp</h2><p><a href="https://setapp.com/">Setapp</a> 是訂閱制軟體服務，月付 10 美元，可以使用與之有合作的眾多軟體。</p><p>作為一個長期在 Mac 上開發的軟體工程師，Setapp 有好幾樣工具是我的日常必備。而且，考慮到「寫作」也是對我十分重要的生產活動，那它的價值就更加不言而喻了。目前我最常用的 app 有下：</p><ul><li><a href="https://cleanshot.com/">CleanShot X</a>：寫作截圖必備。</li><li><a href="https://www.popclip.app/">PopClip</a>：可以開發自己的外掛！</li><li><a href="https://www.macbartender.com/">Bartender</a>：Mac 上的工具列管理。</li><li><a href="https://pasteapp.io/">Paste</a>：剪貼簿大師！</li><li><a href="https://rapidapi.com/">RapidAPI</a>：Postman 替代品，目前個人使用已經免費。</li><li><a href="https://tableplus.com/">TablePlus</a>：SQL client，而且支持 MongoDB。</li></ul><p>我常用的 Setapp 軟體大概有十幾項，但提這些就足夠了。它們加起來的重要性，已經足以讓 Setapp 名列第二。</p><p>有興趣可以使用<a href="https://go.setapp.com/invite/ga4xxrhb">我的邀請連結</a>註冊，你、我皆可<strong>額外獲得一個月訂閱</strong>：</p><blockquote><p>If you continue with Setapp after your trial ends, <strong>both you and the friend who invited you will get a free month</strong>. That’s our referral program reward.</p></blockquote><h2 id="三、GitHub-Copilot"><a href="#三、GitHub-Copilot" class="headerlink" title="三、GitHub Copilot"></a>三、GitHub Copilot</h2><p>AI 寫程式助手，每月 10 美元，年付為 100 美元。</p><blockquote><p>相關文章：<a href="https://blog.kyomind.tw/github-copilot/">GitHub Copilot 心得——寫文章的利器？</a></p></blockquote><p>我自認不算非常充分利用它，即靠「大量寫註解提示」來讓它幫我生產大部分的程式碼——我不習慣如此。</p><p>但它還是成為了我現在開發的不可或缺。</p><p>寫程式提我人生中的重要部分，所以我給它第三名。</p><h2 id="四、YouTube-Premium"><a href="#四、YouTube-Premium" class="headerlink" title="四、YouTube Premium"></a>四、YouTube Premium</h2><p>沒想到這東西會排第四吧！全因我是一個重度 YouTube 成癮者。</p><p>雖然我也有訂 Netflix，但它對我來說相對可有可無。</p><p>大概是現代生活的節奏讓我沒有足夠的耐心慢慢看一部劇了。</p><h2 id="五、TPASS（北北基桃）"><a href="#五、TPASS（北北基桃）" class="headerlink" title="五、TPASS（北北基桃）"></a>五、TPASS（北北基桃）</h2><p>行政院通勤月票，北北基桃版的月費為 1200 台幣。</p><p>今年 7 月入坑，我感覺這東西真該早點推出的！它帶來了「通勤自由」——我很喜歡這種感覺。曾經寫了一篇<a href="https://www.facebook.com/kyomind/posts/pfbid0jWRm5mfV9ZvN63sfm7j8b8bcWzLmavrjNFHXh1MqQieEjkJoi9DGCFJsAexHVinhl">臉書文</a>講述我的購買（訂閱）動機，可供參考。</p><p>使用至今 3 個月，我很滿意。</p><h2 id="六、Whoscall"><a href="#六、Whoscall" class="headerlink" title="六、Whoscall"></a>六、Whoscall</h2><p>由今年剛在台股上市的 <a href="https://gogolook.com/en">Gogolook</a>（走著瞧股份有限公司）出品，為手機過濾、警示來電號碼的服務。</p><p>作為一個接到推銷電話總是不好意思中斷對方發言的人，這工具對我著實不可或缺。</p><h2 id="七、DigitalOcean-VM"><a href="#七、DigitalOcean-VM" class="headerlink" title="七、DigitalOcean VM"></a>七、DigitalOcean VM</h2><p>開發者總是需要一台可以 24 小時對外連線的 VM，來部署一些 side project 或簡易服務，比如之前提到的〈<a href="https://blog.kyomind.tw/weekly-review-21/">21，在 VM 上部署 Umami 替代 GA4</a>〉。</p><p>接下來我會部署更多小專案在上面，所以十分必要。</p><h2 id="八、Google-One"><a href="#八、Google-One" class="headerlink" title="八、Google One"></a>八、Google One</h2><p>Gmail 信箱、Google 相簿等檔案太佔空間，免費額度滿了，訂了最小的 100 GB。</p><p>除非勤刪檔，不然不訂也不行。我選擇後者。</p><h2 id="九、Bear"><a href="#九、Bear" class="headerlink" title="九、Bear"></a>九、Bear</h2><p>筆記軟體 <a href="https://bear.app/">Bear</a> 對我來算是一個「超級加分項」，雖然不算絕對必要，但我願意訂閱，因為它讓我的生活更美好。</p><p>值得一提的是，它的「<strong>同步方案</strong>」採用 Apple 提供的 <a href="https://developer.apple.com/icloud/cloudkit/">CloudKit</a>，在<strong>個人隱私保護</strong>部分明顯優於 Notion、Evernote 等服務。</p><p>有興趣可以看<a href="https://www.reddit.com/r/bearapp/comments/porntu/is_bear_more_secure_than_apple_notes/">這則討論</a>。</p><blockquote><p>相關文章：<a href="https://blog.kyomind.tw/bear/">Evernote 最佳替代方案——筆記軟體 Bear 2 升級心得</a></p></blockquote><h2 id="十、Medium"><a href="#十、Medium" class="headerlink" title="十、Medium"></a>十、Medium</h2><p>主要就是看程式文章用！</p><p>Medium 雖然不是一個開發者平台，但上面還是有許多優質的程式類文章。</p><p>尤其和 <a href="https://dev.to/">DEV Community</a> 這類偏開發者的平台相比，Medium 的文章有一個比較明顯的特色，那就是不完全純技術取向，也有多軟體趨勢、職涯類的文件。</p><p>要說缺點，我認為有很多標題都太聳動了！點進去看，根本雷聲大雨點小，真的是很會「騙」讀者。😈</p><h2 id="十一、Microsoft-365"><a href="#十一、Microsoft-365" class="headerlink" title="十一、Microsoft 365"></a>十一、Microsoft 365</h2><p>訂這個主要是擔心需要開 Office 類檔案——但實際上我似乎完全沒有這類檔案的開啟需求。</p><p>目前對我的實際作用，只有那 1 TB 的 OneDrive。</p><p>因為是家庭方案，不算貴，所以聊勝於無。</p><h2 id="十二、極客時間超級會員"><a href="#十二、極客時間超級會員" class="headerlink" title="十二、極客時間超級會員"></a>十二、極客時間超級會員</h2><p>來自中國的線上學習平台，聚焦在軟體開發，主要以聲音和文字檔為媒介，相當於程式版的「得到 app」。</p><p>前 2 年推出了「<a href="https://time.geekbang.org/hybrid/next/pvip/home">超級會員</a>」這個「吃到飽」服務，可以存取平台 8 成以上的課程。但沒過多久就大幅漲價了（人民幣 499&#x2F;699→2999），還好我也陸續聽了幾十個課程。雖然不算很認真聽，但至少知道哪些課適合自己，以後可以單買。</p><p>考慮到漲價後已然太貴，而且該聽的課其實都差不多了，之後不會再續訂。</p><p>用聽聲音、看文字稿學習程式，當然不是一個特別有效的做法。主要作為「吸收新知」的手段，我覺得還算不錯。</p><hr><h2 id="「內容創作型」付費訂閱"><a href="#「內容創作型」付費訂閱" class="headerlink" title="「內容創作型」付費訂閱"></a>「內容創作型」付費訂閱</h2><p>扣除 Medium 這種「平台式」的內容創作訂閱。在《科技島讀》之後，就沒有我特別感興趣的「<strong>持續性個人創作</strong>」付費訂閱。</p><p>得到 app 上的萬維鋼《精英日課》我每一季都有訂，個人評價也非常高。不過嚴格來說，這只能算是「一次付費、分批交付」而已，稱不上真正的「訂閱制」。</p><p>作為一個文字創作者，想靠純文字吸引我來掏錢，說真的難度不低——我對文字內容含金量的敏感度很高。</p><p>換句話說，我在看一段付費內容時，會去思考：如果我來寫，需要花多少時間？來判斷這錢我付得值不值。</p><p>當然，文字只是一個載體，大部分主題沒有一定背景、資料準備是寫不出來的，比如金融、AI，也包括前述的《科技島讀》。</p><p>此時我的判斷基準則回歸最簡單的「知識愉悅與滿足感」。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MDQYOVd.png&quot; alt=&quot;DALL·E 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;這篇要來講述，2023 年的當下，對我而言「具有一定重要性」的付費訂閱。&lt;/p&gt;
&lt;p&gt;這屬於完全個人化的心得，我會列出那些不可或缺的訂閱項目，並解釋它們對我的重要性所在。&lt;/p&gt;
&lt;p&gt;所謂的「不可或缺」，意思是一旦我停止訂閱，我的工作和生活都會出現挑戰，應該說困擾吧！困擾的大小，就是這些訂閱項目對我的影響力與價值。&lt;/p&gt;
&lt;p&gt;以下排名同時也是重要性排名，就讓我們從最重要的開始吧！&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/MDQYOVd.png" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="開箱評論" scheme="https://blog.kyomind.tw/tags/%E9%96%8B%E7%AE%B1%E8%A9%95%E8%AB%96/"/>
    
    <category term="Bear" scheme="https://blog.kyomind.tw/tags/Bear/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="DigitalOcean" scheme="https://blog.kyomind.tw/tags/DigitalOcean/"/>
    
    <category term="Medium" scheme="https://blog.kyomind.tw/tags/Medium/"/>
    
    <category term="付費訂閱" scheme="https://blog.kyomind.tw/tags/%E4%BB%98%E8%B2%BB%E8%A8%82%E9%96%B1/"/>
    
    <category term="ChatGPT" scheme="https://blog.kyomind.tw/tags/ChatGPT/"/>
    
    <category term="極客時間" scheme="https://blog.kyomind.tw/tags/%E6%A5%B5%E5%AE%A2%E6%99%82%E9%96%93/"/>
    
    <category term="Setapp" scheme="https://blog.kyomind.tw/tags/Setapp/"/>
    
  </entry>
  
  <entry>
    <title>別依賴「試誤法」寫程式</title>
    <link href="https://blog.kyomind.tw/stop-trial-and-error/"/>
    <id>https://blog.kyomind.tw/stop-trial-and-error/</id>
    <published>2023-10-04T17:42:55.000Z</published>
    <updated>2023-10-29T13:44:15.164Z</updated>
    
    <content type="html"><![CDATA[<!-- ![from Pixabay](https://i.imgur.com/K0128bg.jpg) --><p><img src="https://i.imgur.com/cr4Ay4E.jpg" alt="from Pixabay"><span class="cap">from Pixabay</span>\</p><p>這個情況真的太普遍，尤其是知識不夠紮實（指<strong>為開發所做的功課太少</strong>）的開發者。但如下所述，這其實是一個「<strong>開發習慣</strong>」議題。</p><p>無論如何，我不得不為此發聲：「<strong>請停止用『試誤法』來寫程式</strong>！」</p><p>我們先看看維基百科對於「<a href="https://zh.wikipedia.org/zh-tw/%E5%B0%9D%E8%AF%95%E9%94%99%E8%AF%AF%E6%B3%95">試誤法</a>」的闡述：</p><blockquote><p><strong>嘗試錯誤法</strong>，又稱<strong>試誤法</strong>（英語：trial and error），簡稱<strong>試錯</strong>，是用來解決問題、獲取知識。此種方法可以視為簡易解決問題的方法中的一種，與使用洞察力／直覺或理論推理的方法正好相反。</p></blockquote><p>就像這句「此種方法可以視為簡易解決問題的方法中的一種」說的，在我看來，試誤法常常會得到 workaround（雖不能根本解決，但能<strong>避開問題</strong>的替代方法）等級的答案——這肯定不是好事。</p><p>首先我得說，「試誤」在軟體開發中，是一個常見且實用的手段。</p><p>我自己寫一些邏輯時，也常常在 jupyter notebook 先執行嘗試執行一下程式碼片段，看看結果，以確保我的想法沒錯。<strong>但，這只是一種輔助。</strong></p><p>本文想強調的是：<strong>不要以「試誤」作為開發的基調，或解決問題的主要方式</strong>。換言之，<strong>不要濫用試誤</strong>。</p><p>否則那將是一場災難。</p><p>無數次 trial and error，看起來勤勤懇懇，實際上是<strong>最低效的開發手段</strong>。我覺得，試個兩、三次行不通，就應該<strong>重新思考問題的本質——而非繼續嘗試。</strong></p><span id="more"></span><p>以下我們從除錯（debug）與開發（develop）兩個角度，來看看「濫用試誤法」帶來的悲劇。</p><hr><h2 id="Debug-時的試誤"><a href="#Debug-時的試誤" class="headerlink" title="Debug 時的試誤"></a>Debug 時的試誤</h2><p>Debug 和試誤法似乎挺搭的，不是嗎？一步一步嘗試，直接全都正確了為止。</p><p>看似如此，但實際上<strong>正好相反</strong>。</p><p><strong>把試誤心態用在 debug，恰恰是讓 bug 不斷滋生的主要原因。</strong></p><p>試誤的基本心態是「結果好，一切好」，但我們 debug 往往不僅是為了把當下的錯誤消除掉而已。</p><p>更多時候，<strong>我們想要知曉錯誤發生的「原因」為何</strong>，以及是否存在會引發相關錯誤的其它原由——這些都是試誤法不關心的。</p><p>所以，debug 時，試誤只能作一種<strong>很次要的輔助手段</strong>，我們的目標應該是「<strong>找出錯誤的原因，並想辦法防止同類型錯誤的發生</strong>」。</p><p>只要找不到問題的本源，那後續可有的「試」了。</p><h2 id="開發時的試誤"><a href="#開發時的試誤" class="headerlink" title="開發時的試誤"></a>開發時的試誤</h2><p>別想說只有 debug 才容易讓人陷入試誤的濫用。以「試誤心態」進行開發，我認為也非常普遍！</p><p>這樣的開發者的什麼樣的<strong>習性</strong>？以開發一個新功能為例，常常有以下流程：</p><ul><li>想到什麼就寫什麼——單純把自然語言的需求，翻譯成程式碼，我稱之為「<strong>機器翻譯</strong>」</li><li>從頭到尾寫完，然後看看程式運行會不會出錯（寫完也不重構一下，就像文章草稿完成後，直接發表）</li><li>發現執行結果有錯，看一下錯誤訊息，調整一下程式碼</li><li>可以了！好，下一個功能</li></ul><p>這樣的開發方式有什麼問題？看起來好像也不算太差呀？</p><p>確實，在簡單的需求時，這種開發方式（或說心態、習性）可能是「效率最高」的做法！——姑且不論程式碼品質。</p><h2 id="試誤處理不了變化與複雜"><a href="#試誤處理不了變化與複雜" class="headerlink" title="試誤處理不了變化與複雜"></a>試誤處理不了變化與複雜</h2><p>但只要需求變化、複雜化，包括後續的擴充，這樣的開發方式就不太妙了。</p><p>因為缺乏<strong>全局觀</strong>與開發工具相關（套件、框架）重要知識——<strong>講白了就是文件看太少</strong>，畢竟之前的開發成果主要是靠「試」出來的。</p><p>此時「試誤型開發者」會陷入一個迴圈：</p><ol><li>發現程式執行結果不如預期（未必是無法執行，但就是不如預期）</li><li>不確定原因為何（因為常常都是靠「試誤」在解決問題）</li><li>不斷調整寫法、不斷觀察程式執行結果</li><li>回到前述 1</li></ol><p>隨著專案愈來愈複雜，程式碼行數不斷擴張，這種情況也將隨之增加。</p><p>一言以蔽之，試誤無法有效處理複雜。處理複雜，需要你有系統地思考、更全面的知識——最好多看文件、多問 ChatGPT。而非簡單的試誤。</p><p>但在簡單的需求下，試誤卻是一個<strong>快速完成開發的誘人捷徑</strong>。總是依賴試誤法開發，在複雜的情況就容易原形畢露。</p><hr><h2 id="試誤依賴的根本問題"><a href="#試誤依賴的根本問題" class="headerlink" title="試誤依賴的根本問題"></a>試誤依賴的根本問題</h2><p>現在有了 ChatGPT 這個強力工具，理論上我們的開發水準都在相應提升。</p><p>但是，我必須說，對於依賴試誤開發的人而言，ChatGPT 對他們帶來的提升，<strong>可能是最小的——why</strong>？</p><p>因為這類人很容易把試誤心態帶入 ChatGPT 的使用習慣，所以就變成了「向 ChatGPT 要答案」：</p><ul><li>可以了！→下一題</li><li>不行耶！→修改問題再問一次、補充內容</li></ul><p>反正我要的就是答案，至於原理是什麼，暫且不論。</p><p>沒錯，這只是<strong>另一種方式的試誤</strong>而已。（或許我們可以稱之為「<strong>AI 輔助試誤法</strong>」）</p><p>這樣做絕對可以讓開發變得更快，卻未必能變得「更好」。</p><hr><h2 id="小結：試誤是機器的事"><a href="#小結：試誤是機器的事" class="headerlink" title="小結：試誤是機器的事"></a>小結：試誤是機器的事</h2><p>試誤是機器的事，因為機器擅長此道。沒有人能夠在 1 秒內發出 1000 個請求，但機器卻能輕鬆辦到。</p><p>直白地說，如果軟體工程師終有一天會被 AI 取代，那我相信第一波被取代的，肯定是這些「<strong>只把 AI 當作試誤工具</strong>」的人。</p><p>這樣的用法，相當於把自己當「試誤機器」在運作——但人終究不是機器。</p><p>在快速試誤的競賽中，人和機器，誰更有機會勝出呢？</p><blockquote><p>相關文章：<a href="https://blog.kyomind.tw/weekly-review-18/">18，論軟體工程師常見的「路徑依賴」問題（上）</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;!-- ![from Pixabay](https://i.imgur.com/K0128bg.jpg) --&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cr4Ay4E.jpg&quot; alt=&quot;from Pixabay&quot;&gt;\&lt;/p&gt;
&lt;p&gt;這個情況真的太普遍，尤其是知識不夠紮實（指&lt;strong&gt;為開發所做的功課太少&lt;/strong&gt;）的開發者。但如下所述，這其實是一個「&lt;strong&gt;開發習慣&lt;/strong&gt;」議題。&lt;/p&gt;
&lt;p&gt;無論如何，我不得不為此發聲：「&lt;strong&gt;請停止用『試誤法』來寫程式&lt;/strong&gt;！」&lt;/p&gt;
&lt;p&gt;我們先看看維基百科對於「&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/%E5%B0%9D%E8%AF%95%E9%94%99%E8%AF%AF%E6%B3%95&quot;&gt;試誤法&lt;/a&gt;」的闡述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;嘗試錯誤法&lt;/strong&gt;，又稱&lt;strong&gt;試誤法&lt;/strong&gt;（英語：trial and error），簡稱&lt;strong&gt;試錯&lt;/strong&gt;，是用來解決問題、獲取知識。此種方法可以視為簡易解決問題的方法中的一種，與使用洞察力／直覺或理論推理的方法正好相反。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就像這句「此種方法可以視為簡易解決問題的方法中的一種」說的，在我看來，試誤法常常會得到 workaround（雖不能根本解決，但能&lt;strong&gt;避開問題&lt;/strong&gt;的替代方法）等級的答案——這肯定不是好事。&lt;/p&gt;
&lt;p&gt;首先我得說，「試誤」在軟體開發中，是一個常見且實用的手段。&lt;/p&gt;
&lt;p&gt;我自己寫一些邏輯時，也常常在 jupyter notebook 先執行嘗試執行一下程式碼片段，看看結果，以確保我的想法沒錯。&lt;strong&gt;但，這只是一種輔助。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文想強調的是：&lt;strong&gt;不要以「試誤」作為開發的基調，或解決問題的主要方式&lt;/strong&gt;。換言之，&lt;strong&gt;不要濫用試誤&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;否則那將是一場災難。&lt;/p&gt;
&lt;p&gt;無數次 trial and error，看起來勤勤懇懇，實際上是&lt;strong&gt;最低效的開發手段&lt;/strong&gt;。我覺得，試個兩、三次行不通，就應該&lt;strong&gt;重新思考問題的本質——而非繼續嘗試。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/cr4Ay4E.jpg" type="image"/>
    
    
    <category term="軟體開發" scheme="https://blog.kyomind.tw/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
    <category term="Clean Code" scheme="https://blog.kyomind.tw/tags/Clean-Code/"/>
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="工作心得" scheme="https://blog.kyomind.tw/tags/%E5%B7%A5%E4%BD%9C%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>Kyo&#39;s Django Tutorial：系列介紹與導讀</title>
    <link href="https://blog.kyomind.tw/django-tutorial/"/>
    <id>https://blog.kyomind.tw/django-tutorial/</id>
    <published>2023-09-30T08:48:35.000Z</published>
    <updated>2023-10-03T02:05:57.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/lyxUZv1.png" alt="github.com/kyomind/Django-Tutorial"><span class="cap">github.com/kyomind/Django-Tutorial</span></p><p>這是「<a href="https://blog.kyomind.tw/tags/Django-Tutorial/">Django Tutorial</a>」系列文章的第「0」篇，也就是序言。</p><p>主要說明整個系列的寫作動機、文章規劃，並介紹 GitHub 倉庫的使用方式。</p><p>嘗試寫作這樣「單一主題長系列連載」的靈感，源於下列二者：</p><ul><li><a href="https://www.maxlist.xyz/2020/01/01/author/">Max 行銷誌</a>的 <a href="https://www.maxlist.xyz/2020/05/01/flask-list/">2023 Flask 入門指南</a></li><li><a href="https://blog.aotoki.me/">蒼時弦也</a>的<a href="https://blog.aotoki.me/series/">系列連載</a></li></ul><p>兩位都是「<strong>既能做又能寫</strong>」的優秀開發者，值得我們學習。</p><hr><h2 id="系列寫作動機"><a href="#系列寫作動機" class="headerlink" title="系列寫作動機"></a>系列寫作動機</h2><p>雖然 blog 上本來就有少數被我歸類為「系列」的文章，比如 <a href="https://blog.kyomind.tw/simple-notion/#%E7%B3%BB%E5%88%97%EF%BC%9ASimple-Notion%E2%80%94%E2%80%94%E6%88%91%E7%9A%84-Notion-%E7%B0%A1%E6%BD%94%E4%B9%8B%E9%81%93">Simple Notion 系列</a>。但最多就是 3-4 篇，這是我有意控制的結果，希望整個創作週期不要拉得太長。</p><p>而且用 3-4 篇呈現、表達一個我認為重要的主題，通常也足夠了。</p><p>後來想到自己雖然在工作上寫了 2 年 Django，對 Django 的文章介紹卻非常少。讓我不免覺得，自己有違作為一個 Django 開發者的「義務」。</p><p>所以起心動念，想說至少寫個「Django Models」三部曲，也就是目前整個系列中，在時間軸上第一篇發表的文章〈<a href="https://blog.kyomind.tw/django-models/">Django ORM：一對一、一對多外鍵教學（上）前言與關聯設定</a>〉。</p><p>寫完後又沉寂了好一段時間，才有了這篇序言。</p><span id="more"></span><h2 id="從-Django-Models-到-Django-API"><a href="#從-Django-Models-到-Django-API" class="headerlink" title="從 Django Models 到 Django API"></a>從 Django Models 到 Django API</h2><p>Django models 可以說是 Django 最常見的議題（它確實非常重要），網路上的介紹文章已經不少。</p><p>所以即使寫完這三部曲，我覺得恐怕對讀者的助益仍是有限，想到這裡難免有點動搖，於是遲遲不見第二篇。</p><p>後來又思考了一番，既然如此，那我乾脆把工作中常見的 Django 實作加入這個系列，無疑會更有價值、更完整。</p><p>尤其繁體中文世界對於 Django 的介紹，大多停留在<strong>製作整個網站</strong>（主要介紹模板、Form、View、Model），而不是開發 API——用 Django 開發 API 的相關教材太少了。</p><p>這個現象不難理解，因為在台灣使用 Django 作為產品主要後端的公司相對有限，所以文章分享自然就不是那麼多。</p><p>但工作中你幾乎不太可能直接用 Django 來開發整個網站，畢竟這是個前後端分離的年代。</p><p>想到這裡，寫作 Django 系列教學的動力又回升了！這或許就是我的使命。</p><h2 id="目標讀者"><a href="#目標讀者" class="headerlink" title="目標讀者"></a>目標讀者</h2><p>因此，這系列文章主要針對那些已有 Python 基礎，但想要進一步了解 Django 網頁開發，尤其是「<strong>用 Django 開發 Web API</strong>」的讀者。</p><p>畢竟開發 API 才是我的 Django 日常。</p><p>所以我不得不遺憾地表示，這個系列將不會有任何關於「Django 模板、表單」元件等介紹，也不會討論上述元件與 Django View 的整合議題。</p><p>而是完全以「API」為核心。</p><hr><h2 id="文章規劃"><a href="#文章規劃" class="headerlink" title="文章規劃"></a>文章規劃</h2><p>目前計畫分成三大部分。</p><h3 id="一、Django-ORM"><a href="#一、Django-ORM" class="headerlink" title="一、Django ORM"></a>一、Django ORM</h3><p>無論全端還是前後端分離，<strong>Django ORM 的重要性與地位都不會有任何影響</strong>，所以 ORM 三部曲自然還是要一一介紹。</p><p>而且會放在整個系列的最靠前部分。</p><p>目前規劃的文章為：</p><ol><li>Django ORM：一對一、一對多外鍵教學（上）前言與關聯設定</li><li>Django ORM：一對一、一對多外鍵教學（中）反向關聯</li><li>Django ORM：一對一、一對多外鍵教學（下）查詢篇</li></ol><p>而且，整個 Django 框架中，我最愛的部分就是 Django ORM——它<strong>強大而優雅</strong>。</p><h3 id="二、pytest-單元測試"><a href="#二、pytest-單元測試" class="headerlink" title="二、pytest 單元測試"></a>二、pytest 單元測試</h3><p>我相信，沒有單元測試的開發，是「不健全」的開發。</p><p>自己的程式自己測，優秀的開發者不會把「低級錯誤」留給 QA，讓 QA 當保姆。</p><p>哪怕只是最基本的，為每一個 API 加上 200 回傳值的單元測試，都遠比沒有來得強。有了測試，再來就是覆蓋率報告。</p><p>文章預計有下：</p><ol><li>Django 測試指南：用 pytest 撰寫 API 單元測試——環境設定篇</li><li>Django 測試指南：用 pytest 撰寫 API 單元測試——Fixtures 篇</li><li>Django 測試指南：使用 pytest + pytest-cov 計算 Test Coverage</li></ol><h3 id="三、Django-API"><a href="#三、Django-API" class="headerlink" title="三、Django API"></a>三、Django API</h3><p>講到 Django API，就不得不提 <a href="https://www.django-rest-framework.org/">Django REST framework</a>（下稱 DRF），尤其是它提供的 <a href="https://www.django-rest-framework.org/api-guide/views/">API view</a>（無論 <a href="https://ithelp.ithome.com.tw/articles/10205779">CBV 或 FBV</a>）與<a href="https://www.django-rest-framework.org/api-guide/serializers/">序列化器</a>。</p><p>當然，時代在變遷，如今開發 Django API 並非只能選擇 DRF，後起之秀 <a href="https://django-ninja.rest-framework.com/">Django Ninja</a> 也值得一試。</p><p>尤其它支援 <a href="https://docs.pydantic.dev/latest/">Pydantic</a>，可以<strong>依程式碼自動生成 API 文件</strong>。你可以簡單想成，它就像是「Django 版的 FastAPI」。</p><p>不過我們的教學還是會以 DRF 為主。</p><p>預計主題有下，目前文章標題皆未定：</p><ul><li>用 DRF 開發 Django API</li><li>DRF 序列化器</li><li>檔案上傳</li><li>國際化（i18n）</li><li>DRF 分頁（Pagination）</li><li>logging</li></ul><p>如你所見，<strong>這並不是一個「大而全」的 Django 教學</strong>，而是<strong>以我自己的實務經驗為主</strong>，介紹我認為最重要且相對熟悉的部分。</p><p>主要的目標是讓讀者可以<strong>快速上手</strong>，並了解 Django API 開發的基本概念。</p><h3 id="非屬系列的-Django-教學"><a href="#非屬系列的-Django-教學" class="headerlink" title="非屬系列的 Django 教學"></a>非屬系列的 Django 教學</h3><p>Blog 的 <a href="https://blog.kyomind.tw/categories/Django/">Django 分類</a>，還是會寫一些和 Django 相關的文章，但不屬於這個大主題的一部分，所以沒有納入系列文章中。</p><p>比如現有的：</p><ul><li><a href="https://blog.kyomind.tw/django-request-headers/">Django：以 request.headers 而非 META 獲取 HTTP header 資訊</a></li><li><a href="https://blog.kyomind.tw/django-mongoengine/">Django 專案 ORM 存取 MongoDB：MongoEngine 設定教學</a></li></ul><hr><h2 id="GitHub-專案介紹"><a href="#GitHub-專案介紹" class="headerlink" title="GitHub 專案介紹"></a>GitHub 專案介紹</h2><p>最後，介紹與整個系列教學直接相關的 GitHub repository——<a href="https://github.com/kyomind/Django-Tutorial">Django Tutorial</a> 專案。</p><p>這個專案的核心定位是「讓有讀者實際程式碼可以參考」。所以基本上是拿來「看」的。</p><p>但實際上我會讓它也能夠真正運行，以方便想要自己動手嘗試的讀者。</p><p>所以會為你準備相對應的 db 資料（使用 Django fixtures）。讓你可以在運行起這個專案後，使用 Postman 等 api client，直接呼叫該 api 親身驗證結果。</p><p>我相信這對學習大有幫助。</p><h3 id="分支的功能"><a href="#分支的功能" class="headerlink" title="分支的功能"></a>分支的功能</h3><p>專案中會有許多分支，採<code>&lt;流水號-文章slug&gt;</code>的模式命名，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01-django-models</span><br></pre></td></tr></table></figure><p>分支主要是作為歷史記錄之用，以及快速查看該分支所對應的<strong>程式碼修改</strong>。</p><p>每個分支所在的 commit 與上一個分支的結束，基本就是整個分支的變更內容（除了我直接在<code>main</code>分支進行修改，比如更新 <code>README</code>）。也就是文章教學中，對專案程式碼新增的部分。</p><p>附帶一提，<strong>分支記錄並非只限 Django Tutorial 系列文章</strong>，別的相關文章可能也會有！</p><p>比如我某篇文章要講解「專案容器化」，用現有的專案來進行示範無疑再好不過，所以也會變動專案程式碼並留下分支記錄。</p><h2 id="為何需要「教學用專案」"><a href="#為何需要「教學用專案」" class="headerlink" title="為何需要「教學用專案」"></a>為何需要「教學用專案」</h2><p>如前所述，<strong>讓系列中的每篇文章，有相應的程式碼可供參考，而且可以實際運行，是我為何特地建立這個專案的核心理由。</strong></p><p>不得不說，維護這樣的專案比單純寫文章來得辛苦。因為如此一來，這些文章中的程式碼舉例，都需要<strong>圍繞著專案而設計</strong>——不能隨意為之，且須有一定的「連貫性」。</p><p>但這麼做的價值是顯而易見的，專案讓這些教學更有<strong>整體感</strong>，與<strong>真實感</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lyxUZv1.png&quot; alt=&quot;github.com/kyomind/Django-Tutorial&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是「&lt;a href=&quot;https://blog.kyomind.tw/tags/Django-Tutorial/&quot;&gt;Django Tutorial&lt;/a&gt;」系列文章的第「0」篇，也就是序言。&lt;/p&gt;
&lt;p&gt;主要說明整個系列的寫作動機、文章規劃，並介紹 GitHub 倉庫的使用方式。&lt;/p&gt;
&lt;p&gt;嘗試寫作這樣「單一主題長系列連載」的靈感，源於下列二者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.maxlist.xyz/2020/01/01/author/&quot;&gt;Max 行銷誌&lt;/a&gt;的 &lt;a href=&quot;https://www.maxlist.xyz/2020/05/01/flask-list/&quot;&gt;2023 Flask 入門指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.aotoki.me/&quot;&gt;蒼時弦也&lt;/a&gt;的&lt;a href=&quot;https://blog.aotoki.me/series/&quot;&gt;系列連載&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兩位都是「&lt;strong&gt;既能做又能寫&lt;/strong&gt;」的優秀開發者，值得我們學習。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;系列寫作動機&quot;&gt;&lt;a href=&quot;#系列寫作動機&quot; class=&quot;headerlink&quot; title=&quot;系列寫作動機&quot;&gt;&lt;/a&gt;系列寫作動機&lt;/h2&gt;&lt;p&gt;雖然 blog 上本來就有少數被我歸類為「系列」的文章，比如 &lt;a href=&quot;https://blog.kyomind.tw/simple-notion/#%E7%B3%BB%E5%88%97%EF%BC%9ASimple-Notion%E2%80%94%E2%80%94%E6%88%91%E7%9A%84-Notion-%E7%B0%A1%E6%BD%94%E4%B9%8B%E9%81%93&quot;&gt;Simple Notion 系列&lt;/a&gt;。但最多就是 3-4 篇，這是我有意控制的結果，希望整個創作週期不要拉得太長。&lt;/p&gt;
&lt;p&gt;而且用 3-4 篇呈現、表達一個我認為重要的主題，通常也足夠了。&lt;/p&gt;
&lt;p&gt;後來想到自己雖然在工作上寫了 2 年 Django，對 Django 的文章介紹卻非常少。讓我不免覺得，自己有違作為一個 Django 開發者的「義務」。&lt;/p&gt;
&lt;p&gt;所以起心動念，想說至少寫個「Django Models」三部曲，也就是目前整個系列中，在時間軸上第一篇發表的文章〈&lt;a href=&quot;https://blog.kyomind.tw/django-models/&quot;&gt;Django ORM：一對一、一對多外鍵教學（上）前言與關聯設定&lt;/a&gt;〉。&lt;/p&gt;
&lt;p&gt;寫完後又沉寂了好一段時間，才有了這篇序言。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/lyxUZv1.png" type="image"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/categories/Django/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Tutorial" scheme="https://blog.kyomind.tw/tags/Django-Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>重啟了 Twitter 與我的理由</title>
    <link href="https://blog.kyomind.tw/return-to-twitter/"/>
    <id>https://blog.kyomind.tw/return-to-twitter/</id>
    <published>2023-09-27T17:15:14.000Z</published>
    <updated>2023-10-06T06:35:44.189Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>上個月重新登入了塵封一段時間的 Twitter（下稱推特）帳戶。也開始在上面發一些零星的推文——幾乎都是程式相關。</p><p>一直以來我都稱不上推特的重度用戶，如果有一個社群平台是我獲取資訊的來源，那主要還是臉書。</p><p>但我們知道，臉書在幾波隱私相關的大事件後，演算法有了較為明顯的改動。很多人——包括我在內——都覺得臉書的推薦內容不再像過去那般有趣、實用。</p><p>於是在轉職後的這幾年，我也開始看推特。</p><hr><h2 id="Cal-Newport-對推特的看法"><a href="#Cal-Newport-對推特的看法" class="headerlink" title="Cal Newport 對推特的看法"></a>Cal Newport 對推特的看法</h2><p>如果你看比較多 Cal Newport 的內容（主要是 Podcast），你會發現，他雖然沒有任何社群平台帳戶，但他對推特的討論與關注，遠遠超過對其它平台的討論，比如臉書、Substack。</p><p>〈<a href="https://www.thedeeplife.com/podcasts/episodes/ep-241-the-virality-trap/">EP. 241: The Virality Trap</a>〉這集有一定的代表性。</p><span id="more"></span><p>他的基本論調是「推特的影響力被高估了」，大概用詞則是（ChatGPT 整理）：</p><blockquote><p>這是虛榮的販賣機——卻不一定能帶來真實價值。</p></blockquote><blockquote><p>他認為，這些社交媒體平台<strong>只是在吸收用戶的注意力</strong>，並將其轉化為收益，而不是真正的為用戶提供有價值的內容。</p></blockquote><blockquote><p>最後，他強調了一個觀點，那就是最好的策略是遠離這些社交媒體平台，並將注意力集中在更深入、更有價值的事情上。</p></blockquote><p>哈哈，Cal Newport 最後的結論總是「遠離這些平台」。</p><h2 id="我對推特的看法"><a href="#我對推特的看法" class="headerlink" title="我對推特的看法"></a>我對推特的看法</h2><p>我基本認同上述 Cal Newport 觀點，只不過，因為推特並非我的主要舞台，所以我可能不太容易掉入這個「陷阱」中。</p><p>儘管如此，推特還是有一些我不喜歡（或說不適應）的特色。</p><h3 id="一、快速表達帶來的喧囂"><a href="#一、快速表達帶來的喧囂" class="headerlink" title="一、快速表達帶來的喧囂"></a>一、快速表達帶來的喧囂</h3><p>因為每一則都很短，所以用戶常常是想到什麼都趕緊發一推，這讓我感覺有點太喧囂。不過說真的，連我自己都不禁受到平台的影響，也變成類似的發文模式。</p><p>而我對抗這個「引力」的簡單做法就是，限制可以存取的時間。</p><h3 id="二、政治元素太多"><a href="#二、政治元素太多" class="headerlink" title="二、政治元素太多"></a>二、政治元素太多</h3><p>政治味最重的平台，無人能出其右。你也可以說，意識形態非常濃厚。</p><p>我使用推特主要是為了看程式相關的內容，所以總是盡可能把這些聲音 mute 掉。</p><p>並非我不關心政治，只是我「不想在這裡關心」——這裡有我更感興趣的主題。</p><h2 id="離開推特的原因"><a href="#離開推特的原因" class="headerlink" title="離開推特的原因"></a>離開推特的原因</h2><p>我不登入推特超過了半年時間，那時覺得不想再使用它，主要還是因為——<strong>成癮性</strong>。</p><p>我覺得推特的成癮力比臉書更甚，可以說是<strong>文字成癮界的霸主！</strong></p><p>可不是只有我這麼覺得，《<a href="https://www.books.com.tw/products/0010914255">人生4千個禮拜</a>》作者 Oliver Burkeman 在書中也有這麼一段自白：</p><blockquote><p>我自己大概是個好例子。我有段不堪的過往，不過我猜我只是典型的一般人。我曾經對推特成癮，不過即便在我依賴推特的高峰期（我現在正在戒），我黏在螢幕前的時間，一天也很少超過兩小時。<a href="https://www.books.com.tw/products/0010914255">然而，推特占據我注意力的程度，遠遠不只是兩小時的問題而已</a>。</p></blockquote><p>比起臉書，我比較難穩健控制對推特的使用。哪怕給自己訂了一些規則，它也都有足夠的力量，讓我打破規則。</p><p>而且這些社交平台的手機 app 使用體驗都設計得非常棒（用起來非常流暢、絲滑），讓你動不動就想要打開。</p><p>很難想像我還只是一個<strong>中輕度用戶</strong>，成癮性就如此之強。</p><p>就在我某次搭公車，公車搖來搖去但我仍不斷忍著暈眩刷推時，我終於受夠了，刪除了 Twitter app。</p><hr><h2 id="重啟了-Twitter-與我的理由"><a href="#重啟了-Twitter-與我的理由" class="headerlink" title="重啟了 Twitter 與我的理由"></a>重啟了 Twitter 與我的理由</h2><p>理由主要有兩個。</p><h3 id="一、需要一個發表程式類內容的地方"><a href="#一、需要一個發表程式類內容的地方" class="headerlink" title="一、需要一個發表程式類內容的地方"></a>一、需要一個發表程式類內容的地方</h3><p>程式相關內容，發在個人臉書，總讓我覺得猶豫，畢竟我的臉友普遍不是軟體產業的人。</p><p>之前有期待過 <a href="https://www.threads.net/">Threads</a>，但因為要綁 Instagram 帳戶，而且沒有網頁版，讓我意興闌珊。</p><p>重啟了推特後，我發現，過去這些追尋都是多餘的，推特就是最適合的舞台！</p><h3 id="二、我想要看更多有趣的開發資訊"><a href="#二、我想要看更多有趣的開發資訊" class="headerlink" title="二、我想要看更多有趣的開發資訊"></a>二、我想要看更多有趣的開發資訊</h3><p>這點臉書就真的遠遠比不上，只有少數軟體工程師會經營臉書的粉專，但很多軟體工程師都有推特帳戶！且樂於分享開發相關的資訊。</p><p>比起單純的教學文章，這些推文往往帶有更多「經驗與價值偏好」，我覺得這也是推特最吸引我的地方。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;上個月重新登入了塵封一段時間的 Twitter（下稱推特）帳戶。也開始在上面發一些零星的推文——幾乎都是程式相關。&lt;/p&gt;
&lt;p&gt;一直以來我都稱不上推特的重度用戶，如果有一個社群平台是我獲取資訊的來源，那主要還是臉書。&lt;/p&gt;
&lt;p&gt;但我們知道，臉書在幾波隱私相關的大事件後，演算法有了較為明顯的改動。很多人——包括我在內——都覺得臉書的推薦內容不再像過去那般有趣、實用。&lt;/p&gt;
&lt;p&gt;於是在轉職後的這幾年，我也開始看推特。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Cal-Newport-對推特的看法&quot;&gt;&lt;a href=&quot;#Cal-Newport-對推特的看法&quot; class=&quot;headerlink&quot; title=&quot;Cal Newport 對推特的看法&quot;&gt;&lt;/a&gt;Cal Newport 對推特的看法&lt;/h2&gt;&lt;p&gt;如果你看比較多 Cal Newport 的內容（主要是 Podcast），你會發現，他雖然沒有任何社群平台帳戶，但他對推特的討論與關注，遠遠超過對其它平台的討論，比如臉書、Substack。&lt;/p&gt;
&lt;p&gt;〈&lt;a href=&quot;https://www.thedeeplife.com/podcasts/episodes/ep-241-the-virality-trap/&quot;&gt;EP. 241: The Virality Trap&lt;/a&gt;〉這集有一定的代表性。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="隨筆雜談" scheme="https://blog.kyomind.tw/categories/%E9%9A%A8%E7%AD%86%E9%9B%9C%E8%AB%87/"/>
    
    
    <category term="數位斷捨離" scheme="https://blog.kyomind.tw/tags/%E6%95%B8%E4%BD%8D%E6%96%B7%E6%8D%A8%E9%9B%A2/"/>
    
    <category term="Cal Newport" scheme="https://blog.kyomind.tw/tags/Cal-Newport/"/>
    
    <category term="Twitter" scheme="https://blog.kyomind.tw/tags/Twitter/"/>
    
  </entry>
  
  <entry>
    <title>23，Blog 新增「發文計畫」與我的思路</title>
    <link href="https://blog.kyomind.tw/weekly-review-23/"/>
    <id>https://blog.kyomind.tw/weekly-review-23/</id>
    <published>2023-09-24T15:48:29.000Z</published>
    <updated>2023-10-28T18:18:28.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/anwWHRH.png"></p><p>前幾天躺在床上，突發奇想，想到一個可以改善我「發文紀律」的有效手段！</p><p>從以前到現在，雖然習慣把想寫的主題事先收集起來，但實際上它們<strong>究竟會以什麼樣的順序被創作</strong>，則非常依賴我當下的心情與喜好。</p><p>我並不喜歡這種「<strong>今天想到寫什麼才寫什麼</strong>」的模式，儘管多數主題都不是臨時起意，<strong>但創作本身卻存在很大的不確定性</strong>。</p><p>這是一種<strong>不穩定的狀態</strong>。</p><p>怎麼改善？沒錯，我想到用 Notion 建立我的<strong>發文行事曆</strong>，我稱之為「<a href="https://kyomind.notion.site/0c953c8bedb94bc5905a6257b836a8b8?v=7360496f14e64d47a8e7d781b0dd5a5d">發文計畫</a>」。</p><p>現在，你可以在 blog 左上角的選單找到它。</p><p>這篇來就介紹我的思路、為什麼選擇 Notion，以及如何規劃版面呈現等議題。</p><span id="more"></span><hr><h2 id="兩大訴求"><a href="#兩大訴求" class="headerlink" title="兩大訴求"></a>兩大訴求</h2><p>設計這樣的發文計畫，主要想透過下列<strong>兩個面向</strong>來有效提升我的寫作紀律。</p><h2 id="一、可預見"><a href="#一、可預見" class="headerlink" title="一、可預見"></a>一、可預見</h2><p>這裡的「可預見」包括對讀者和我自己，先說說讀者。</p><h3 id="對讀者而言"><a href="#對讀者而言" class="headerlink" title="對讀者而言"></a>對讀者而言</h3><p>我的 blog 創作方向，大致可以分成三類：</p><ol><li>程式。</li><li>筆記軟體與筆記方法。</li><li>寫作與各種心得。</li></ol><p>而這三者的關係——可以說<strong>沒有太大關係</strong>。</p><p>這會帶來一個「<strong>困境</strong>」：<strong>讀者不知道你下一篇寫的，會是哪個方向的主題</strong>，但讀者可能只對其中之一有興趣。</p><p>這樣的不確定，也會導致讀者<a href="https://blog.kyomind.tw/subscribe/">訂閱本站文章</a>的意願下降。就像<a href="https://www.inside.com.tw/article/8011-yowureport">當初《有物報告》停刊</a>的主要理由：</p><blockquote><p>周欽華表示，因為會員成長停滯，反應了<strong>產品有根本性的問題，最主要的問題是讀者的產品體驗不一致</strong>，造成「有物報告」的品牌不清晰，因此該停就停。</p></blockquote><blockquote><p>在訪談讀者的時候，讀者的回饋是<strong>內容主題太過發散、風格不統一，以至於讀者根本無法確定，今天所收到的電子報到底內容會是什麼？</strong>更不知道內容是不是自己想要的？而這種體驗上的不確定，就成了訂閱制的媒體想要成長所會面臨的瓶頸。</p></blockquote><p>雖然訂閱數並非我的主要追求，<strong>但我仍希望提高讀者的可預見性，讓讀者更容易知曉我接下來會寫什麼。</strong></p><h3 id="對我而言"><a href="#對我而言" class="headerlink" title="對我而言"></a>對我而言</h3><p>誠如前述，我對於什麼時候要創作哪個主題，太過隨機與憑藉個人喜好。這對我自己，也是一種不確定。</p><p>這樣的不確定帶來的<strong>最大困擾</strong>是：我可能會因為不清楚「<strong>現在</strong>」要寫什麼而拖延。</p><p>這十分諷刺，畢竟我早已累積了一大堆主題，<strong>但我卻不知道要從哪個開始。</strong></p><p>有了「發文計畫」，這些不確定有機會被大幅消除，讓我更有效率地進行創作。</p><h2 id="二、公開承諾"><a href="#二、公開承諾" class="headerlink" title="二、公開承諾"></a>二、公開承諾</h2><p>這點比較容易理解。</p><p>以往，在我還沒發文之前，你根本不知道我正在寫什麼，是不是有如期發表——這些都只有我自己知道而已。</p><p><strong>好處就是我可以一拖再拖，而壞處往往也是一拖再拖。</strong></p><p>公開承諾會<strong>強化其中的痛苦</strong>，讓我對這樣的拖延感到壓力。</p><hr><h2 id="為什麼選擇-Notion"><a href="#為什麼選擇-Notion" class="headerlink" title="為什麼選擇 Notion"></a>為什麼選擇 Notion</h2><p>我幾乎第一時間就決定用 Notion。</p><p>我知道，這樣的頁面，想要透過目前採用的「靜態部落格」來呈現，非常困難。</p><p>我當然可以做一個<strong>超級簡易版</strong>：只是列一個清單，第一個項目就是最近會發表的文章，然第二個就是再接下來會發表的……等等，以此類推。</p><p>但這樣的效果並不好，而且我在編輯上也不順手。同時，可以想見這會是比較需要頻繁變動的內容，對<strong>工具的流暢度</strong>有一定要求，單純的靜態網頁並不適合。</p><p>這種需求你會想到什麼？沒錯——Notion database！</p><h2 id="善用-Notion-database"><a href="#善用-Notion-database" class="headerlink" title="善用 Notion database"></a>善用 Notion database</h2><p>顯然，Notion database 非常符合這類情境，更別說它還有多種 view 可以呈現，修改一次資料後，所有的 view 都會跟著變動。</p><blockquote><p>真的太適合了！</p></blockquote><p>雖然它有一個缺點，那就是必須「開新視窗」，讓人有一種離開網站的感覺。但考慮到 Notion database 的強大易用，我還是接受了這個折衷之道。</p><p>此外，我也有考慮過 <a href="https://www.airtable.com/">Airtable</a>，因為它可以把 database 嵌入網頁中，不必開新視窗，整體感更好。</p><p>但仔細想想，我平常根本沒在用 Airtable！這會需要我「特地」去操作這個工具，徒增使用上的「摩擦力」。但 Notion 不同，它依舊是我的日常。</p><hr><h2 id="版面介紹"><a href="#版面介紹" class="headerlink" title="版面介紹"></a>版面介紹</h2><p>介紹一下「發文計畫」這個 database。</p><p>首先必須強調，database 的整體設計，盡可能遵循了我在〈<a href="https://blog.kyomind.tw/notion-database/">Notion 資料庫「反複雜」使用指南 👈</a>〉中提到的「<a href="https://blog.kyomind.tw/notion-database/#%E6%88%91%E7%9A%84-database-%E6%B8%9B%E6%B3%95">我的 Notion 減法</a>」原則：</p><ol><li>能少則少的欄位——記錄不要太面面俱到，以免淪為「填表機器」。</li><li>最大程度善用不同的 view——這非常重要。</li><li>固定架構、不使用進階功能。</li></ol><p>這個 database 總共有三個 view，功能各不相同，一一介紹如下。</p><h3 id="即將發表"><a href="#即將發表" class="headerlink" title="即將發表"></a>即將發表</h3><p>只包括「<strong>未發表</strong>」的文章。也是整個發文計畫的核心。</p><p>使用經典的 table view，記載近期將發表的文章標題、分類，以及<strong>預計完成日</strong>（也就是 deadline）。</p><p>其中最最重要的，當然就是「預計完成日」。</p><p>雖然不一定能 100% 遵守——也可能會延後。但原則上，它就是一個 deadline。</p><p>我對這個「既定日期」的尊重，將決定我的發文紀律可以得到多大程度的提升。</p><hr><p>附帶一提，我以前做 Notion 筆記時，其實很少用 table view，幾乎都是用 list view。但 list view 沒有欄位名稱，不利於公開展示，因此這裡我選用了 table。</p><p>此外，為了防止我無止境地往這裡狂塞想到的標題，造成<strong>發文池氾濫</strong>（畢竟我寫的再快，也沒有「想到文章標題」的速度快），所以這裡最多只會有 10 筆資料。</p><h3 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h3><p>只包括「已發表」的文章。</p><p>這裡選用了 gallery view，秀出封面圖片，並附上文章連結。</p><h3 id="發文行事曆"><a href="#發文行事曆" class="headerlink" title="發文行事曆"></a>發文行事曆</h3><p><strong>包括已發表和未發表的文章。</strong></p><p>我原本把它放在最左邊第一分頁（也就是打開這個頁面後的預設分頁），因為它在視覺上最直觀。但想想有點佔版面，還是移到了最右邊。</p><p>使用 <strong>calendar view</strong>，這對我來說很關鍵，我必須透過觀察發文日期之間的<strong>間隔日數</strong>，來確認發文的壓力是否過大、是否過於密集。包括發文日當天、前後一天是否還有別的安排等等。</p><p>如果是，就要進行調整，這也是我無法 100% 遵守發文日的原因之一，因為它們可能會有所變動。</p><p>整體而言，calendar view 完美地做到了「管理發文行程」這個任務，更不用說還可以<strong>透過拖曳來直接移動發文日期</strong>，太讚了！</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>我有預感，這個「發文計畫」的建立，對我來說會是一個重要的里程碑。</p><p>原因無它，<strong>我屬於「非常排斥」對要做的事進行規劃的人</strong>（現在仍是如此），更不喜歡所謂的「時間管理」。</p><p>我常常強調自己對「<strong>記錄→觀察→反思→調整</strong>」的偏好，甚至引以為豪。</p><p>但我也不得不承認，<strong>記錄有其極限</strong>，不是什麼問題都能夠透過記錄來改善。（雖然很多問題都可以！比如天天量體重來節制自己進食的欲望）</p><p>所以，「發文計畫」或許將成為我對「記錄」與「規劃」看法的轉捩點。</p><p>且讓我們拭目以待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/anwWHRH.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;前幾天躺在床上，突發奇想，想到一個可以改善我「發文紀律」的有效手段！&lt;/p&gt;
&lt;p&gt;從以前到現在，雖然習慣把想寫的主題事先收集起來，但實際上它們&lt;strong&gt;究竟會以什麼樣的順序被創作&lt;/strong&gt;，則非常依賴我當下的心情與喜好。&lt;/p&gt;
&lt;p&gt;我並不喜歡這種「&lt;strong&gt;今天想到寫什麼才寫什麼&lt;/strong&gt;」的模式，儘管多數主題都不是臨時起意，&lt;strong&gt;但創作本身卻存在很大的不確定性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這是一種&lt;strong&gt;不穩定的狀態&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;怎麼改善？沒錯，我想到用 Notion 建立我的&lt;strong&gt;發文行事曆&lt;/strong&gt;，我稱之為「&lt;a href=&quot;https://kyomind.notion.site/0c953c8bedb94bc5905a6257b836a8b8?v=7360496f14e64d47a8e7d781b0dd5a5d&quot;&gt;發文計畫&lt;/a&gt;」。&lt;/p&gt;
&lt;p&gt;現在，你可以在 blog 左上角的選單找到它。&lt;/p&gt;
&lt;p&gt;這篇來就介紹我的思路、為什麼選擇 Notion，以及如何規劃版面呈現等議題。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/anwWHRH.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="Airtable" scheme="https://blog.kyomind.tw/tags/Airtable/"/>
    
  </entry>
  
  <entry>
    <title>22，我還是預購了瓦基的《卡片盒筆記實戰課》</title>
    <link href="https://blog.kyomind.tw/weekly-review-22/"/>
    <id>https://blog.kyomind.tw/weekly-review-22/</id>
    <published>2023-09-16T15:06:12.000Z</published>
    <updated>2023-10-29T07:05:00.627Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/nltkimY.jpg" alt="from Pixabay"><span class="cap">from Pixabay</span></p><p>這標題乍看有點像廣告XD，不過你看下去就知道。😎</p><p>「還是」二字代表了我對「購買課程」這個決定的<strong>猶豫與觀望</strong>。</p><p>事情是這樣的，如果你也是<a href="https://readingoutpost.com/about/">瓦基</a>（應該不用再特別介紹）的<a href="https://readingoutpost.com/book-picking-subscriber/">電子報</a>訂戶，他在前兩天的新信中，公布了他的全新募資線上課程《<a href="https://www.pressplay.cc/project/148B74E70523C7A7E260484F9B6825CB/">卡片盒筆記實戰課</a>》。</p><p>這讓我不禁陷入一陣掙扎，究竟是買還是不買呢？</p><span id="more"></span><hr><h2 id="線上課的盛宴已過"><a href="#線上課的盛宴已過" class="headerlink" title="線上課的盛宴已過"></a>線上課的盛宴已過</h2><p>如果是「三年前」的我，肯定是當下就直接入手了。因為那時還處於台灣線上課程平台的全盛時期，很多用戶願意買單，包括我，在 Hahow 也買了超過 30 堂課。</p><p>那時是怎麼想的？當然是希望買了課、上了課以後，自己會有所不同。</p><p>然而從經驗與結果來看，顯然的，這個期望並不容易兌現。即便買了很多課，到頭來也是<strong>失望居多</strong>——我還是以前的那個我。</p><p>其中原因不一而足，有些課確實品質不佳，感覺就是東拼西湊；更多時候則是「買很簡單，卻沒有真的花時間看」。</p><p>實踐的動力不足，本質上往往是因為「<strong>想要大於需要</strong>」，有時候甚至是「<strong>被迫想要</strong>」，也就是所謂的「<strong>資訊焦慮</strong>」。</p><p>無論如何，這裡想表達，大部分人買課時，那些對於自己在購買後能夠「因此而成長」的期待，多數時候是無法兌現的。</p><blockquote><p>畢竟現實如此骨感。</p></blockquote><h2 id="變得精明的消費者"><a href="#變得精明的消費者" class="headerlink" title="變得精明的消費者"></a>變得精明的消費者</h2><p>因此，就算我感覺課的品質不錯，三年後的我，也不會像那時一樣，僅憑著一腔的熱血與期待，就貿然出手。</p><p>因為我知道，買了課以後，很大可能是「<strong>然後就沒有然後了</strong>」。</p><p>用時間——與金錢——理解了上述現實後，我現在也很少再買台灣的線上課，畢竟它們通常都不便宜。</p><h2 id="只買-Udemy"><a href="#只買-Udemy" class="headerlink" title="只買 Udemy"></a>只買 Udemy</h2><p>不過 <strong>Udemy 的程式類課程</strong>我還是很常買，一來是工作與學習需要，二來是便宜，就像逛超市一樣，買了不看我也不心痛。</p><p>相反的，Udemy 課程的最大「問題」，往往是內容太過豐富XD。</p><p>很多都是超大碗、時數長（但特價時基本上都只要台幣 360 元——應該沒人在買原價的），認真看完也不切實際。能完成 6 成就功德圓滿了。</p><p>附帶一提，<a href="https://www.udemy.com/user/academind/">Academind</a> 的課真的都還不錯，我已經看完 <a href="https://www.udemy.com/course/python-django-the-practical-guide/">Django</a> 和 <a href="https://www.udemy.com/course/writing-clean-code/">Clean Code</a> ，目前正在學習 <a href="https://www.udemy.com/course/github-actions-the-complete-guide/">GitHub Actions</a>，十分推薦。</p><hr><h2 id="我的卡片筆記之道"><a href="#我的卡片筆記之道" class="headerlink" title="我的卡片筆記之道"></a>我的卡片筆記之道</h2><p>除了購買線上課程的熱情已經大不如前，還有另一個<strong>更關鍵的原因</strong>，讓我對於購入瓦基的新課感到躊躇。</p><p>那就是「<strong>我有我的卡片筆記之道</strong>」。</p><p>你可以說這是一種「<a href="https://dict.idioms.moe.edu.tw/idiomView.jsp?ID=124&webMd=1&la=0">敝帚自珍</a>」，但可以確信的是，有了自己習慣的方式後，要接受新的做法肯定比「還是一張白紙」時困難。</p><p>且我在〈<a href="https://blog.kyomind.tw/logseq/">Logseq 心得：一顆冉冉升起的「卡片筆記」新星</a>〉提過，要用好卡片筆記，其實也不需要看書。尤其書中的那套「<strong>永久筆記、文獻筆記、靈感筆記</strong>」等分類，個人不是特別欣賞。</p><p>簡單來說，我對《<a href="https://www.books.com.tw/products/0010922143">卡片盒筆記</a>》一書的評價是：<strong>普通</strong>。這與<a href="https://readingoutpost.com/smart-notes-foreword/">瓦基對本書的看法</a>可謂<strong>大相徑庭，截然不同。</strong></p><p>而目前台灣卡片筆記的兩大推廣者——瓦基（使用 <a href="https://heptabase.com/">Hetpabase</a>）、<a href="https://www.chichu.co/">朱騏</a>（使用 <a href="https://obsidian.md/">Obsidian</a>）——還是都比較有書中架構的影子。</p><p>這讓我產生一種<strong>本能上的排斥</strong>。</p><hr><h2 id="卡片筆記與我的軟肋"><a href="#卡片筆記與我的軟肋" class="headerlink" title="卡片筆記與我的軟肋"></a>卡片筆記與我的軟肋</h2><p>使用卡片筆記滿一年，我無疑是它的愛好者，它對我在程式學習上的幫助，尤其是<strong>複習</strong>的效果，比起「Notion 時期」明顯提高了一個檔次。</p><p>當然，任何工具都有其優缺點，卡片筆記或 Logseq 也稱不上神乎其神的筆記方法論，只能說它<strong>特別適合我</strong>而已。</p><p>可以說，我這輩子的「歸屬」，就是卡片筆記了。</p><p>然而，儘管有了卡片筆記這把利劍，卻還是存在一根<strong>軟肋</strong>——我創作速度依舊不快。</p><p>從發文的頻率就能看出，我顯然稱不上是一個高產者。</p><p>但「<strong>輔助寫作、讓寫作變簡單</strong>」卻是《卡片盒筆記》這本書的一個宣傳重點，並暗示著「善用卡片筆記」正是其發明者魯曼教授一生能夠<strong>在著作上如此多產</strong>的主要理由。</p><h2 id="卡片筆記真的能讓寫作變輕鬆？"><a href="#卡片筆記真的能讓寫作變輕鬆？" class="headerlink" title="卡片筆記真的能讓寫作變輕鬆？"></a>卡片筆記真的能讓寫作變輕鬆？</h2><p>我確信，卡片筆記對寫作<strong>肯定有幫助</strong>。畢竟我在〈<a href="https://blog.kyomind.tw/rusty-bullets/">從 Logseq 看清單式筆記的兩大缺點</a>〉就提過，<a href="https://blog.kyomind.tw/rusty-bullets/#%E6%B8%85%E5%96%AE%EF%BC%9A%E6%A7%8B%E6%80%9D%E7%9A%84%E5%88%A9%E5%99%A8">清單是構思的利器</a>。而作為清單式卡片筆記軟體的 Logseq，在收集素材與架構文章的作用上，比 Notion 更為稱職。</p><p>我確實可以透過串連一張張已完成的筆記（卡片），讓寫作的「<strong>起手式</strong>」變得較為輕鬆——<strong>但我的感受也僅止於此</strong>，明顯還達不到「組織既有卡片就能快速完成一篇高品質文章」的程度。</p><p>我寫一篇 2000-3000 字的文章，通常還是需要 3-5 小時。</p><p>這是不是因為我的創作能力不足？也許不是，畢竟我還是寫出了〈<a href="https://blog.kyomind.tw/simple-notion/">為何我「不推薦」用 Notion 管理你的人生</a>〉這般，連自己都非常滿意的作品。</p><p>所以，僅靠一張張卡片與它們之間的連結，真的就能讓寫作變得輕鬆？</p><p>我對此仍持保留態度。</p><hr><h2 id="最後一塊拼圖"><a href="#最後一塊拼圖" class="headerlink" title="最後一塊拼圖"></a>最後一塊拼圖</h2><p>無論是瓦基還是朱騏，他們的創作能量都是非常豐沛的，我深表佩服。</p><p>我的「創作手速」確實不如他們，但這究竟是因為<strong>我沒有善用卡片筆記</strong>，還是<strong>他們本來就比較認真</strong>呢？這是我心中最大的疑問。</p><p>換句話說，有時候看到別人特別推崇哪個方法時，我不免心生疑問：「<strong>這究竟是方法管用，還是這個人本來就很厲害？</strong>」畢竟能夠自信地提出所謂方法論的人，往往也不是什麼小咖。但如果是基於後者，那整件事對一般人而言就沒有<strong>可複製性</strong>。</p><p>帶著這個疑問，我還是決定買下這堂課——正因為我相信（或者是<strong>想要相信</strong>）「自己還沒有善用」的可能性或許高一些。</p><p>我希望尋找這最後一塊拼圖。</p><p>到時候，再來寫一篇心得吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nltkimY.jpg&quot; alt=&quot;from Pixabay&quot;&gt;&lt;/p&gt;
&lt;p&gt;這標題乍看有點像廣告XD，不過你看下去就知道。😎&lt;/p&gt;
&lt;p&gt;「還是」二字代表了我對「購買課程」這個決定的&lt;strong&gt;猶豫與觀望&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事情是這樣的，如果你也是&lt;a href=&quot;https://readingoutpost.com/about/&quot;&gt;瓦基&lt;/a&gt;（應該不用再特別介紹）的&lt;a href=&quot;https://readingoutpost.com/book-picking-subscriber/&quot;&gt;電子報&lt;/a&gt;訂戶，他在前兩天的新信中，公布了他的全新募資線上課程《&lt;a href=&quot;https://www.pressplay.cc/project/148B74E70523C7A7E260484F9B6825CB/&quot;&gt;卡片盒筆記實戰課&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;這讓我不禁陷入一陣掙扎，究竟是買還是不買呢？&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/xPAR5a7.jpg" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="Logseq" scheme="https://blog.kyomind.tw/tags/Logseq/"/>
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="卡片盒筆記法" scheme="https://blog.kyomind.tw/tags/%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95/"/>
    
    <category term="Obsidian" scheme="https://blog.kyomind.tw/tags/Obsidian/"/>
    
    <category term="Hetpabase" scheme="https://blog.kyomind.tw/tags/Hetpabase/"/>
    
    <category term="線上課" scheme="https://blog.kyomind.tw/tags/%E7%B7%9A%E4%B8%8A%E8%AA%B2/"/>
    
    <category term="Udemy" scheme="https://blog.kyomind.tw/tags/Udemy/"/>
    
  </entry>
  
  <entry>
    <title>Cal Newport 與我的河濱思考</title>
    <link href="https://blog.kyomind.tw/think-riverside/"/>
    <id>https://blog.kyomind.tw/think-riverside/</id>
    <published>2023-09-14T15:15:04.000Z</published>
    <updated>2023-10-05T04:51:01.161Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>從〈<a href="https://blog.kyomind.tw/weekly-review-19/">19，AI 時代的生存指南（二）數位斷捨離</a>〉發表後，又過了兩個月的時間，就像文中說的，要持續數位斷捨離，可一點也不簡單。</p><p>不過沒關係，我還是會繼續嘗試與實踐下去。只不過，數位斷捨離跟許多好習慣的養成一樣，多多少少都會消耗你的意志力，以達成一定的<strong>慣性</strong>。（當然如果你並不真的喜歡這件事，那最終依舊不會形成慣性）</p><p>如果同時還有其它目標追求，確實不宜對自己太過嚴苛，以免「全軍覆沒」。</p><p>不過其中一種數位斷捨離實踐，我倒是持續了好幾個月，效果不錯，而且我也推薦你這麼做——那就是「<strong>散步時，不要用手機</strong>」。</p><h2 id="Cal-Newport-為什麼沒有社交媒體帳號"><a href="#Cal-Newport-為什麼沒有社交媒體帳號" class="headerlink" title="Cal Newport 為什麼沒有社交媒體帳號"></a>Cal Newport 為什麼沒有社交媒體帳號</h2><p>Cal Newport 在這則〈<a href="https://youtu.be/m6AF_aFuD8w?si=KRXvJroDMkhB7JkJ">The Perks of Living Without Social Media | Cal Newport</a>〉影片中，講述了他<strong>不用任何社交媒體</strong>的理由。</p><p>一言以蔽之就是：為了<strong>保持無聊</strong>。</p><span id="more"></span><p>對，就是無聊，就是你所認知的那個無聊。</p><p>Cal Newport 對於無聊有著自己獨到的看法，我引用影片中的一些論點（由 ChatGPT 整理）：</p><blockquote><ul><li>當你在手機上安裝了這些容易上癮的應用程式後，手機成為了你<strong>分心的默認方式</strong></li><li>只要<strong>稍微感到無聊</strong>，你就會拿起手機並開始滑動社交媒體</li><li>當你感到無聊，本能會驅使你做一些有生產力的活動，<strong>但手機會中斷這種驅使</strong>，使你只看著那片發光的玻璃</li><li>當你不使用社交媒體，手機上沒有太多有趣的內容可以查看，這將使你<strong>更多地專注於周圍的世界和你的思考</strong></li><li>這是你<strong>反思自己</strong>，了解自己的好與壞，以及<strong>你在生活中所關心的事物</strong>的時候</li></ul></blockquote><p>如果你已拜讀過他的《<a href="https://www.books.com.tw/products/0010843512">深度數位大掃除</a>》，上述這些論點可能不會讓你感到太新奇。</p><p>但是，經過這幾個月的不帶手機散步體驗，<strong>我覺得我還是大大低估了「無聊的力量」</strong>。</p><h2 id="無聊的力量"><a href="#無聊的力量" class="headerlink" title="無聊的力量"></a>無聊的力量</h2><p>我不妨先問問自己：「以前帶手機去散步時，都在做些什麼？」</p><p>其實在「<a href="https://blog.kyomind.tw/riverside/#%E6%B2%B3%E6%BF%B1%E4%B9%8B%E6%96%BC%E6%88%91">河濱之於我</a>」有提過，就是聽 Podcast。除了 Podcast，還有<a href="https://time.geekbang.org/">極客時間</a>的一些程式課程。</p><p>這些行為看似充實，但如果讓現在的我來評論，我認為還是有點「不健康」。</p><blockquote><p>為什麼？</p></blockquote><p>就像上面提到 Cal Newport 的看法，這些行為都有「<strong>為了讓自己不無聊</strong>」的成份在。因此，<strong>我始終得不到無聊的力量</strong>。聽這些東西，只能算是一種<strong>廉價的自我滿足</strong>。</p><p>那，什麼是「<strong>無聊的力量</strong>」？</p><h2 id="反思與發想"><a href="#反思與發想" class="headerlink" title="反思與發想"></a>反思與發想</h2><p>無聊的力量，就是<strong>創造</strong>。</p><p>一直 input，沒什麼了不起。在這人手一機的時代，搭配無線耳機，除了睡覺，你可以無時無刻都在 input。</p><p>但這些資訊中的絕大多數，對於我們整個人生，又能有多少影響呢？<strong>我高度懷疑</strong>。</p><p>並不是說這些資訊無益，它們可能是製作精良的「知識大禮包」。但一直輸入，會讓人沒有足夠時間思考，停留在<strong>淺薄的層次</strong>，這就是我前面說的「廉價的自我滿足」。</p><p><strong>持續輸入反而稀釋了那些最重要的事物。</strong></p><p>這毋寧是現代生活的常態——好的東西，總是被平庸的東西，分散了注意力。</p><h2 id="我的河濱思考"><a href="#我的河濱思考" class="headerlink" title="我的河濱思考"></a>我的河濱思考</h2><p>好的河濱散步體驗，就是要無聊，真的無聊！</p><p>我只能<strong>「徒手」思考</strong>。</p><p>這幾天的經驗是這樣：走到河濱後，腦子不禁開始飛速運轉，因為沒有手機干擾，我只能想想<strong>最近有哪些想做的事</strong>，然後就<strong>一發不可收拾</strong>——我有好多想做的事。</p><p>腦海中開始一一盤點、發想怎麼做比較好。</p><p>你會驚訝地發現，<strong>其實自己的大腦擁有很高「轉速」，是手機和各種雜訊拖累了它！</strong></p><p>不過這種高速狀態不會持續很久，大概 15-30 分鐘吧！大腦也會是累的。</p><p>剩下的時候就放空即可，因為已經心滿意足了。</p><p>不想散步時還要思考？<strong>單純放空</strong>我也是非常推薦的！再怎麼樣都比聽手機內容強得多，不誇張。</p><h2 id="寫下來"><a href="#寫下來" class="headerlink" title="寫下來"></a>寫下來</h2><p>最後一步，就是寫下來。剛剛散步有著各種發想與創造，有些是點子，有些是具體行動方針，不妨在回來後，打鐵趁熱，儘速將它們寫下來。</p><p>下面這篇隨手筆記，就是我今晚在河濱走完路後想到的重要事項，回來後立刻寫下來，你看，我這不就完成了第一項了嗎？（不久後<a href="https://blog.kyomind.tw/weekly-review-22/">第二項</a>也完成了，偉哉河濱！🫡）</p><p><img src="https://i.imgur.com/a6xQn6C.png" alt="Logseq app"><span class="cap">Logseq app</span></p><p>附帶一提，寫下來內容只要<strong>大概即可，剛好能看懂就夠了</strong>，而且只要列個幾項重點，就已經功德圓滿。</p><p>這種簡單、清爽的感覺，又不禁讓我感受到「<strong>清單式筆記</strong>」的美妙了。</p><blockquote><p>相關文章：<a href="https://blog.kyomind.tw/silver-bullets/">從 WorkFlowy 到 Logseq——我偏愛「清單式筆記」的四大理由</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;從〈&lt;a href=&quot;https://blog.kyomind.tw/weekly-review-19/&quot;&gt;19，AI 時代的生存指南（二）數位斷捨離&lt;/a&gt;〉發表後，又過了兩個月的時間，就像文中說的，要持續數位斷捨離，可一點也不簡單。&lt;/p&gt;
&lt;p&gt;不過沒關係，我還是會繼續嘗試與實踐下去。只不過，數位斷捨離跟許多好習慣的養成一樣，多多少少都會消耗你的意志力，以達成一定的&lt;strong&gt;慣性&lt;/strong&gt;。（當然如果你並不真的喜歡這件事，那最終依舊不會形成慣性）&lt;/p&gt;
&lt;p&gt;如果同時還有其它目標追求，確實不宜對自己太過嚴苛，以免「全軍覆沒」。&lt;/p&gt;
&lt;p&gt;不過其中一種數位斷捨離實踐，我倒是持續了好幾個月，效果不錯，而且我也推薦你這麼做——那就是「&lt;strong&gt;散步時，不要用手機&lt;/strong&gt;」。&lt;/p&gt;
&lt;h2 id=&quot;Cal-Newport-為什麼沒有社交媒體帳號&quot;&gt;&lt;a href=&quot;#Cal-Newport-為什麼沒有社交媒體帳號&quot; class=&quot;headerlink&quot; title=&quot;Cal Newport 為什麼沒有社交媒體帳號&quot;&gt;&lt;/a&gt;Cal Newport 為什麼沒有社交媒體帳號&lt;/h2&gt;&lt;p&gt;Cal Newport 在這則〈&lt;a href=&quot;https://youtu.be/m6AF_aFuD8w?si=KRXvJroDMkhB7JkJ&quot;&gt;The Perks of Living Without Social Media | Cal Newport&lt;/a&gt;〉影片中，講述了他&lt;strong&gt;不用任何社交媒體&lt;/strong&gt;的理由。&lt;/p&gt;
&lt;p&gt;一言以蔽之就是：為了&lt;strong&gt;保持無聊&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="隨筆雜談" scheme="https://blog.kyomind.tw/categories/%E9%9A%A8%E7%AD%86%E9%9B%9C%E8%AB%87/"/>
    
    
    <category term="河濱" scheme="https://blog.kyomind.tw/tags/%E6%B2%B3%E6%BF%B1/"/>
    
    <category term="數位斷捨離" scheme="https://blog.kyomind.tw/tags/%E6%95%B8%E4%BD%8D%E6%96%B7%E6%8D%A8%E9%9B%A2/"/>
    
    <category term="Cal Newport" scheme="https://blog.kyomind.tw/tags/Cal-Newport/"/>
    
  </entry>
  
  <entry>
    <title>21，在 VM 上部署 Umami 替代 GA4</title>
    <link href="https://blog.kyomind.tw/weekly-review-21/"/>
    <id>https://blog.kyomind.tw/weekly-review-21/</id>
    <published>2023-09-10T17:03:55.000Z</published>
    <updated>2023-10-28T08:10:02.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/fBvzAN2.png" alt="Umami dashboard"><span class="cap">Umami dashboard</span></p><p><a href="https://github.com/umami-software/umami">Umami</a> 是一款類似 Google Analytics 的<strong>網站訪客數據收集、統計與分析</strong>工具，只是它是<a href="https://zh.wikipedia.org/zh-tw/%E5%BC%80%E6%BA%90%E5%AE%9A%E4%B9%89">開源</a>的，而且強調對隱私的保護，不會收集你的個人資訊。</p><p>當初會知道它，主要基於這兩篇文章：</p><ul><li><a href="https://willliu.blot.im/umami/">免費的網站流量統計系統 Umami</a></li><li><a href="https://pinchlime.com/snapshots/why/why-do-i-want-to-try-umami/">為什麼我想嘗試 umami ？</a></li></ul><p>可以看出，兩位作者採用 Umami 的動機大致相同：主要考慮用戶的<strong>隱私權保護</strong>，其次則著眼工具本身對網站效能的影響。</p><p>我呢？既然知道了這個服務，顯然我也有我的需求。</p><span id="more"></span><hr><h2 id="我也不喜歡-GA4"><a href="#我也不喜歡-GA4" class="headerlink" title="我也不喜歡 GA4"></a>我也不喜歡 GA4</h2><p>我雖然不太喜歡 Google Analytics，但倒是沒有那般厭惡。然而！隨著舊版 GA 的停用與 <a href="https://support.google.com/analytics/answer/10089681?hl=zh-Hant">GA4</a> 的到來，必須說：「我真的很不喜歡 GA4！」</p><p>對於商業用戶，它可能是利多，畢竟對網站訪客的蒐集行為更細緻了——這也是它招人恨的理由。這意味著商家對「潛在客戶」的了解又增加了幾分。</p><p>但對於我這種不營利的普通部落客而言，則新增的功能主要偏向商業不說，舊的、有意義的指標也拿掉了不少。</p><p>後台網站的操作界面與和 Looker Studio（Google 自家的 dashboard 服務）的串接體驗都更糟了。</p><p>對我來說，GA4 就是個災難。</p><h2 id="GA-替代品"><a href="#GA-替代品" class="headerlink" title="GA 替代品"></a>GA 替代品</h2><p>如果你也是一個不靠網站盈利的站長，那就未必要選擇 GA 作為數據分析工具。</p><p>雖然我們不得不承認，GA 確實強大——而且免費。</p><p>免費這可是很大的誘因，而它之所以能夠免費，顯然是因為服務提供者——Google——能夠在別的地方賺到錢！</p><p>如果不想用 GA，可選擇的替代品也很多，但大部分需要你付費或有一定成本。這也是為何 GA 依舊是最常見的分析工具，哪怕你不靠網站賺錢。</p><p>因為它使用上簡單且免費。</p><h2 id="我選擇-Umami-的理由"><a href="#我選擇-Umami-的理由" class="headerlink" title="我選擇 Umami 的理由"></a>我選擇 Umami 的理由</h2><p>GA4 的界面讓我很不想用，至少不想常用。雖然我並沒有把它拔除，但我想找一個供平時使用，更簡單、好讀的網站流量儀表版服務。</p><p>Google 一下關鍵字「ga alternative」你可以找到一大堆，而我強力推薦 Umami——畢竟我自己也用了！類似的選項還有 <a href="https://usefathom.com/">Fathom</a>、<a href="https://matomo.org/">Matomo</a>、<a href="https://plausible.io/">Plausible</a> 等等。</p><p>我選擇 Umami 的主要理由只有一個：因為它簡潔且美觀。</p><p>Dashboard 這種東西，顏值肯定是第一指標。至於 Umami 的其它賣點，例如對隱私的保護，雖然我也認同，但不是考量上的重點。</p><p>總之，如果你不想用 GA，又不知道該選哪個作為替代，就先選 Umami 吧！</p><hr><h2 id="部署-Umami-的幾種方式"><a href="#部署-Umami-的幾種方式" class="headerlink" title="部署 Umami 的幾種方式"></a>部署 Umami 的幾種方式</h2><p>Umami 雖然是開源的，但和很多開源軟體的一樣，採用類似 WordPress 的 <a href="https://zh.wikipedia.org/zh-tw/%E5%85%8D%E8%B2%BB%E5%A2%9E%E5%80%BC">Freemium</a> 模式。</p><p>意思是，你可以自行部署在自己的硬體上，比如本機電腦或租來的 <a href="https://www.gigabyte.com/tw/Glossary/virtual-machine">VM</a>。也可以直接申請一個付費帳戶，由 Umami 公司幫你託管，即 <a href="https://cloud.umami.is/">Umami Cloud</a> 服務。</p><p>說真的，如果你稍為研究過，這些付費服務可不算便宜，像 Umami Cloud 一個月就要 9 美元起跳。一個月花 9 美元只為了看看網站數據，你願意？</p><p>反正我不願意。</p><p>所幸，除了直接付錢，自行部署才是開源的常態。此時你依舊有兩種選擇：</p><ol><li>直接弄個自己的 VM 部署——當然租 VM 是要錢的。</li><li>使用 <a href="https://railway.app/">Railway</a> 這種有一定免費額度的托管平台來進行部署。</li></ol><p>從本文標題的可知，我選擇了第一種部署方式：我把 Umami 部署在 DigitalOcean 的 VM 上，並設定好了子域名與 SSL。</p><h2 id="免費部署的常見隱憂"><a href="#免費部署的常見隱憂" class="headerlink" title="免費部署的常見隱憂"></a>免費部署的常見隱憂</h2><p>我認為，如果你只是打算「試用」一下 Umami，那麼選擇什麼方式都可以，甚至直接付費 Umami Cloud 一個月。</p><p>但是，如果用了覺得喜歡，想要長期部署，那我強烈建議不要選擇上述第二種方式。理由有下：</p><ol><li>帶有免費額度的平台通常伴隨著<strong>各種限制</strong>，而且容易受到<strong>政策變更</strong>的影響，最有名的例子莫過於 <a href="https://www.ithome.com.tw/news/152729">Heroku</a>。</li><li>被平台與服務綁定，不利於未來<strong>資料的遷移</strong>。當然平台理論上也會有備份方案，但就是沒有直接 own 一台 Linux VM 那麼簡單、通用。</li></ol><p>簡言之，部署這類服務，<strong>長期可持續性</strong>是最重要的。而免費額度平台可能會讓你在未來遇到各種麻煩。</p><p>當然，如果只是小試水溫，則沒有這麼多顧慮。</p><h2 id="選擇-VM-部署的理由"><a href="#選擇-VM-部署的理由" class="headerlink" title="選擇 VM 部署的理由"></a>選擇 VM 部署的理由</h2><p>為何選擇 VM？除了前述原因，我再補充一下我的理由。</p><p>第一，VM 的環境都是一樣的，足夠通用。不用因為 A 平台要收費了，我又要學習 B 平台怎麼用。資料的備份和遷移也是如此。</p><p>其次，對有技術基礎的人而言，用 VM 部署往往更簡單，尤其 Umami 的專案中直接給你一個<code>docker-compose.yml</code>。Docker 用戶都知道，這意味著部署起來會很方便且無腦，比設定什麼免費 db 都要簡單得多。</p><p>不過話說回來，如果只是為了部署這單一個服務，特地租一台 VM 還是太過浪費了，錢也沒有省多少——還不如直接付費 Umami Cloud。</p><p>換句話說，能讓 VM 有多種用途，會比較划算。</p><p>此外，如果選擇用這個方式<strong>長期部署</strong>，那「<strong>自己的域名</strong>」和「<strong>SSL 憑證</strong>」都是必要的。如此才能確保<strong>安全性</strong>。</p><p>好吧我承認這真的有點麻煩😅，但我認為這是值得的。</p><hr><h2 id="使用-VM-部署-Umami"><a href="#使用-VM-部署-Umami" class="headerlink" title="使用 VM 部署 Umami"></a>使用 VM 部署 Umami</h2><p>關於部署 Umami，網路上可以找到比較多上述第二種部署方式，包括教你怎麼註冊、使用那些平台等等。我想不必再贅述。</p><p>而如果你想用 VM 部署，那麼一定要參考 DigitalOcean 上的這篇手把手教學：</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-umami-web-analytics-software-on-ubuntu-20-04">How To Install Umami Web Analytics Software on Ubuntu 20.04</a></li></ul><p>整個流程大概分成三部分：</p><ol><li><strong>透過 Docker Compose 在 VM 的 localhost 部署 Umami 服務</strong></li><li><strong>設定 Nginx 反向代理，將 3000 port 對應到 80（HTTP）</strong></li><li><strong>透過 Certbot 申請 SSL 憑證（需要有自己的域名）</strong></li></ol><p>我基本上就是照著它完成的，順利的話應該不出 1 小時——如果你已經有一台 VM。</p><p>雖然我實際花費的時間比 1 小時要多得多，但主要是為了了解整個流程用到的相關知識——主要是 Nginx 和 Docker，所以和 ChatGPT 進行了大量交流、做了很多筆記。</p><p>這過程讓我學到不少，包括現學現賣的 <a href="https://zh.wikipedia.org/zh-tw/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA">virtual hosting</a>（用單一台主機部署多個域名與服務），和複習 Docker 概念。</p><p>這無疑是很具體且<strong>目標導向</strong>的學習。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/fBvzAN2.png&quot; alt=&quot;Umami dashboard&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/umami-software/umami&quot;&gt;Umami&lt;/a&gt; 是一款類似 Google Analytics 的&lt;strong&gt;網站訪客數據收集、統計與分析&lt;/strong&gt;工具，只是它是&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/%E5%BC%80%E6%BA%90%E5%AE%9A%E4%B9%89&quot;&gt;開源&lt;/a&gt;的，而且強調對隱私的保護，不會收集你的個人資訊。&lt;/p&gt;
&lt;p&gt;當初會知道它，主要基於這兩篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://willliu.blot.im/umami/&quot;&gt;免費的網站流量統計系統 Umami&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pinchlime.com/snapshots/why/why-do-i-want-to-try-umami/&quot;&gt;為什麼我想嘗試 umami ？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看出，兩位作者採用 Umami 的動機大致相同：主要考慮用戶的&lt;strong&gt;隱私權保護&lt;/strong&gt;，其次則著眼工具本身對網站效能的影響。&lt;/p&gt;
&lt;p&gt;我呢？既然知道了這個服務，顯然我也有我的需求。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/fBvzAN2.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="Linux" scheme="https://blog.kyomind.tw/tags/Linux/"/>
    
    <category term="Docker" scheme="https://blog.kyomind.tw/tags/Docker/"/>
    
    <category term="Umami" scheme="https://blog.kyomind.tw/tags/Umami/"/>
    
    <category term="DigitalOcean" scheme="https://blog.kyomind.tw/tags/DigitalOcean/"/>
    
    <category term="Google Analytics" scheme="https://blog.kyomind.tw/tags/Google-Analytics/"/>
    
  </entry>
  
  <entry>
    <title>Notion 資料庫「反複雜」使用指南 👈</title>
    <link href="https://blog.kyomind.tw/notion-database/"/>
    <id>https://blog.kyomind.tw/notion-database/</id>
    <published>2023-08-28T17:29:31.000Z</published>
    <updated>2023-10-29T07:05:00.628Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/TJQDGmr.jpg" alt="by Daria Kolesnikova"><span class="cap">by Daria Kolesnikova</span></p><p>讓我們進入「Simple Notion」系列的第三篇，同時也是最後一篇。這次我們要聊聊，<strong>最能夠代表 Notion 的關鍵元素：資料庫（<a href="https://www.notion.so/help/intro-to-databases">database</a>）</strong>。</p><p>一提到 Notion 你會想到什麼？沒錯，就是資料庫。資料庫就是 <strong>Notion 的代名詞</strong>。</p><p>Notion 在 2016 年就誕生了（你也可以說是 2013年，請參考維基百科關於 <a href="https://zh.wikipedia.org/zh-tw/Notion">Notion 的「歷史與發展」</a>），但直到 2018 年才大紅，為什麼？——因為加入了 database。</p><p>儘管在 UI 加入類似<a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93">關聯式資料庫</a>，並非 Notion 獨創。畢竟，在此之前，<a href="https://www.airtable.com/">Airtable</a> 已經是這方面的佼佼者。但我們不得不承認，<strong>Notion 確實把資料庫玩出了新的高度</strong>。</p><h3 id="系列：Simple-Notion——我的-Notion-簡潔之道"><a href="#系列：Simple-Notion——我的-Notion-簡潔之道" class="headerlink" title="系列：Simple Notion——我的 Notion 簡潔之道"></a><strong>系列：Simple Notion——我的 Notion 簡潔之道</strong></h3><blockquote><ol><li><a href="https://blog.kyomind.tw/simple-notion/">為何我「不推薦」用 Notion 管理你的人生</a></li><li><a href="https://blog.kyomind.tw/stumbling-on-notion/">少則得，多則惑：使用 Notion 時的兩個常見陷阱</a></li><li><strong>Notion 資料庫「反複雜」使用指南 👈</strong></li></ol></blockquote><hr><h2 id="本文主旨與目標讀者"><a href="#本文主旨與目標讀者" class="headerlink" title="本文主旨與目標讀者"></a>本文主旨與目標讀者</h2><p>我希望不落俗套地，討論 Notion 資料庫的美麗與哀愁。</p><p>既然是「Simple Notion」系列文章，主軸仍會聚焦在「簡潔」二字。而講到簡潔使用 Notion，資料庫絕對是<strong>一個無法繞過的主要議題</strong>。</p><span id="more"></span><h3 id="目標讀者"><a href="#目標讀者" class="headerlink" title="目標讀者"></a>目標讀者</h3><p>這篇文章是為了「已使用過 Notion 資料庫但<strong>覺得太複雜或心累</strong>」的讀者而寫。</p><p>因為我就是其中一員！至少曾經是。</p><p>雖然現在已經較少使用 Notion 資料庫（只拿來管理文章草稿和工作會議記錄），但我覺得這個「利器」，適度使用還是非常方便的。</p><h2 id="本文架構與主軸"><a href="#本文架構與主軸" class="headerlink" title="本文架構與主軸"></a>本文架構與主軸</h2><p>為統一用語，本文中「database」皆指 Notion database。</p><p>我們要先講 Notion database 為什麼強大，然後再討論與之相關的「困境」，最後則是我對這些困境的解法與心得。</p><p>本文主軸是「<strong>Notion 資料庫簡潔之道</strong>」。因此，如同前兩篇，原則上不會有任何關於 Notion database 的詳細操作教學——這些是「術」。</p><p>想知道各種 database 使用技巧，可以上 YouTube，那裡有著海量的學習資源。</p><hr><p>讓我們進入正題。</p><h2 id="Notion-的心臟：資料庫"><a href="#Notion-的心臟：資料庫" class="headerlink" title="Notion 的心臟：資料庫"></a>Notion 的心臟：資料庫</h2><p>Notion database 真的很強大。可以說，光是 database 和六種 <a href="https://www.notion.so/help/guides/when-to-use-each-type-of-database-view">database view</a>，就佔據了 Notion 一半以上的重要功能——以及複雜度。</p><p>雖然 Notion database 有借鑑 Airtable 之嫌，但 <strong>view 與 view 之間的自由切換、資料的靈活呈現</strong>，則是任何剛接觸的人，都不得不讚嘆的強大應用模式。</p><h3 id="Notion-的本體就是-database"><a href="#Notion-的本體就是-database" class="headerlink" title="Notion 的本體就是 database"></a>Notion 的本體就是 database</h3><p>換句話說，我認為要用 Notion，絕對是因為它強大的 database。</p><p>這東西大大滿足了喜歡收集資料，和把它們整理得井然有序而且美觀的筆記控！我也曾經是這一份子啦☺️</p><p>不過就像前一篇說的，不建議花太多時間在「美觀」上，這會沒完沒了：</p><blockquote><p>這些元素可以讓你<strong>在視覺上感到富足</strong>，但從<strong>筆記效率</strong>與<strong>學習、實用角度</strong>來看，恐怕沒有多少幫助。光挑選這些「<strong>樣式</strong>」，就能花掉你不少時間，甚至讓人<strong>樂此不疲</strong>。</p></blockquote><h3 id="Craft——沒有-database-的-Notion？"><a href="#Craft——沒有-database-的-Notion？" class="headerlink" title="Craft——沒有 database 的 Notion？"></a>Craft——沒有 database 的 Notion？</h3><p>第一篇我們曾討論過「<a href="https://blog.kyomind.tw/simple-notion/#Notion-%E6%9B%BF%E4%BB%A3%E5%93%81%EF%BC%9F">Notion 替代品？</a>」這個議題，並提到了這篇文章〈<a href="https://matters.town/@willliu/169743-%E6%88%91%E7%94%A8%E4%BE%86%E5%8F%96%E4%BB%A3-notion-%E7%9A%84%E7%AD%86%E8%A8%98%E8%BB%9F%E9%AB%94-craft-bafyreibxtqjrt6yiwto5jqpogd27j6wcloj3xvq6z5w5nyhafqzpq33ydy">我用來取代 Notion 的筆記軟體：Craft</a>〉。</p><p><a href="https://www.craft.do/">Craft</a> 被部分人稱之為「<strong>沒有 database 的 Notion</strong>」，意味著它省去了 database 的複雜，但保留了其它吸引人的功能。</p><p>我自己因為有訂閱 <a href="https://setapp.com/">Setapp</a>（Craft 有收錄其中），所以有短暫嘗試過一下，但體驗不是很好。</p><p>主要是中文排版讓我覺得頗為零亂，而且字太小又沒有調整機制，這違背了我對筆記軟體的「<a href="https://blog.kyomind.tw/bear/#%E4%BA%8C%E3%80%81%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E7%9A%84%E9%81%B8%E9%A0%85%E5%A4%AA%E5%B0%91">三大基本要求</a>」。</p><blockquote><p>相關文章：<a href="https://blog.kyomind.tw/bear/">Evernote 最佳替代方案——筆記軟體 Bear 2 升級心得</a></p></blockquote><p>但扣除這些，我也不禁在想：「沒有 database 的 Notion，我會想用嗎？」——我深表懷疑。</p><p>簡言之，database 無庸置疑是 Notion 的一大利器。我認為，想要充分感受 Notion 的魅力，學習 database 是不可或缺的一環。</p><p>但是！<strong>怎麼用，才算是「剛剛好」</strong>？</p><p>我歸納了學習使用 Notion database 常見的三大困境。先了解它們，才好對症下藥。</p><hr><h2 id="困境一：學習門檻"><a href="#困境一：學習門檻" class="headerlink" title="困境一：學習門檻"></a>困境一：學習門檻</h2><p>如前所述，database 佔據了 Notion 一半以上的功能與<strong>複雜度</strong>。對於沒有太多時間深入研究的人而言，學習如何有效使用 database 可能是一個挑戰，甚至是一種焦慮。</p><p>而網路上的很多教學，進一步加劇了這個困境。</p><p>部分文章或 YouTube 影片，為了讓讀者、觀看者印象深刻，往往使用相對複雜或進階的技巧，藉以展現 Notion  database 的強大功能。</p><p>這些 database 技巧印證了 Notion 的強大，但也可能間接增加了<strong>學習時的心理負擔</strong>，讓部分新手感到困惑與沮喪，覺得自己無法有效應用 Notion。</p><p>這也是為什麼我會寫下〈<a href="https://blog.kyomind.tw/notion-markdown/">Notion 教學：10 個我最常用的 Markdown 語法與快捷鍵介紹</a>〉這樣的文章，讓 Notion 操作回歸基本。</p><p>毫無疑問，我認為 database 的使用，也應該回歸基本——但並不容易。</p><h2 id="困境二：不必要的複雜"><a href="#困境二：不必要的複雜" class="headerlink" title="困境二：不必要的複雜"></a>困境二：不必要的複雜</h2><p>說起「不必要的複雜」，軟體工程師可能頗有經驗，在開發上我們稱為「過度設計」。</p><p>複雜不一定是問題，少數情況就是要「複雜且有系統地處理」。但是，我們也常看到，很多時候的複雜，真的不是那麼必要。</p><p>這裡所謂的「複雜」，可以指使用 database 欄位各種進階技巧，比如把「公式」欄位玩出各種花樣，或巧妙建立 database 間的關聯（對應欄位是 Relation 和 Rollup）。或任何你看了會不禁發出「wow！」讚嘆的用法。</p><p>誠然，Notion databse 可以做很多事，但這也可能讓你不知不覺掉入了前一篇提到的「<a href="https://blog.kyomind.tw/stumbling-on-notion/#%E9%81%8E%E5%BA%A6%E8%A8%AD%E8%A8%88%EF%BC%9A%E4%BA%BA%E4%BA%BA%E9%83%BD%E6%98%AF%E7%AD%86%E8%A8%98%E6%9E%B6%E6%A7%8B%E5%B8%AB">筆記架構師陷阱</a>」：</p><blockquote><p>這是一個逐漸「<strong>上癮</strong>」的過程，因為 Notion 創建新頁面與層級是<strong>如此地簡單</strong>，導致遇到<strong>新需求</strong>時，我就想要用「<strong>增加 Notion 元素、擴張筆記架構</strong>」的方式來應對，結果它愈長愈大，直到脫離了我的控制。</p></blockquote><p>「擴張筆記架構」最<strong>典型</strong>的情況，就是增加 database 的<strong>數量和欄位</strong>！甚至是它們之間的<strong>關聯</strong>。</p><p>這也就是下面要講的——過度使用。</p><hr><h2 id="困境三：過度使用"><a href="#困境三：過度使用" class="headerlink" title="困境三：過度使用"></a>困境三：過度使用</h2><blockquote><p>一有新的筆記整理、分類需求，就立刻想到新增一個 database；或為既有的 database 新增一個甚至多個欄位。</p></blockquote><p>這幾乎是所有 Notion 新手<strong>不可避免的困境</strong>，當然包括我。</p><p>這樣做有什麼問題？相信過來人都懂，讓我講講自身的經驗。</p><h3 id="使用-Notion-做程式筆記"><a href="#使用-Notion-做程式筆記" class="headerlink" title="使用 Notion 做程式筆記"></a>使用 Notion 做程式筆記</h3><p>以前大量使用 Notion，主要就是為了學程式，所以有很多程式相關的筆記。這些筆記本來只有兩個 database：</p><ol><li>學習筆記：技術類書籍、線上課程、文章的整理。</li><li>實作筆記：開發過程中遇到的問題與我的踩坑記錄。</li></ol><p>這感覺不錯，但你可能已經猜到——兩個根本不夠用！至少對我而言不夠用。</p><p>光學習，可能要區分成「程式類」和「非程式類」。而不同素材如書、線上課、文章等等，我不希望它們<strong>歸納時</strong>沒有任何區別，因為這樣找起來或複習很麻煩。</p><p>於是，為了新的「子分類」，要麻再多開一個 database，不然就是多增加一些欄位作為區別。我甚至想把程式主題再進一步細分，比 Django、Docker、Python 等等。</p><p>如此反覆，我的學習筆記類 database 在數量上增加到了 6-8 個，其中有的欄位多、有的欄位少。</p><h2 id="資料庫太多了！"><a href="#資料庫太多了！" class="headerlink" title="資料庫太多了！"></a>資料庫太多了！</h2><blockquote><p>後來，看著一堆 database，覺得自己好累，尤其在新增一則筆記時，不得不先思考：「呃……它應該放到哪個 db？」——好像已經太多了。</p></blockquote><p>如果你有很多個 database 要維護，那你對它們得有一個<strong>相對清晰的概念與操作體系</strong>，才不容易作繭自縛。</p><p>但我必須說，至少在「學習」這一塊，要透過清晰的體系來架構 database，恐怕相對困難。</p><p>為什麼？因為隨著學習的進展，<strong>知識體系往往也會不斷調整</strong>。以往的分類可能不再適用或滿足你，需要做出一定改變。</p><p>然而，<strong>database 是很「重」的</strong>，增加欄位可以，但想要把一部分的資料遷移到新的 database 或分配到不同層級，則麻煩很多。不僅需要你<strong>手動搬運</strong>（使用<code>Move to</code>），還需要處理搬運後<strong>新舊欄位不相容的問題</strong>。</p><p>此外，每新增一筆記錄，就要為欄位選擇各項值，也是一件「看起來有條理，但實際對學習沒有直接助益」的苦力活。</p><p>這些當然可以用模板等功能來簡化，但，你不累嗎？</p><h3 id="無解的「分類」難題"><a href="#無解的「分類」難題" class="headerlink" title="無解的「分類」難題"></a>無解的「分類」難題</h3><p>我認為<strong>分類難題</strong>（為各種事物、概念等筆記找到分類上的明確歸屬）可以說是無解的——尤其當這些分類會<strong>隨著時間不斷變動</strong>的情況下。</p><p>而大量的 database，<strong>本質上就是一層又一層的分類</strong>，容易累死自己。</p><p>還是要再強調一下，這裡我類比的情境是「學習筆記」，一個在分類上<strong>容易不斷變動</strong>的主題。但我覺得，其實現實中大部分情況都是如此——分類就是會一直變動。</p><p>當然，也有例外，比如年、月、週等計畫的 database，概念之間是相對分明的。</p><p>無論如何，只要 database 一多，新增筆記時你難免就要先思考「我要新增到哪個 db？」，複習或搜尋時也要想著「這件事應該是記在哪個 db？」</p><p>腦力成本高昂。</p><hr><h2 id="我的-database-減法"><a href="#我的-database-減法" class="headerlink" title="我的 database 減法"></a>我的 database 減法</h2><p>簡單使用 Notion database 比簡單使用 Notion 要來得容易，我個人會貫徹下列原則。</p><p>不過這些原則<strong>多少都會限制 database 的發揮</strong>，所以是「原則」，作為<strong>需要時的指引</strong>。</p><h3 id="一、能透過「新增欄位」達成的，就不新增資料庫"><a href="#一、能透過「新增欄位」達成的，就不新增資料庫" class="headerlink" title="一、能透過「新增欄位」達成的，就不新增資料庫"></a>一、能透過「新增欄位」達成的，就不新增資料庫</h3><p>雖然欄位管理也是一個難題，但怎麼說都比新增一個獨立 database 來得<strong>輕量</strong>。</p><p>換句話說，當筆記架構變得複雜，需要更多手段來<strong>有效分類</strong>不同筆記時，建議優先選擇建立欄位而非新增 database。</p><h3 id="二、欄位不要過多"><a href="#二、欄位不要過多" class="headerlink" title="二、欄位不要過多"></a>二、欄位不要過多</h3><p>雖然說能用欄位處理的就不要透過 db，但欄位的增加也必須適合可止，盡可能讓每一個欄位<strong>都是必要的</strong>，而不是為了「<strong>看起來井然有序</strong>」或「<strong>看起來更完整</strong>」。</p><p>畢竟填寫欄位的人是自己。即使有模板，要應付各種複雜的欄位與情況，模板可能也要很多樣，這些都不利於筆記。</p><p>就我的經驗看來，<strong>閱讀類的 database，最容易出現欄位過多的問題</strong>。</p><p>因為一本書有<strong>很多種屬性</strong>，<strong>非常適合</strong>透過 database 歸納與整理！比如封面、作者、出版社、出版年度、書籍分類、個人評價、名言摘錄等等，簡直沒完沒了。</p><p>但閱讀一本書，最重要的往往只有一件事——獲得最大程度滿足與改變自身行動。</p><h3 id="三、減少進階功能的使用"><a href="#三、減少進階功能的使用" class="headerlink" title="三、減少進階功能的使用"></a>三、減少進階功能的使用</h3><p>db 關聯、公式欄位等等比較進階的功能，讓人感覺很厲害，有時候也確有妙用。但我覺得，<strong>少知道一點或許會比較好。</strong></p><p>重劍無鋒，大巧不工。雖然不是最高竿的使用，卻可能會更加高效。</p><h3 id="四、善用-view-與-linked-database"><a href="#四、善用-view-與-linked-database" class="headerlink" title="四、善用 view 與 linked database"></a>四、善用 view 與 linked database</h3><p>過濾、排序、view 等功能分頁，我覺得它們是「必要之惡」——這是讚美☺️</p><p><img src="https://i.imgur.com/DLNmoEx.png" alt="view 分頁"><span class="cap">view 分頁</span></p><p>雖然太多分頁也會造成困擾，但透過分頁選擇不同 view、過濾條件、排序方式等，<strong>確實能讓 db 資料更加有效呈現，充分發揮看資料的視角</strong>，我認為非常值得善用。</p><p>如果分頁太多了，推薦再開一個 <a href="https://www.notion.so/help/guides/using-linked-databases">linked database</a>，這下又多了一個呈現資料的「<strong>分身</strong>」。</p><p>總之，<strong>我認為善用 view 分頁與 linked database，就是用好 Notion database 的一大關鍵！</strong></p><p>在新增 db 或新增欄位之前，我們不妨先想想：「是不是新增一個 view 就能解決？」</p><h3 id="五、固定架構"><a href="#五、固定架構" class="headerlink" title="五、固定架構"></a>五、固定架構</h3><p>我覺得 Notion database 最適合的，是那些<strong>「筆記架構相對固定」的場景</strong>，比如前面提到的年、月、週計畫這類的記錄。</p><p>年、月、週、天就是典型的時間劃分，你很難再生出一種全新的時間劃分方式。所以，database 的欄位設計與架構相對穩定。</p><p>而我們要做的，就是不斷增加筆記的「量」。這種場景，特別能發揮 database 在體系與分類上的優勢。</p><h3 id="六、架構常變動的場景，我使用卡片筆記"><a href="#六、架構常變動的場景，我使用卡片筆記" class="headerlink" title="六、架構常變動的場景，我使用卡片筆記"></a>六、架構常變動的場景，我使用卡片筆記</h3><p>前面已提及，學習筆記的架構很容易依不同階段而變動，採用 database 常常會讓我覺得過於笨重、趕不上變化。</p><p>此外，database 還有一個「複習不便」的致命傷。</p><p>所以我後來才狠心放棄了寫了 2 年的 Notion，改用 Logseq 來做我的程式學習筆記，以適應快速變動的學習，並達到更有效的複習。</p><p>畢竟卡片筆記更像是「<a href="https://blog.kyomind.tw/logseq/#%E7%84%A1%E5%9B%BA%E5%AE%9A%E4%B8%AD%E5%BF%83%E7%9A%84%E6%B8%B8%E6%93%8A%E9%9A%8A">無固定中心的游擊隊</a>」，有著更強的機動性。</p><p>關於「為什麼我改用 Logseq 做程式筆記」，我們會再另篇討論。這裡只要提醒自己：「<strong>database 不適合太過頻繁的架構遷移。</strong>」</p><hr><h2 id="題外話：Notion-並不適合做卡片筆記"><a href="#題外話：Notion-並不適合做卡片筆記" class="headerlink" title="題外話：Notion 並不適合做卡片筆記"></a>題外話：Notion 並不適合做卡片筆記</h2><p>正文已結束，我們來聊個題外話。</p><p>這部分跟本文主軸雖然沒有直接關係（但和 database 有關），我還是忍不住想說——Notion 真的不適合做卡片筆記。</p><p>我們先回顧一下〈<a href="https://blog.kyomind.tw/logseq/">Logseq 心得：一顆冉冉升起的「卡片筆記」新星</a>〉提到卡片筆記的<a href="https://blog.kyomind.tw/logseq/#%E5%85%83%E7%B4%A0%E5%8C%96%E8%88%87%E9%80%A3%E7%B5%90%E5%B0%8E%E5%90%91">兩大原則</a>：</p><ol><li>元素化。</li><li>連結導向。</li></ol><p>關鍵是第二個：<strong>連結</strong>。</p><h3 id="Notion-的「連結」只做了一半"><a href="#Notion-的「連結」只做了一半" class="headerlink" title="Notion 的「連結」只做了一半"></a>Notion 的「連結」只做了一半</h3><p>我知道，Notion 資料庫有 Relation 欄位可以進行簡單的「<strong>資料庫關聯</strong>」，頁面開頭也有本頁的 <a href="https://www.playpcesor.com/2020/09/notion.html">backlinks</a> 可供參考。</p><p>但這些功能，相比於「<strong>原生支援雙向連結</strong>」的卡片筆記軟體如 Logseq、Obsidian，在「<strong>有效實踐卡片之間的連結</strong>」這件事上，效果相去甚遠。</p><p>用 Notion 絕對可以做卡片筆記，但<strong>很難做得好</strong>。</p><p>所以你可以看到，關於用 Notion 做卡片筆記的文章、影片，大多都是點到為止，沒有深入探討，也很難做更進一步的應用。</p><p>畢竟，我們只需要簡單試想一下，當 Relation 欄位有著 <strong>100 個關聯</strong>的時候，這個欄位看起來會是如何？</p><p>而 100 個關聯對於 Logseq 等卡片筆記 app 而言，僅僅只是開始而已。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TJQDGmr.jpg&quot; alt=&quot;by Daria Kolesnikova&quot;&gt;&lt;/p&gt;
&lt;p&gt;讓我們進入「Simple Notion」系列的第三篇，同時也是最後一篇。這次我們要聊聊，&lt;strong&gt;最能夠代表 Notion 的關鍵元素：資料庫（&lt;a href=&quot;https://www.notion.so/help/intro-to-databases&quot;&gt;database&lt;/a&gt;）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一提到 Notion 你會想到什麼？沒錯，就是資料庫。資料庫就是 &lt;strong&gt;Notion 的代名詞&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Notion 在 2016 年就誕生了（你也可以說是 2013年，請參考維基百科關於 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Notion&quot;&gt;Notion 的「歷史與發展」&lt;/a&gt;），但直到 2018 年才大紅，為什麼？——因為加入了 database。&lt;/p&gt;
&lt;p&gt;儘管在 UI 加入類似&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93&quot;&gt;關聯式資料庫&lt;/a&gt;，並非 Notion 獨創。畢竟，在此之前，&lt;a href=&quot;https://www.airtable.com/&quot;&gt;Airtable&lt;/a&gt; 已經是這方面的佼佼者。但我們不得不承認，&lt;strong&gt;Notion 確實把資料庫玩出了新的高度&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;系列：Simple-Notion——我的-Notion-簡潔之道&quot;&gt;&lt;a href=&quot;#系列：Simple-Notion——我的-Notion-簡潔之道&quot; class=&quot;headerlink&quot; title=&quot;系列：Simple Notion——我的 Notion 簡潔之道&quot;&gt;&lt;/a&gt;&lt;strong&gt;系列：Simple Notion——我的 Notion 簡潔之道&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/simple-notion/&quot;&gt;為何我「不推薦」用 Notion 管理你的人生&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/stumbling-on-notion/&quot;&gt;少則得，多則惑：使用 Notion 時的兩個常見陷阱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notion 資料庫「反複雜」使用指南 👈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;本文主旨與目標讀者&quot;&gt;&lt;a href=&quot;#本文主旨與目標讀者&quot; class=&quot;headerlink&quot; title=&quot;本文主旨與目標讀者&quot;&gt;&lt;/a&gt;本文主旨與目標讀者&lt;/h2&gt;&lt;p&gt;我希望不落俗套地，討論 Notion 資料庫的美麗與哀愁。&lt;/p&gt;
&lt;p&gt;既然是「Simple Notion」系列文章，主軸仍會聚焦在「簡潔」二字。而講到簡潔使用 Notion，資料庫絕對是&lt;strong&gt;一個無法繞過的主要議題&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/TJQDGmr.jpg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="Logseq" scheme="https://blog.kyomind.tw/tags/Logseq/"/>
    
    <category term="筆記軟體" scheme="https://blog.kyomind.tw/tags/%E7%AD%86%E8%A8%98%E8%BB%9F%E9%AB%94/"/>
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="Bear" scheme="https://blog.kyomind.tw/tags/Bear/"/>
    
    <category term="Evernote" scheme="https://blog.kyomind.tw/tags/Evernote/"/>
    
    <category term="卡片盒筆記法" scheme="https://blog.kyomind.tw/tags/%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95/"/>
    
    <category term="Obsidian" scheme="https://blog.kyomind.tw/tags/Obsidian/"/>
    
    <category term="Airtable" scheme="https://blog.kyomind.tw/tags/Airtable/"/>
    
  </entry>
  
</feed>
