<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/leaf.svg</icon>
  <subtitle>我的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2023-04-16T15:10:18.431Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>kyo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的「價值觀層級」器物清單</title>
    <link href="https://blog.kyomind.tw/weekly-review-16/"/>
    <id>https://blog.kyomind.tw/weekly-review-16/</id>
    <published>2023-04-16T14:46:53.000Z</published>
    <updated>2023-04-16T15:10:18.431Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sWgUbzT.png"></p><p>〈<a href="https://blog.kyomind.tw/weekly-review-14/">14，小米 13 的兩大關鍵亮點，與那些「價值觀層級」的器物們</a>〉點出了所謂「價值觀層級」的「器物」，這期就來補完這個部分。</p><p>當然，無論是定義還是清單都是非常個人化的產物，僅供參考。</p><hr><h2 id="何謂「價值觀層級」？"><a href="#何謂「價值觀層級」？" class="headerlink" title="何謂「價值觀層級」？"></a>何謂「價值觀層級」？</h2><p>我們或許可以把喜愛或討厭特定人事物的<strong>程度</strong>，大致區分為「<strong>偏好</strong>」與「<strong>價值觀</strong>」。</p><p>兩者在好惡上，肯定具有「<strong>量</strong>」的差異，但顯然不止如此而己。</p><p>如果要再加上一個<strong>根本的區別</strong>，那或許是「<strong>難以忍受</strong>」——那些你難以忍受它不存在、存在的人事物，可能就稱得上價值觀層級的事物。而其餘的，就只能說是偏好。</p><p>比如，我就完全不能忍受，<a href="https://zh.wikipedia.org/zh-tw/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2">命令列</a>（CLI，Command-Line Interface）的背景是白色的！淺色的可以，但白色就不行。</p><p>或更常見的「香菜之爭」，要說它對部分人而言，屬價值觀層級的事物，或許也不為過。</p><span id="more"></span><h2 id="何謂價值觀層級的「器物」？"><a href="#何謂價值觀層級的「器物」？" class="headerlink" title="何謂價值觀層級的「器物」？"></a>何謂價值觀層級的「器物」？</h2><p>說是「器物」，只是想表達它無關人或事，而是指<strong>具體可以拿來使用的東西</strong>。</p><p>只不過這些東西，被主人賦與了強烈的偏好——即價值觀——達到了「如果失去它們，就會讓人很困擾」的程度。</p><p>當然，絕大部分的器物都是沒了可以再買，所以這裡指的「失去」，大概要限縮在「如果這東西停產了、從世界上消失了」的情況，才能凸顯它們的重要性。</p><h2 id="器物的進一步定義"><a href="#器物的進一步定義" class="headerlink" title="器物的進一步定義"></a>器物的進一步定義</h2><p>為了清晰地表達，我們再為本文的「器物」一詞，賦與更明確的輪廓。</p><p>首先，它可能是<strong>具體的產品</strong>，但也可能是一種產品的「<strong>類別</strong>」（比如「Mac 電腦」就是一個類別），有時候產品類別的重要性就已經達到價值觀層級，而具體是指類別下的哪一項產品，則不是很緊要。</p><p>此外，我們這裡只論「產品」，而不論「功能（feature）」。</p><p>「功能」指的是產品或物品所具備的特定功能或屬性，例如一支筆的書寫功能、一個手機的通訊功能等等。這些功能或屬性通常不會被賦予過高的價值或重要性，即使有，也是附屬在產品之上，所以僅論產品已足。</p><p>最後，「軟體服務」不算XD，因為算的話就太多了——望向 Notion 與 Logseq。並且這裡更想表達，那些<strong>在現實世界佔據實體</strong>的東西。</p><hr><h2 id="我的價觀值層級器物清單"><a href="#我的價觀值層級器物清單" class="headerlink" title="我的價觀值層級器物清單"></a>我的價觀值層級器物清單</h2><p>完整的鋪陳後，終於可以來一一介紹我目前心中的價觀值器物們，為了寫這篇，我也不得不認真思考了一下，哪些才稱得上？其實考慮的主要就兩個重點，必須兼而有之：</p><ol><li>細節做得比別人好。</li><li>有其不可替代的 feature。</li></ol><p>作為一個 3c 宅，你可能以為我要講的全都是 3c 產品，非也非也，畢竟我也是要生活的。且限於幅篇，就只講 5 項即可——它們已經有足夠的代表性。</p><p>廢話不多說，開始！</p><h2 id="一、類別：Mac-電腦"><a href="#一、類別：Mac-電腦" class="headerlink" title="一、類別：Mac 電腦"></a>一、類別：Mac 電腦</h2><p>Mac 電腦，包括 Macbook、Mac mini、iMac 等等，選擇哪一種 Mac 對我來只能算是「偏好」——在家我偏好 Mac mini，而出外偏好 Macbook Air。</p><p>那它的「不可取代性（價值觀）」在哪？我覺得有兩個方面：</p><ol><li>做工：很多人說 Mac 就像藝術品，對此我完全認同XD。昂貴的 Windows 筆電通常是透過「堆料」的結果，也就是硬體很強，但產品本身的溢價卻相對有限。</li><li>macOS：這裡特指「命令列」部分！它和 Linux 系出同源，減少了好些程式開發上的麻煩——畢竟我也用 Windows 寫過兩年程式，所以能體會其中的差距。</li></ol><p>毫無疑問，若 Mac 從世界上消失，身為一個開發者，我會很困擾。</p><h2 id="二、產品：Apple-Studio-Display"><a href="#二、產品：Apple-Studio-Display" class="headerlink" title="二、產品：Apple Studio Display"></a>二、產品：Apple Studio Display</h2><p>我使用它的時間還不到 2 個月，是否納入價值觀層級，確實有些猶豫，但我還是選了它。</p><p>很多時候，一個東西是否達到價值觀層級，要和它的競爭對手相比。</p><p>從這個角度看，在我心中，我認為它在台幣 5 萬元的範圍內，沒有對手。我的意思是，別的產品雖然更便宜，但體驗也因此打了折扣，而我認為它是 5 萬內，價格和體驗上的最佳平衡。</p><p>當然正常人是很難用這樣的價格卻只買一台螢幕，所以我還是補充一下，對我而言它不可或缺的特色：</p><ol><li>抗反光鍍膜：如果只有一個理由，就是它了。鏡面螢幕的最佳解，誰用誰知道XD。</li><li>27 吋 5K 解析度：5K 和 4K 的像素數量還是有相當差距（比 4K 顯示器多出 67%），對於很常在螢幕上看文字（寫作）和程式碼的我而言，字體因解析度不足而產生的毛邊，是最最不可接受的一環。而 5K 的表現顯然比 4K 要好上一截。</li></ol><p>可以看出，目前提到的兩項，它們之所以可以達到「價值觀層級」，根本的原因都是因為：<a href="https://blog.kyomind.tw/weekly-review-02/#%E4%BA%8C%E3%80%81%E9%97%9C%E6%96%BC%E5%AF%AB%E7%A8%8B%E5%BC%8F%E5%88%B0-70-%E6%AD%B2%E7%9A%84%E6%83%B3%E5%83%8F">我是一個軟體工程師</a>。</p><h2 id="三、類別：升降桌"><a href="#三、類別：升降桌" class="headerlink" title="三、類別：升降桌"></a>三、類別：升降桌</h2><p>對於用過升降桌的人而言，大概不會懷疑為什麼它具有價值觀的層級。</p><p>但對於沒用過的人來說，還是有必要補充一下。</p><p>你最常聽到的可能是可以坐、站交錯類的彈性等等，這顯然不是最關鍵的，最關鍵的是它可以讓你選定一個最自己適合的高度（通常指的是坐著的高度）。</p><p>而要在茫茫桌海中找到一個剛好符合自己高度的桌子，難度就高非常多了。這也是為什麼我的 Studio Display 是 VESA 版——用來配合螢幕支架，自訂高度。</p><p>至於要選擇哪個品牌，在我看來只是偏好而非價值觀。</p><h2 id="四、產品：大甲乾麵麻醬口味"><a href="#四、產品：大甲乾麵麻醬口味" class="headerlink" title="四、產品：大甲乾麵麻醬口味"></a>四、產品：大甲乾麵麻醬口味</h2><p>這東西我在<a href="https://www.facebook.com/kyomind/posts/pfbid0ofMwWhhUft6fat8ut3krkwEDawovMzkPhv7ynMLE6md3E39vsdHc2rTa4R25p3kil">之前的臉書貼文</a>就已經大書特書過，再次總結一下它的重要性。</p><p>作為一個在家工作的軟體工程師，中午常常不想出門——因為要換衣服捏！而且有時候會中斷思緒。而大甲乾麵就是能讓我<strong>中午盡量不出門</strong>的利器。那它的特色與不可取代性又在哪？</p><ol><li>特色：麻醬口味還挺耐吃的（其餘口味建議不要嘗試）。</li><li>不可取代性：文中有提及，就是鈉含量相對很低，這點已屬難能可貴。真要說的話，便宜也是一大特色。全聯有賣！</li></ol><p>但不知為何，從今年 2 月開始，線上購物通路的價格竟直接翻倍，毫無競爭力。所幸全聯還是以前的價格（非特價期間一袋 4 包 119 元，特價通常是 99 元）。</p><p>而且之前還有買一送一！你知道我因此囤了幾袋嗎？12 袋🤣</p><h2 id="五、產品：詹粉"><a href="#五、產品：詹粉" class="headerlink" title="五、產品：詹粉"></a>五、產品：詹粉</h2><p>搭配前述大甲乾麵的利器！</p><p>同一樣食物，你常吃就容易膩，這是人之常情，更別說大甲乾麵麻醬口味的調味，相對也屬平淡。</p><p>我有試著買一些別的調味料，但加分的效果都很有限——直到我遇見了詹粉！愈講愈像業配了。</p><p>從結論上來說，有了詹粉以後，大甲乾麵簡直如虎添翼。上個月有 31 天，而從 Logseq 的記錄上看，我足足吃了 17 次大甲乾麵XD</p><p>這其中有一半的「功勞」要歸於詹粉，它讓它變得更好吃惹。</p><hr><h2 id="結語：器物的價值反映的是人的追求"><a href="#結語：器物的價值反映的是人的追求" class="headerlink" title="結語：器物的價值反映的是人的追求"></a>結語：器物的價值反映的是人的追求</h2><p>仔細一看，上述這 5 項，不都是為了讓我可更常待在家裡嗎XD——好白癡。</p><p>顯然是因為，現在的我，一心想要成為出色的軟體工程師，所以有了這樣的取捨：傾向選擇那些可以讓我達成這個目標的物品，為它們賦與精神上的重要性。</p><p>所以，哪怕是食物，也有了不同的意義。</p><p>而你的追求，又是什麼呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sWgUbzT.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;〈&lt;a href=&quot;https://blog.kyomind.tw/weekly-review-14/&quot;&gt;14，小米 13 的兩大關鍵亮點，與那些「價值觀層級」的器物們&lt;/a&gt;〉點出了所謂「價值觀層級」的「器物」，這期就來補完這個部分。&lt;/p&gt;
&lt;p&gt;當然，無論是定義還是清單都是非常個人化的產物，僅供參考。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;何謂「價值觀層級」？&quot;&gt;&lt;a href=&quot;#何謂「價值觀層級」？&quot; class=&quot;headerlink&quot; title=&quot;何謂「價值觀層級」？&quot;&gt;&lt;/a&gt;何謂「價值觀層級」？&lt;/h2&gt;&lt;p&gt;我們或許可以把喜愛或討厭特定人事物的&lt;strong&gt;程度&lt;/strong&gt;，大致區分為「&lt;strong&gt;偏好&lt;/strong&gt;」與「&lt;strong&gt;價值觀&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;兩者在好惡上，肯定具有「&lt;strong&gt;量&lt;/strong&gt;」的差異，但顯然不止如此而己。&lt;/p&gt;
&lt;p&gt;如果要再加上一個&lt;strong&gt;根本的區別&lt;/strong&gt;，那或許是「&lt;strong&gt;難以忍受&lt;/strong&gt;」——那些你難以忍受它不存在、存在的人事物，可能就稱得上價值觀層級的事物。而其餘的，就只能說是偏好。&lt;/p&gt;
&lt;p&gt;比如，我就完全不能忍受，&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2&quot;&gt;命令列&lt;/a&gt;（CLI，Command-Line Interface）的背景是白色的！淺色的可以，但白色就不行。&lt;/p&gt;
&lt;p&gt;或更常見的「香菜之爭」，要說它對部分人而言，屬價值觀層級的事物，或許也不為過。&lt;/p&gt;</summary>
    
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="Studio Display" scheme="https://blog.kyomind.tw/tags/Studio-Display/"/>
    
    <category term="Mac" scheme="https://blog.kyomind.tw/tags/Mac/"/>
    
    <category term="產品評論" scheme="https://blog.kyomind.tw/tags/%E7%94%A2%E5%93%81%E8%A9%95%E8%AB%96/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>是時候同步你的 dotfiles 了——我選擇 yadm 的理由與思路整理</title>
    <link href="https://blog.kyomind.tw/yadm/"/>
    <id>https://blog.kyomind.tw/yadm/</id>
    <published>2023-04-09T06:18:57.000Z</published>
    <updated>2023-04-13T07:12:37.978Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/AGhzS0d.jpg" alt="from Pixabay"><span class="cap">from Pixabay</span></p><p>本文主要寫給軟體工程師，尤其是後端。</p><p>不過，<strong>這並不是一篇 yadm 操作教學</strong>，而是我在選擇 dotfiles 同步方案時，所做的功課與思路整理，其中的考量大概有下：</p><ol><li>靠自己簡單實作就好，還是要透過工具？</li><li>如果要用工具，<strong>工具這麼多，該如何選擇</strong>？</li><li>工具之間有什麼本質的差別嗎？（其實就是下述流派上的差別）</li></ol><hr><h2 id="場景與需求"><a href="#場景與需求" class="headerlink" title="場景與需求"></a>場景與需求</h2><p>如〈<a href="https://blog.kyomind.tw/linux-dev-setup/">Linux 開發環境設定大全：zsh、zinit、pyenv、poetry、docker</a>〉所言，因為新 VM 的建立，我又得重設一次開發環境，而重設開發環境往往是一個耗時且繁瑣的過程。</p><p>在這個過程中，需要重新建立一些設定檔，例如<code>.bashrc</code>、<code>.zshrc</code>。這些設定檔通常包含了工具設定、命令別名、環境變數等大量內容，因此特別惱人。</p><p>此外，即使不是重建環境，平時要在不同 VM 包括本機電腦間「<strong>手動同步</strong>」這些檔案，也是一件讓人很想逃避的事。</p><p>以<code>.zshrc</code>為例，如果它很少變動，那可能還好。但很不幸的，我又是一個很愛為命令列工具建立 <a href="https://dywang.csie.cyut.edu.tw/dywang/linuxSystem/node88.html">alias</a>（別名）的人，光憑這點，就使我不時會修改<code>.zshrc</code>。</p><span id="more"></span><h2 id="不同-VM-間的-dotfiles-手動同步讓人想逃避"><a href="#不同-VM-間的-dotfiles-手動同步讓人想逃避" class="headerlink" title="不同 VM 間的 dotfiles 手動同步讓人想逃避"></a>不同 VM 間的 dotfiles 手動同步讓人想逃避</h2><p>而當你有 1 台、2 台……甚至更多 VM 時，<code>.zshrc</code>修改後的「<strong>內容同步</strong>」問題，足以讓你非常痛苦。</p><p>以我自己為例，我工作上「只有」2 台 VM，哪怕是兩台，<strong>在很長一段時間裡</strong>，這兩台 VM 的 alias 設定都<strong>沒有完全一致</strong>——因為我在其中一台新增了 alias 後，就懶得手動為另一台更新相同內容。</p><p>這聽起來有點愚蠢，卻是人之常情……但這次我不忍了！為了解決這個問題，我打算使用「更先進的手段」，來同步和管理這些設定檔。</p><p>如此一來，無論「重設開發環境」或「在多個 VM 之間同步設定」，我的 dotfiles 都可以輕鬆保持一致，提高工作效率。</p><h2 id="什麼是-dotfiles？"><a href="#什麼是-dotfiles？" class="headerlink" title="什麼是 dotfiles？"></a>什麼是 dotfiles？</h2><p>前面已經提了幾次 dotfiles，卻還沒有解釋它。不過相信對於很多人來說，應該一點也不陌生：舉凡在<code>$HOME</code>目錄底下的各種<strong>工具設定檔</strong>，常常都是以一個點「<code>.</code>」開頭，所以它們被稱為 dotfiles。</p><p>當然，它們未必<strong>全都</strong>放在<code>$HOME</code>目錄底下，甚至也未必皆以「<code>.</code>」開頭，只是在多數時候如此而已。</p><p>一些常見的 dotfiles 包括：</p><ol><li><code>.bashrc</code>和<code>.bash_profile</code>：最常見的 dotfiles。</li><li><code>.vimrc</code>：Vim 編輯器的設定檔，包含了一些編輯器偏好、快捷鍵綁定等。</li><li><code>.gitconfig</code>：Git 版控系統的設定檔，最基本的功能是儲存使用者的 name 和 email。而我個人也習慣把 Git「子命令」相關的 alias 放在這裡，而非放在<code>.zshrc</code>，像下面這樣：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = kyo</span><br><span class="line">    email = odinxp@gmail.com</span><br><span class="line"></span><br><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    st = status</span><br><span class="line">    br = branch</span><br><span class="line">    co = checkout</span><br><span class="line">    brs = branch -a</span><br></pre></td></tr></table></figure><hr><h2 id="管理-dotfiles-的兩大流派：Symbolic-Link-vs-Bare-Git"><a href="#管理-dotfiles-的兩大流派：Symbolic-Link-vs-Bare-Git" class="headerlink" title="管理 dotfiles 的兩大流派：Symbolic Link vs Bare Git"></a>管理 dotfiles 的兩大流派：Symbolic Link vs Bare Git</h2><p>做過一番功課以後，我認為同步 dotfiles 所使用的手段，大致可分為兩個流派：</p><ol><li>Symbolic Link。</li><li>Bare Git。</li></ol><p>而且各有各的工具方便你使用。</p><p>如果想要自己摸索，嘗試，這篇 Reddit 討論串我覺得頗值參考：</p><ul><li><a href="https://www.reddit.com/r/linux4noobs/comments/sk5fm5/how_do_you_manage_your_dotfiles/">how do you manage your dotfiles?</a></li></ul><p>我對 dotfiles 管理工具的理解，也大致是從這篇討論延伸而來。</p><h2 id="方案一：Symbolic-Link"><a href="#方案一：Symbolic-Link" class="headerlink" title="方案一：Symbolic Link"></a>方案一：Symbolic Link</h2><p>事實上，想要輕鬆同步你的 dotfiles，未必要使用別人寫的工具。最常見的做法，就是透過<strong>軟連結</strong>（Symbolic Link）。</p><p>在此不細論具體的做法為何，可以隨意 Google 一下「<a href="https://www.google.com/search?q=symbolic%20link%20dotfiles">symbolic link dotfiles</a>」就有滿坑滿谷的資訊。</p><p>意即，自己弄一個 dotfiles repo 並手動建立軟連結，就是一個簡單暴力的方式。</p><p>但這樣做的主要缺點是：「軟連結」部分需要你<strong>手動建立</strong>，也還是不太輕鬆，所以並不推薦使用——但適合<strong>不想靠工具</strong>，又希望比「複製貼上」更有效的<strong>極簡主義者</strong>。</p><p>再「聰明」一點，則是配合 <a href="https://www.gnu.org/software/stow/manual/stow.html">stow</a>，可參考這篇〈<a href="https://farseerfc.me/using-gnu-stow-to-manage-your-dotfiles.html">【譯】使用 GNU stow 管理你的點文件</a>〉，我想這樣已經足夠優雅了。</p><h2 id="方案二：Bare-Git"><a href="#方案二：Bare-Git" class="headerlink" title="方案二：Bare Git"></a>方案二：Bare Git</h2><p>既然如此，那為什麼還需要寫這篇文章呢？當然是為了那些——包括我——不想在本機建立一個獨立的 dotfiles repo 的人！</p><p>申言之，軟連結方案通常會改變 dotfiles 的實際存放路徑——因為它們必須集中到 dotfiles repo 底下。而 stow 等工具的通常用途把你手動建立連結部分變成自動。</p><p>至於不想要變動 dotfiles 路徑的人（這無疑也是一種偏執呀，哈哈哈！），則需要第二種的「Bare Git」方案。</p><p>雖說是第二種方案，但其實<strong>兩者都需要在遠端維護一個 dotfiles repo</strong>，只不過 Git 方案在「本地」並沒有建立一個獨立的 dotfiles repo——所以也不必變動原來 dotfiles 的存放路徑。</p><h2 id="何謂-Bare-Git-方案？"><a href="#何謂-Bare-Git-方案？" class="headerlink" title="何謂 Bare Git 方案？"></a>何謂 Bare Git 方案？</h2><p>具體而言，就是指這篇〈<a href="https://www.atlassian.com/git/tutorials/dotfiles">Dotfiles: Best Way to Store in a Bare Git Repository</a>〉中的做法。因為文章就稱它為「Bare Git」，所以我也這麼稱呼。</p><p>講白了，就是利用 Git 本身的進階功能（但不是一般我們常用的那種）來達到同步 dotfiles 的目的。</p><p>這種做法的<strong>特色和優點</strong>在於，<strong>無須在本機建立額外的 dotfiles repo</strong>，而是直接將你的「<strong>家目錄</strong>」作為 dotfiles repo。此外，<strong>你需要主動選擇並加入想要同步的檔案</strong>，而不像我們平常使用 Git 時，工作目錄中未被 gitignore 的檔案都會自動被同步。</p><p>這篇文章不長，但我實際試著一步步照做後，發現其中的「坑」還真是不少——畢竟這不是我們平常使用 Git 的方式。</p><p>經歷一小時的嘗試與挫敗後，我放棄了！決定直接使用工具即可。</p><hr><h2 id="同步-dotfiles-的自動化工具選項"><a href="#同步-dotfiles-的自動化工具選項" class="headerlink" title="同步 dotfiles 的自動化工具選項"></a>同步 dotfiles 的自動化工具選項</h2><p>管理、同步 dotfiles 究竟有哪些工具可以選擇呢？說真的，非常多！</p><p>可以參考<a href="https://dotfiles.github.io/utilities/">這個清單</a>，它依照 GitHub 星星數量排序列出，並附上了言簡意賅的介紹。</p><p>如果想要知道工具間的更多細節與比較，則可以參考<a href="https://www.chezmoi.io/comparison-table/">這個對照表</a>。</p><p>作為一個 Python 工程師，我偏好選擇由 Python 開發而成的工具。上述頁面中提到的 <a href="https://github.com/anishathalye/dotbot">Dotbot</a> 和 <a href="https://github.com/TheLocehiliosan/yadm">yadm</a> 都是不錯的選項——它們主要都是使用 Python 語言開發的。</p><h2 id="我選擇-yadm"><a href="#我選擇-yadm" class="headerlink" title="我選擇 yadm"></a>我選擇 yadm</h2><p>老實說，Dotbot 和 yadm 我一開始也不知道要選哪個，所以乾脆直接先挑其中一個來試試，看看稱不稱手、合不合用。</p><p>如果是，就可以結束這回合；如果否，就換另一個。</p><p>我先試了 yadm，因為已經自己實作過〈<a href="https://www.atlassian.com/git/tutorials/dotfiles">Dotfiles: Best Way to Store in a Bare Git Repository</a>〉的內容，我不禁訝異：<strong>這不就是自動化的 Bare Git 方案嗎！</strong></p><p>流程可以說非常類似，重要的是：它把那些<strong>複雜且容易出錯</strong>的地方「封裝並隱藏起來了」——顯然這就是我要的！</p><p>附帶一提，從 <a href="https://github.com/anishathalye/dotbot#getting-started">Dotbot 的 GitHub 介紹</a>看來，它更偏向於使用 Symbolic Link：</p><blockquote><p>Dotbot only supports Python 3.8+, and <strong>it requires that your account is allowed to create symbolic links.</strong></p></blockquote><h2 id="開始使用-yadm"><a href="#開始使用-yadm" class="headerlink" title="開始使用 yadm"></a>開始使用 yadm</h2><p>教學什麼的就不獻醜了，而且步驟也非常簡單，尤其在我親身「折騰」過〈<a href="https://www.atlassian.com/git/tutorials/dotfiles">Dotfiles: Best Way to Store in a Bare Git Repository</a>〉以後，更是覺得：靠工具通常還是會讓你輕鬆不少，所以也不再堅持要「自己來」了。</p><p>建議直接<a href="https://yadm.io/docs/install">安裝</a>，並參考官網的「<a href="https://yadm.io/docs/getting_started">Getting Started</a>」操作。</p><p>其實你只要自己實踐過〈<a href="https://www.atlassian.com/git/tutorials/dotfiles">Dotfiles: Best Way to Store in a Bare Git Repository</a>〉就會知道，兩者大同小異，只是 yadm 隱藏了更多容易出錯的細節，讓人更容易上手。</p><p>安裝好 yadm 後，它就變成了一種「特殊的 Git」指令——但只會影響你的 dotfiles repo。</p><h2 id="yadm-常用指令"><a href="#yadm-常用指令" class="headerlink" title="yadm 常用指令"></a>yadm 常用指令</h2><p>常用的指令可參考<a href="https://yadm.io/docs/common_commands#">這個頁面</a>。</p><p>就跟 Git 非常類似——畢竟它本質上就是 Git。只是增加了一些<strong>額外的指令</strong>方便你查看目前 dotfiles repo 狀態，比如<code>yadm list</code>。</p><p>這些區別，頁面中也都有說明：</p><blockquote><p>Most of these operations will look like Git commands; <strong>because they are. yadm wraps Git</strong>, allowing it to perform all of Git’s operations. <strong>The difference is your $HOME directory becomes the working directory</strong>, and you can run the commands from any directory.</p></blockquote><blockquote><p>Commands below which are special to yadm are denoted with <code>*</code>, and those which are passed directly through to Git are denoted with <code>git</code>.</p></blockquote><p>所以使用上，與操作 Git 大同小異，如下圖：</p><p><img src="https://i.imgur.com/WDwriPv.png"></p><p>解說：</p><ul><li>我把<code>yadm</code>設 alias 為「<code>y</code>」了。</li><li><code>pull</code>、<code>push</code>這些常見 Git 操作，在使用 yadm 時也一樣，所以如果發生「檔案狀態衝突」，也是要依照與 Git 相同方式去處理。</li><li>為了滿足同步需求，在遠端（比如 GitHub）還是要建立一個「收集這些 dotfiles 清單與狀態」的倉庫，通常我們也會命名為「dotfiles」。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/AGhzS0d.jpg&quot; alt=&quot;from Pixabay&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文主要寫給軟體工程師，尤其是後端。&lt;/p&gt;
&lt;p&gt;不過，&lt;strong&gt;這並不是一篇 yadm 操作教學&lt;/strong&gt;，而是我在選擇 dotfiles 同步方案時，所做的功課與思路整理，其中的考量大概有下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;靠自己簡單實作就好，還是要透過工具？&lt;/li&gt;
&lt;li&gt;如果要用工具，&lt;strong&gt;工具這麼多，該如何選擇&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;工具之間有什麼本質的差別嗎？（其實就是下述流派上的差別）&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;場景與需求&quot;&gt;&lt;a href=&quot;#場景與需求&quot; class=&quot;headerlink&quot; title=&quot;場景與需求&quot;&gt;&lt;/a&gt;場景與需求&lt;/h2&gt;&lt;p&gt;如〈&lt;a href=&quot;https://blog.kyomind.tw/linux-dev-setup/&quot;&gt;Linux 開發環境設定大全：zsh、zinit、pyenv、poetry、docker&lt;/a&gt;〉所言，因為新 VM 的建立，我又得重設一次開發環境，而重設開發環境往往是一個耗時且繁瑣的過程。&lt;/p&gt;
&lt;p&gt;在這個過程中，需要重新建立一些設定檔，例如&lt;code&gt;.bashrc&lt;/code&gt;、&lt;code&gt;.zshrc&lt;/code&gt;。這些設定檔通常包含了工具設定、命令別名、環境變數等大量內容，因此特別惱人。&lt;/p&gt;
&lt;p&gt;此外，即使不是重建環境，平時要在不同 VM 包括本機電腦間「&lt;strong&gt;手動同步&lt;/strong&gt;」這些檔案，也是一件讓人很想逃避的事。&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;.zshrc&lt;/code&gt;為例，如果它很少變動，那可能還好。但很不幸的，我又是一個很愛為命令列工具建立 &lt;a href=&quot;https://dywang.csie.cyut.edu.tw/dywang/linuxSystem/node88.html&quot;&gt;alias&lt;/a&gt;（別名）的人，光憑這點，就使我不時會修改&lt;code&gt;.zshrc&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="開發筆記" scheme="https://blog.kyomind.tw/categories/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Linux" scheme="https://blog.kyomind.tw/tags/Linux/"/>
    
    <category term="zsh" scheme="https://blog.kyomind.tw/tags/zsh/"/>
    
    <category term="yadm" scheme="https://blog.kyomind.tw/tags/yadm/"/>
    
  </entry>
  
  <entry>
    <title>15，付費一個月後，我還是退訂了 Notion AI</title>
    <link href="https://blog.kyomind.tw/weekly-review-15/"/>
    <id>https://blog.kyomind.tw/weekly-review-15/</id>
    <published>2023-04-08T15:17:04.000Z</published>
    <updated>2023-04-09T03:42:30.885Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sWgUbzT.png"></p><p>前陣子 <a href="https://www.notion.so/product/ai">Notion AI</a> 剛公布時，我並沒有在第一時間就申請試用。仔細想想，可能作為一個文字創作者，我還是<strong>「本能地」不太願意讓 AI 來干涉這塊「最後的淨土」</strong>。</p><p>這與「<a href="https://blog.kyomind.tw/github-copilot/#%E5%B0%8F%E7%B5%90%EF%BC%9A%E6%88%91%E5%B0%8D%E3%80%8C%E6%A9%9F%E5%99%A8%E8%BC%94%E5%8A%A9%E3%80%8D%E7%9A%84%E6%9C%9F%E5%BE%85">我對 AI 輔助寫 code 的態度</a>」，有著很大的差別。</p><p>但在看到一些人開始分享 Notion AI 使用心得，無論基於興奮還是焦慮，我還是不得不加入了排隊清單。結果排到我以後才沒過多久，Notion 就宣告測試結束，要開始全面收費了！</p><p>然而，到底要不要付這每月 10 美元？我掙扎了許久，從我臉書上的多次發文，就能看出其中的反覆與猶豫。</p><p>接下來就帶各位回顧，我對 Notion AI 的態度，是如何以「起、承、轉、合」四個階段持續演進——可謂<strong>從期待到放棄</strong>。</p><span id="more"></span><hr><h2 id="起：震憾與期待"><a href="#起：震憾與期待" class="headerlink" title="起：震憾與期待"></a>起：震憾與期待</h2><p><a href="https://www.facebook.com/kyomind/posts/pfbid02LUFdBAdpRLifWdjGaSd1FCopkaqAoWdtAzYUK5S81bzBNFet1qHYQztSBNqwbYxrl">第一篇發文。</a></p><p>首先，我得承認，作為一個大型寫作工具箱，Notion AI 確實有不少吸引人的地方。它整合了大量寫作專用的功能，包括總結、列大綱等等常見需求。讓你不必再「事事問 ChatGPT」。這些功能，不但可以省下時間，更可能讓我專注於創作本身。</p><p>所以一開始我是這麼說的：</p><blockquote><p>現在我不得不相信，在不久的將來，部分內容產出很可能會是以 AI 為主，人類則退居輔助，負擔起編輯、引導的角色</p><p>仔細想想，真不知道該高興還是害怕，因為這確實有點恐怖——我感覺，想要突顯甚至保留個人的寫作風格，更加不容易了</p><p>我將失去自己</p></blockquote><p>可見在第一時間，我內心的震動！</p><h2 id="承：難以重複的奇蹟"><a href="#承：難以重複的奇蹟" class="headerlink" title="承：難以重複的奇蹟"></a>承：難以重複的奇蹟</h2><p><a href="https://www.facebook.com/kyomind/posts/pfbid02WDdhxNu4b5DZygwun9Uo1W5sQQLrHoWLhPPkdmA5FGHPdWSAqhYsv1h6W6dxvMsnl">第二篇發文。</a></p><p>與<a href="https://blog.kyomind.tw/github-copilot/#%E6%84%8F%E6%96%99%E4%B9%8B%E5%A4%96%EF%BC%9A%E5%AF%AB%E4%BD%9C%E8%BC%94%E5%8A%A9">使用 GitHub Copilot 輔助寫作</a>的經驗非常類似——「<strong>超常發揮</strong>」需要機緣巧合才有機會出現。</p><p>但很憾遺，這個「機緣巧合」，在實際上很難出現。</p><p>於是我又不禁有了這樣的感嘆：</p><blockquote><p>但是！後來我就再也試不出類似的效果了<br>顯然那次只是「純屬偶然」，也就是剛好某個天時地利人和，因而 Notion AI 產出了幾乎完美符合我當下需求的文章段落</p></blockquote><p>而且，更讓人失落的是，即使不期待奇蹟，它在寫作輔助部分的「<strong>日常發揮</strong>」，也往往<strong>差強人意</strong>：</p><blockquote><p>後來，我嘗試著給它段落大標題，甚至已經前面寫了好一段，才下標讓它試著繼續寫，而它對於該標題的內容產出品質，依舊是「乏善可陳」<br>講白了就是沒有「個性」，也沒有亮點<br>以至於我可能用它生了 500-1000 字作為素材，結果最後只用了 50 個字，而且是用在比較無關緊要的地方</p></blockquote><p>可以說，在「測試」階段，它的效果並不符合我的期待。</p><h2 id="轉：正式付費"><a href="#轉：正式付費" class="headerlink" title="轉：正式付費"></a>轉：正式付費</h2><p><a href="https://www.facebook.com/kyomind/posts/pfbid0fTrdNt78uwSFB89jaG7RbweCzgszEnm4sEK2jmy1eZSvYZANhUwu9MrLMHBgD2vl">第三篇發文。</a></p><p>你以為我就此放棄了嗎？沒有！我還想繼續努力（掙扎），誓言「Make Notion AI Great Again！」</p><p>好啦，如文中所言，其實是因為 miula 也訂了它！讓我不禁懷疑自己：「難道是我沒有善用 Notion AI，所以才覺得不需要它？」</p><p>此時 Notion AI 已經正式收費，基於繼續嘗試與探索的必要性，在發表這篇臉書貼文後的不久，我正式付費了 Notion AI——不然我也無法再試了。</p><h2 id="合：暫別-Notion-AI"><a href="#合：暫別-Notion-AI" class="headerlink" title="合：暫別 Notion AI"></a>合：暫別 Notion AI</h2><p><a href="https://www.facebook.com/kyomind/posts/pfbid027FpL65YaxpQgcDc98vVvV9AZVowkv5mozx9uBSDb9KAXZ5ZowQUeTfZfnWyNefNcl">第四篇發文。</a></p><p>這篇和上一篇，剛好相距一個月。</p><p>雖然其間我在 blog 只發表了 3 篇文章（其實還有半篇已完成的心得文草稿），但我還是盡可能透過不同方式，讓 Notion AI 來加速或簡化我的寫作。</p><p>但事與願違——而且它不時會答非所問🤣。</p><p>它的表現仍然未脫我在測試階段的感受，尤其在 <a href="https://openai.com/product/gpt-4">GPT-4</a> 推出且我也實際付費使用後，更深深讓我感受到兩者的差距之大。</p><p>同時我也明白了 Notion AI 表現不佳的根本原因——<a href="https://dataconomy.com/2022/11/what-is-notion-ai-waitlist-features-how-use/#What_is_Notion_AI">它是基於 GPT-3</a>。</p><hr><h2 id="指數級的差距"><a href="#指數級的差距" class="headerlink" title="指數級的差距"></a>指數級的差距</h2><p>GPT-3、3.5（ChatGPT 免費版）、4，這三者的差距，究竟有多大？</p><p>在實際使用後，如果僅就「<strong>個人主觀角度</strong>」來評分，我會依序給出：<strong>50 分、100 分、500 分</strong>。</p><p>而且我覺得，<strong>寫作輔助</strong>（這裡可不是指整理會議紀錄或發一封簡短的工作 email 這樣的寫作）這類「精緻使用方式」，可能還是需要 3.5 以上會比較適合。</p><p>GPT-3（Notion AI）寫出來的內容，哪怕只是拿來參考，都稍嫌太模板化了。不僅不夠深刻，而且看多了還會讓我煩躁！</p><h2 id="結語：指日仍可待"><a href="#結語：指日仍可待" class="headerlink" title="結語：指日仍可待"></a>結語：指日仍可待</h2><p>說了這麼多，最後還是要為 Notion AI 平反一下：如果只是簡單的使用，比如列大綱、做總結，雖然我覺得產出品質普通——曾經滄海難為水啊！——但也尚稱堪用。</p><p>但是，Notion 對現在的我而言，<strong>就僅僅是拿來寫作</strong>！如果對寫作幫不上忙，那便稱 AI 也枉然。</p><p>對此，我表示遺憾，而且這也不是它的錯，畢竟它還只是個孩子啊！（GPT-3）</p><p>基於<strong>運算成本</strong>考量，它今年之內應該還無緣長大（升級模型為 GPT-4），不過我相信這只是時間問題而已。</p><p>Notion AI 直接整合在創作界面中，讓我們不必再搬運文字去問 ChatGPT，對於直接透過 Notion 創作的人如我，仍有其不可替代性。</p><p>因此，我依然期待，那一天，可以趕快到來。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sWgUbzT.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;前陣子 &lt;a href=&quot;https://www.notion.so/product/ai&quot;&gt;Notion AI&lt;/a&gt; 剛公布時，我並沒有在第一時間就申請試用。仔細想想，可能作為一個文字創作者，我還是&lt;strong&gt;「本能地」不太願意讓 AI 來干涉這塊「最後的淨土」&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這與「&lt;a href=&quot;https://blog.kyomind.tw/github-copilot/#%E5%B0%8F%E7%B5%90%EF%BC%9A%E6%88%91%E5%B0%8D%E3%80%8C%E6%A9%9F%E5%99%A8%E8%BC%94%E5%8A%A9%E3%80%8D%E7%9A%84%E6%9C%9F%E5%BE%85&quot;&gt;我對 AI 輔助寫 code 的態度&lt;/a&gt;」，有著很大的差別。&lt;/p&gt;
&lt;p&gt;但在看到一些人開始分享 Notion AI 使用心得，無論基於興奮還是焦慮，我還是不得不加入了排隊清單。結果排到我以後才沒過多久，Notion 就宣告測試結束，要開始全面收費了！&lt;/p&gt;
&lt;p&gt;然而，到底要不要付這每月 10 美元？我掙扎了許久，從我臉書上的多次發文，就能看出其中的反覆與猶豫。&lt;/p&gt;
&lt;p&gt;接下來就帶各位回顧，我對 Notion AI 的態度，是如何以「起、承、轉、合」四個階段持續演進——可謂&lt;strong&gt;從期待到放棄&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="Notion AI" scheme="https://blog.kyomind.tw/tags/Notion-AI/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="ChatGPT" scheme="https://blog.kyomind.tw/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>14，小米 13 的兩大關鍵亮點，與那些「價值觀層級」的器物們</title>
    <link href="https://blog.kyomind.tw/weekly-review-14/"/>
    <id>https://blog.kyomind.tw/weekly-review-14/</id>
    <published>2023-04-02T12:12:51.000Z</published>
    <updated>2023-04-08T17:21:23.633Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sWgUbzT.png"></p><p>從 3&#x2F;20 收到貨，隔天開始正式使用<a href="https://www.mi.com/tw/product/xiaomi-13">小米 13 手機</a>，至今也十餘天了，我對它的感想如何？答案是：</p><blockquote><p>多年的追尋與等待，都值得了！</p></blockquote><p>這篇只提 2 個，我選它「<strong>最最最重要</strong>」的理由——你可能也會有興趣。</p><p>小米 13 整體而言，就像大多數 3C 評測 YouTuber（主要是中國）說的：<strong>無重大缺點</strong>。對此我完全認同，所以我決定留下它。</p><p>標題的另一部分是「『價值觀層級』的器物們」，基於單一幅篇上限考慮，請容我下下篇再行討論，但有必要在本篇先點出！</p><p>好，我們開始吧。</p><span id="more"></span><hr><h2 id="紅米-Note-4X"><a href="#紅米-Note-4X" class="headerlink" title="紅米 Note 4X"></a>紅米 Note 4X</h2><p>在講小米 13 之前，不得不先提一下陪伴了我近 6 年的「<a href="https://www.mi.com/tw/redminote4x/">紅米 Note 4X</a>」。</p><p>我對手機無論從軟體、硬體及產品設計的角度，都有著明確的要求。以致於從 2017 年 6 月買了「紅米 Note 4X」後，足足過了近 6 年，才尋得這下一步的歸宿。</p><p>在我看來，紅米 Note 4X 絕對是一代經典，後續的 56789 代相較之下都差強人意。但它終究是一隻中階手機，在使用約 2 年後，面對日益肥大的現代 app，已經明顯捉襟見肘。</p><p>直到現在 2023 年，我用它開一次 LINE，往往要等上十幾二十秒，這無疑是在自虐。</p><p>講述這一段主要為了表達：為了貫徹我對手機的眾多「價值觀」要求，我寧可忍受如此的不便，也不會輕易換掉它，直到另一隻符合價值觀的手機出現為止。</p><hr><h2 id="小米-13-的兩大亮點"><a href="#小米-13-的兩大亮點" class="headerlink" title="小米 13 的兩大亮點"></a>小米 13 的兩大亮點</h2><p>首先，我得承認我是一個米粉，但別誤會，我可不是非小米 &#x2F; 紅米手機不買。</p><p>畢竟「符合我要求的手機才能是我的手機」這樣的價值觀，其層級與順序，絕對優先於一個米粉的價值觀。</p><p>而且嚴格來說，米粉也只能算是一種「<strong>偏好</strong>」而已。</p><p>最近這幾年，手上的紅米手機愈來愈慢，我也一直在做功課，想要換掉它。從三星到蘋果，甚至還買了一隻 iPhone SE 2 打算作為主力機——可惜失敗了。</p><p>這麼說來，小米 13 究竟有什麼樣的「<strong>魔力</strong>」，讓我決定留下它？我覺得主要有二。</p><h2 id="一、Grip（握感良好）"><a href="#一、Grip（握感良好）" class="headerlink" title="一、Grip（握感良好）"></a>一、Grip（握感良好）</h2><p>我可以非常篤定地告訴你，grip 就是我挑選手機時所考量的「第二」重要因素，其重要性不言而喻。</p><p>什麼是 grip（握感）？講白了就是「握起來舒不舒服、是否適合久握」。</p><p>不要小看這樣一個簡單的訴求，大部分的手機<strong>卻都不及格</strong>。</p><p>最差的設計，就是「很尖的圓弧」造型，對手指壓力甚大。很遺憾，小米後來的大多數手機都是這樣的造型，比如下圖的小米 11：</p><p><img src="https://i.imgur.com/qhU0DRb.jpg" alt="圖片來源：小米官網"><span class="cap">圖片來源：小米官網</span></p><p>至於為什麼要這樣設計？不難理解——從側面看起來手機會「更窄更薄」。</p><p>Apple 和三星則習慣使用比較「鈍」的大圓弧，我覺得手感相對好一些。</p><p>所幸，從 iPhone 12 開始，蘋果讓「直角邊框」設計重新回歸。直角邊的接觸面積較大，對手指的負擔更低，是我個人偏好的做法，而紅米 Note 4X 正是如此！</p><p>而非常善於「致敬」的中國手機廠商們，也開始在這一、兩年的部分新手機採用直角邊框，有的還在背部加了一點 2.5D 圓弧作為過渡，手感上更勝於純直角的 iPhone，小米 13 正是其中之一。</p><h2 id="二、全亮度「類-DC-調光」的護眼-OLED-螢幕"><a href="#二、全亮度「類-DC-調光」的護眼-OLED-螢幕" class="headerlink" title="二、全亮度「類 DC 調光」的護眼 OLED 螢幕"></a>二、全亮度「類 DC 調光」的護眼 OLED 螢幕</h2><p>若 grip 是我挑選手機第二重視的要素，那第一則無疑是「<strong>護眼</strong>」。</p><p>OLED 螢幕使用 PWM 調光造成的「<strong>閃爍</strong>」問題，對於少數眼睛敏感族群——比如我，是一個無法跨越的難關。</p><p>可以看看下面這影片，了解「PWM 調光」的可怕之處：</p><ul><li><a href="https://youtu.be/_eAe_5W9Y6U">【Techris】 iPhone 13 Pro 使用兩週後的心得：我眼睛快瞎了</a></li></ul><p>很遺憾的，現在手機為了<strong>機身更輕薄</strong>（OLED 螢幕相較於 LCD 可以做得更薄）與<strong>顯色更漂亮</strong>，有 9 成以上採用 OLED 面板。</p><p>尤其是<strong>旗鑑機</strong>，基本上「<strong>全部</strong>」都是 OLED。</p><p>如果你從未感受到螢幕閃爍相關的困擾，那麼你是幸運的，無需過多擔心。</p><p>但如果有過上述眼睛不適問題，那麼你可以考慮選擇一款 LCD 面板的手機；或者像我一樣，選擇一款對「PWM 閃爍」問題有所改善的 OLED 螢幕手機。</p><p>基本上，後者幾乎都是來自中國廠商的產品。換句話說，目前只有中國手機製造商願意在「<strong>緩解 PWM 調光閃爍</strong>」這個議題上投入精力與用心。</p><h2 id="防閃爍模式"><a href="#防閃爍模式" class="headerlink" title="防閃爍模式"></a>防閃爍模式</h2><p>想要實現小米 13 最大護眼能力，要先打開它的「<strong>防閃爍模式</strong>」才行，也就是「類 DC 調光」，其代價是<strong>低亮度</strong>時會產生<strong>色彩偏差</strong>。</p><p>從結論上看，小米 13 可做到全亮度的「<strong>SVM</strong>」值（不是機器學習那個支援向量機🤣）都在 <strong>0.06</strong> 左右。</p><p>SVM 值愈低愈好，若低於 0.4 則可視為安全範圍。而小米 13 的全亮度 0.06 無疑是非常出色。</p><p>關於 PWM 調光與 SVM 更多的講解與介紹，可以參考這個影片（影片末段有附上對抗 PWM 調光閃爍的改善對策）：</p><ul><li><a href="https://youtu.be/kfT6GmwTO_k">不止 iPhone 13 的頻閃, 你們之前看到的 OLED 頻閃分析可能都是錯的</a></li></ul><p>我用了十幾天，效果確實很棒！即使在低亮度下，眼睛也沒有感到絲毫的不適。</p><hr><h2 id="何謂「價值觀層級」的器物？"><a href="#何謂「價值觀層級」的器物？" class="headerlink" title="何謂「價值觀層級」的器物？"></a>何謂「價值觀層級」的器物？</h2><p>下下篇會討論「偏好與價值觀」，並闡述那些被賦了價值觀的器物，就<strong>不再只是一般的器物了</strong>。</p><p>對我而言，這些「價值觀層級的器物」又有哪些呢？敬請期待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sWgUbzT.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;從 3&amp;#x2F;20 收到貨，隔天開始正式使用&lt;a href=&quot;https://www.mi.com/tw/product/xiaomi-13&quot;&gt;小米 13 手機&lt;/a&gt;，至今也十餘天了，我對它的感想如何？答案是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多年的追尋與等待，都值得了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這篇只提 2 個，我選它「&lt;strong&gt;最最最重要&lt;/strong&gt;」的理由——你可能也會有興趣。&lt;/p&gt;
&lt;p&gt;小米 13 整體而言，就像大多數 3C 評測 YouTuber（主要是中國）說的：&lt;strong&gt;無重大缺點&lt;/strong&gt;。對此我完全認同，所以我決定留下它。&lt;/p&gt;
&lt;p&gt;標題的另一部分是「『價值觀層級』的器物們」，基於單一幅篇上限考慮，請容我下下篇再行討論，但有必要在本篇先點出！&lt;/p&gt;
&lt;p&gt;好，我們開始吧。&lt;/p&gt;</summary>
    
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="產品評論" scheme="https://blog.kyomind.tw/tags/%E7%94%A2%E5%93%81%E8%A9%95%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>13，我買了 Apple Studio Display 與系列心得寫作計畫</title>
    <link href="https://blog.kyomind.tw/weekly-review-13/"/>
    <id>https://blog.kyomind.tw/weekly-review-13/</id>
    <published>2023-03-11T09:33:31.000Z</published>
    <updated>2023-04-02T13:31:20.985Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sWgUbzT.png"></p><p>上星期買了 <a href="https://www.apple.com/tw/studio-display/">Studio Display</a>，使用上已滿一週。儘管它確實是個好螢幕，但期間仍少不了一定的探索和適應過程。</p><p>結論上，我會留下它。</p><p>之前在<a href="https://www.facebook.com/kyomind/posts/pfbid02R8CpNTfyHcfaLsRpF3TcBMbiKuumrHyDxYgdGKfPqFCm576Skq7J2i63iD4MgJuJl">臉書發文</a>已提過「若最終沒有退貨，再來寫一篇『<strong>必須選它的理由</strong>』」，我想這是很有必要的。</p><p>畢竟，這麼貴的東西，確實值得好好寫一篇選購指南。更別說我為了買 Mac 的外接螢幕，也著實做了不少功課。</p><p>我打算把整個選購螢幕歷程所做的功課、曾經考慮的選項、Studio Display 購買上要特別注意的點，還有入手後我對於大螢幕的不適應所做出的調整與改善。</p><p>尤其是那些「<strong>曾經太過年輕</strong>」的天真想法——買入後發現根本不切實際，當初純粹是多想了……等以上種種，寫成一個「三部曲」系列。</p><p>而本篇，則是這個系列的<strong>導讀</strong>與<strong>輪廓介紹</strong>。</p><span id="more"></span><hr><h2 id="一、所做的功課與曾經考慮過的選項"><a href="#一、所做的功課與曾經考慮過的選項" class="headerlink" title="一、所做的功課與曾經考慮過的選項"></a>一、所做的功課與曾經考慮過的選項</h2><p>為 Mac（Macbook &#x2F; Mac mini）買一台外接顯示器所需要下的功夫，除了選購螢幕本來就必備具體的基本知識之外，macOS 作業系統也有一些不同於 Windows 的「獨特之處」。</p><p>換言之，想要做出好的決定，「螢幕選購」與「Mac 螢幕選購」這兩種先備知識都是不可缺少的。</p><p>所幸 YouTube 上已有好些影片整理了這類內容，有特別出色的，我會在文中介紹並強調我認為的重點（有些影片真的好長……）。</p><p>此外，我會順便介紹曾經心儀的兩款非 Studio Display 螢幕——雖然後來還是捨棄了，講述當時考慮它們的理由與做過的功課，作為不想花大錢買螢幕的替代方案。</p><h2 id="二、Studio-Display-使用心得與採購指南"><a href="#二、Studio-Display-使用心得與採購指南" class="headerlink" title="二、Studio Display 使用心得與採購指南"></a>二、Studio Display 使用心得與採購指南</h2><p>Studio Display 的介紹與評測影片已經非常多，所以它的整體素質、表現如何，並不需要我再重複著墨。</p><p>再說，文字也不比影片更適合表達螢幕的聲音、色彩在呈現上的種種迷人之處。</p><p>所以本篇的著眼點，在於我選購 Studio Display 前，所<strong>慎重考慮過</strong>的部分，與實際購入後遇到的「困難」。</p><p>但還是會提一些它的優點——那些我很喜歡的地方。</p><p>只不過，那些你<strong>不喜歡</strong>或<strong>可能無法接受</strong>的環節，才是做決定時最重要的考量點——<strong>那些「不」才是關鍵</strong>。</p><p>本文會著重在 Studio Display 的哪些特點可能會讓你<strong>想對它說「不」</strong>，或者你可能沒考慮到的<strong>潛在問題</strong>，省得買回來後，還要大費周章退貨——它好重！</p><p>所以，這絕不是「另一篇」開箱評測，而是給潛在購買者的「<strong>買前必讀</strong>」。</p><h2 id="三、我如何使用-Rectangle-app-讓-Studio-Display-變得好用"><a href="#三、我如何使用-Rectangle-app-讓-Studio-Display-變得好用" class="headerlink" title="三、我如何使用 Rectangle app 讓 Studio Display 變得好用"></a>三、我如何使用 Rectangle app 讓 Studio Display 變得好用</h2><p><a href="https://rectangleapp.com/">Rectangle</a> 是 macOS 上的視窗管理工具，可以讓你分割視窗、快速將視窗拖曳至不同區域並對齊，使得<strong>多工作業</strong>更加方便。</p><p>但說真的，我用它的方式並不如你想的那樣——上下分割、左右分割之類的，其實我不太用。</p><p>本文會討論「<strong>為什麼 Rectangle 對我是必要的</strong>」，以及我在 Studio Display 上使用它的主要方式，還有一個比較 Geek 的自定義。</p><p>必須說，我完全不是為了什麼多工，純粹是因為 <strong>27 吋螢幕對我而言太大了</strong>。我必須透過 Rectangle 把視窗縮小，才能好好使用 Studio Display——或其它 27 吋螢幕。</p><p>你可能覺得：「那就縮小視窗就好了啊？有什麼特別之處？」</p><p>對我而言，這其中的「<strong>眉眉角角</strong>」，非 app 不能勝任。</p><p>所以，Rectangle 不止必要，而且是我螢幕選購之路的<strong>最後一塊拼圖</strong>，值得為它留一點篇幅。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sWgUbzT.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;上星期買了 &lt;a href=&quot;https://www.apple.com/tw/studio-display/&quot;&gt;Studio Display&lt;/a&gt;，使用上已滿一週。儘管它確實是個好螢幕，但期間仍少不了一定的探索和適應過程。&lt;/p&gt;
&lt;p&gt;結論上，我會留下它。&lt;/p&gt;
&lt;p&gt;之前在&lt;a href=&quot;https://www.facebook.com/kyomind/posts/pfbid02R8CpNTfyHcfaLsRpF3TcBMbiKuumrHyDxYgdGKfPqFCm576Skq7J2i63iD4MgJuJl&quot;&gt;臉書發文&lt;/a&gt;已提過「若最終沒有退貨，再來寫一篇『&lt;strong&gt;必須選它的理由&lt;/strong&gt;』」，我想這是很有必要的。&lt;/p&gt;
&lt;p&gt;畢竟，這麼貴的東西，確實值得好好寫一篇選購指南。更別說我為了買 Mac 的外接螢幕，也著實做了不少功課。&lt;/p&gt;
&lt;p&gt;我打算把整個選購螢幕歷程所做的功課、曾經考慮的選項、Studio Display 購買上要特別注意的點，還有入手後我對於大螢幕的不適應所做出的調整與改善。&lt;/p&gt;
&lt;p&gt;尤其是那些「&lt;strong&gt;曾經太過年輕&lt;/strong&gt;」的天真想法——買入後發現根本不切實際，當初純粹是多想了……等以上種種，寫成一個「三部曲」系列。&lt;/p&gt;
&lt;p&gt;而本篇，則是這個系列的&lt;strong&gt;導讀&lt;/strong&gt;與&lt;strong&gt;輪廓介紹&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="Studio Display" scheme="https://blog.kyomind.tw/tags/Studio-Display/"/>
    
    <category term="Mac" scheme="https://blog.kyomind.tw/tags/Mac/"/>
    
    <category term="產品評論" scheme="https://blog.kyomind.tw/tags/%E7%94%A2%E5%93%81%E8%A9%95%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>從 Logseq 看清單式筆記的兩大缺點</title>
    <link href="https://blog.kyomind.tw/rusty-bullets/"/>
    <id>https://blog.kyomind.tw/rusty-bullets/</id>
    <published>2023-03-03T18:25:04.000Z</published>
    <updated>2023-04-10T16:06:47.204Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/poxMxfO.jpg" alt="from Pixabay"><span class="cap">from Pixabay</span></p><p>〈<a href="https://blog.kyomind.tw/silver-bullets/">從 WorkFlowy 到 Logseq——我偏愛「清單式筆記」的四大理由</a>〉中，我們講完了清單式筆記的四項優勢。</p><p>然而，有光就有影，這篇就來說說，<strong>不適合「清單」的場景，</strong>也就是<strong>清單的弱勢</strong>。</p><p>使用 Logseq 至今，我覺得<strong>明顯不適合</strong>清單的場景<strong>主要有二</strong>：</p><ol><li><strong>逐字稿。</strong></li><li><strong>長文本（長篇內容）。</strong></li></ol><p>因為 Logseq 屬於清單式筆記軟體，所以你也可以認為上述兩者算是 <strong>Logseq 的缺點</strong>，只不過它們本來就「<strong>應該要是</strong>」——這部分容後述。</p><p>總之，以上兩種情境，在使用清單式筆記時，最好能有效避開。</p><span id="more"></span><hr><h2 id="一、清單式筆記不適合寫逐字稿"><a href="#一、清單式筆記不適合寫逐字稿" class="headerlink" title="一、清單式筆記不適合寫逐字稿"></a>一、清單式筆記不適合寫逐字稿</h2><p>清單式筆記不適合寫<strong>逐字稿</strong>，比如我的文章創作時的<strong>草稿</strong>，這點可想而知。</p><p>畢竟它在文體上的特性——即清單本身——就和「<strong>以標題、大段落為主軸</strong>」的逐字稿不怎麼相容。而「<a href="https://blog.kyomind.tw/logseq/#%E7%82%BA%E4%BD%95%E9%81%B8%E6%93%87-Logseq%EF%BC%9F%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%BC%8F-vs-%E6%B8%85%E5%96%AE%E5%BC%8F">文件式筆記</a>」，比如 <a href="https://www.notion.so/">Notion</a> 或 <a href="https://obsidian.md/">Obsidian</a>，則適合得多。</p><p>尤其，清單式筆記更強調概念、想法上的「<strong>層次與結構</strong>」，而<strong>相對輕忽「具體的文字該如何表述」</strong>。如果拿來寫逐字稿，難免會讓你覺得<strong>少了一味——甚至好幾味</strong>。</p><h3 id="精簡-vs-詳細：清單筆記與完整文章創作的差異"><a href="#精簡-vs-詳細：清單筆記與完整文章創作的差異" class="headerlink" title="精簡 vs 詳細：清單筆記與完整文章創作的差異"></a>精簡 vs 詳細：清單筆記與完整文章創作的差異</h3><p>申言之，清單這種「<strong>有意精簡</strong>」的格式，如果拿來寫一段一段的內容，雖然不是不行，但可能在段落之間會給人一種「<strong>不連貫</strong>」的感覺，多少影響創作的效率。</p><p>而且從「<strong>清單的精神</strong>」看來，每一行清單筆記，就是希望你寫得少——<strong>把想法、概念收束起來</strong>——而非寫得鉅細靡遺。</p><p>所以，雖然我大量使用 Logseq，但具體文字內容的創作，還是透過 Notion。</p><h2 id="清單：構思的利器"><a href="#清單：構思的利器" class="headerlink" title="清單：構思的利器"></a>清單：構思的利器</h2><p>不過話說回來，清單式筆記拿來「<strong>構思文章架構、收集寫作材料</strong>」則<strong>非常適合</strong>！</p><p>例如下圖是我在寫作〈<a href="https://blog.kyomind.tw/weekly-review-15/">15，付費一個月後，我還是退訂了 Notion AI</a>〉時的 Logseq 文章架構筆記，</p><p>雖然並非圖中的每一點都有被使用並寫入正文，但在文章的構思以至寫作階段，清單的重要性與效益都非常明顯。</p><p><img src="https://i.imgur.com/iswoBbl.png"></p><p>總的來說，把寫作的「<strong>準備</strong>」和「<strong>下筆</strong>」兩個階段區分開來，並使用不同的工具，是我目前偏好的方式。</p><h2 id="二、清單式筆記不適合長篇內容"><a href="#二、清單式筆記不適合長篇內容" class="headerlink" title="二、清單式筆記不適合長篇內容"></a>二、清單式筆記不適合長篇內容</h2><p>這點我在使用 <a href="https://workflowy.com/">Workflowy</a> 時期就有隱約感覺到，但始終沒弄明白。</p><p>那時就發現，好像有些內容無論我怎麼整理，就是很難「<strong>內化</strong>」——顯然 Workflowy 並不適合某些場景，但我無法具體說出來。</p><p>我只知道某些筆記的效果很有限，我學得不好。</p><h3 id="Notion-很擅長記錄長篇內容"><a href="#Notion-很擅長記錄長篇內容" class="headerlink" title="Notion 很擅長記錄長篇內容"></a>Notion 很擅長記錄長篇內容</h3><p>後來用了 Notion，有些網路教材的筆記我可以寫上一、兩萬字（當然有不少是複製貼上），十分誇張，且 Notion 豐富的 Markdown 元素，也讓整個文本<strong>即使冗長也不覺得難讀</strong>。</p><p>但<strong>有一好沒兩好</strong>，冗長的筆記或許滿足了「<strong>整理的成就感</strong>」，但誰沒事會想要複習一、兩萬字的內容？——我還真的複習過幾回！</p><p>然而，常常<strong>看到後面忘了前面</strong>，筆記的可讀性不差，但學習的效果仍是普普。</p><h3 id="清單受不了長文本"><a href="#清單受不了長文本" class="headerlink" title="清單受不了長文本"></a>清單受不了長文本</h3><p>後來，為了加強<strong>複習的頻率</strong>，程式類的筆記我全部改用 Logseq 做，且立刻發現一個事實：只要內容一多，我就<strong>完全不想</strong>看這篇筆記了——因為清單受不了長文本。</p><p>如果 Notion 容許一、兩萬字的筆記，那 Logseq 這樣的清單式內容，直觀的上限可能只在兩、三千左右。</p><p>因為長篇內容需要更多段落、標題等元素。而這些元素若透過清單來呈現，反而會讓它顯得<strong>眼花撩亂</strong>，使人放棄思考。</p><p>所以，太長的筆記，我要麼刪到一定字數內，不然就是分拆它們到不同的「<strong>卡片</strong>」，不可能讓一堆內容塞在同一頁。否則就完全違背了<strong>清單的本意</strong>：整理思路、明確想法。</p><p><strong>而更嚴重的後果則是：我根本不想看</strong>。</p><hr><h2 id="清單的使用說明書"><a href="#清單的使用說明書" class="headerlink" title="清單的使用說明書"></a>清單的使用說明書</h2><p>關於清單的<strong>優勢</strong>，我足足寫了四項。而清單的<strong>劣勢</strong>或說<strong>缺點</strong>，卻只提兩項，是否我<strong>偏愛</strong>了清單式筆記？當然！畢竟<a href="https://blog.kyomind.tw/logseq/#%E6%B8%85%E5%96%AE%E7%9A%84%E5%84%AA%E5%8B%A2%E8%88%87%E5%8A%A3%E5%8B%A2">我本來就是這麼說的</a>🤣：</p><blockquote><p>我認為在 80% 的場景中，清單式都優於文件式。</p></blockquote><p>從本文上述的所有內容可以推知，若想用好清單式筆記，我們應該遵守下面兩點：</p><ol><li>清單的<strong>每一行</strong>，內容不要太多、<strong>句子不要太長</strong>——所以它不適合寫逐字稿。因為如果要遵守這原則，一個段落的內容恐怕要拆成很多小點。</li><li>清單的<strong>整體篇幅</strong>也不要太長。這裡的「長」是相對於「文件式筆記」可以接受的上限而言。而清單的上限則要<strong>短得多</strong>。</li></ol><h2 id="清單與卡片筆記的共通點"><a href="#清單與卡片筆記的共通點" class="headerlink" title="清單與卡片筆記的共通點"></a>清單與卡片筆記的共通點</h2><p>仔細觀察這兩點，你是否發現，它們和我在〈<a href="https://blog.kyomind.tw/logseq/">Logseq 使用滿一個月心得：一顆冉冉升起的「卡片筆記」新星</a>〉提到有關<strong>卡片筆記兩大原則</strong>之一的「<a href="https://blog.kyomind.tw/logseq/#%E5%85%83%E7%B4%A0%E5%8C%96%E8%88%87%E9%80%A3%E7%B5%90%E5%B0%8E%E5%90%91">元素化</a>」，似乎有著<strong>異曲同工的核心精神</strong>：</p><blockquote><p>每一則筆記的範圍都不要太大、內容不要太多，且盡可能<strong>都有一個——也「只有」一個——核心論述。</strong></p></blockquote><p>所以我一開始時才會說：「它們（指逐字搞和長文本）本來就『<strong>應該要是</strong>』」Logseq 或其它清單式筆記的缺點——否則<strong>很可能意味著</strong>，你在使用這類筆記工具的時候，<strong>已經「違反」了卡片筆記的原則</strong>。</p><h2 id="Why-Logseq？"><a href="#Why-Logseq？" class="headerlink" title="Why Logseq？"></a>Why Logseq？</h2><p>如此說來，這或許也是<strong>我最終「為何」選擇了清單式的 Logseq</strong>，而非文件式 Obsidian 的一大理由——<strong>因為「清單」本身就蘊含了濃濃的</strong>「<a href="https://blog.kyomind.tw/logseq/#%E5%85%83%E7%B4%A0%E5%8C%96%E8%88%87%E9%80%A3%E7%B5%90%E5%B0%8E%E5%90%91">卡片筆記思維</a>」：</p><blockquote><p><strong>讓你想不貫徹也難☺️</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/poxMxfO.jpg&quot; alt=&quot;from Pixabay&quot;&gt;&lt;/p&gt;
&lt;p&gt;〈&lt;a href=&quot;https://blog.kyomind.tw/silver-bullets/&quot;&gt;從 WorkFlowy 到 Logseq——我偏愛「清單式筆記」的四大理由&lt;/a&gt;〉中，我們講完了清單式筆記的四項優勢。&lt;/p&gt;
&lt;p&gt;然而，有光就有影，這篇就來說說，&lt;strong&gt;不適合「清單」的場景，&lt;/strong&gt;也就是&lt;strong&gt;清單的弱勢&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;使用 Logseq 至今，我覺得&lt;strong&gt;明顯不適合&lt;/strong&gt;清單的場景&lt;strong&gt;主要有二&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;逐字稿。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;長文本（長篇內容）。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因為 Logseq 屬於清單式筆記軟體，所以你也可以認為上述兩者算是 &lt;strong&gt;Logseq 的缺點&lt;/strong&gt;，只不過它們本來就「&lt;strong&gt;應該要是&lt;/strong&gt;」——這部分容後述。&lt;/p&gt;
&lt;p&gt;總之，以上兩種情境，在使用清單式筆記時，最好能有效避開。&lt;/p&gt;</summary>
    
    
    
    <category term="隨筆雜談" scheme="https://blog.kyomind.tw/categories/%E9%9A%A8%E7%AD%86%E9%9B%9C%E8%AB%87/"/>
    
    
    <category term="Logseq" scheme="https://blog.kyomind.tw/tags/Logseq/"/>
    
    <category term="卡片盒筆記法" scheme="https://blog.kyomind.tw/tags/%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95/"/>
    
    <category term="Obsidian" scheme="https://blog.kyomind.tw/tags/Obsidian/"/>
    
    <category term="WorkFlowy" scheme="https://blog.kyomind.tw/tags/WorkFlowy/"/>
    
    <category term="筆記軟體" scheme="https://blog.kyomind.tw/tags/%E7%AD%86%E8%A8%98%E8%BB%9F%E9%AB%94/"/>
    
    <category term="清單式筆記" scheme="https://blog.kyomind.tw/tags/%E6%B8%85%E5%96%AE%E5%BC%8F%E7%AD%86%E8%A8%98/"/>
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
  </entry>
  
  <entry>
    <title>12，blog 新增文章訂閱功能——使用 follow.it——與我的思考</title>
    <link href="https://blog.kyomind.tw/weekly-review-12/"/>
    <id>https://blog.kyomind.tw/weekly-review-12/</id>
    <published>2023-02-25T11:25:27.000Z</published>
    <updated>2023-03-05T18:42:43.264Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sWgUbzT.png"></p><p>在臉書、YouTube 這類「流量大平台」興起之後，很多創作者雖然因此獲得不少流量甚至一夕爆紅，但對<strong>平台演算法</strong>的心情，仍然是愛恨交加。</p><p>在文字創作領域，為了對抗平台與演算法，古老的<strong>電子報</strong>也迎來了一波「<strong>文藝復興</strong>」，造就了一堆電子報服務提供者，比如 <a href="https://mailchimp.com/">Mailchimp</a>、<a href="https://convertkit.com/">Convertkit</a>。</p><p>它們讓作者可以直接把內容透過 email 發送給讀者，強化了兩者間的直接連繫。</p><p>因此，你可以看到愈來愈多的部落格，都有提供電子報訂閱功能。可能是推送最新文章給你，也可能是更多額外的內容。</p><p>更別說像 <a href="https://substack.com/">Substack</a> 這樣「<strong>部落格、電子報——我全都要</strong>」的數位出版服務。</p><p>說這些主要想表達：「<strong>訂閱功能</strong>」確實是現代部落格的一大需求。</p><span id="more"></span><hr><h2 id="我也為部落格新增了文章訂閱功能——使用-follow-it"><a href="#我也為部落格新增了文章訂閱功能——使用-follow-it" class="headerlink" title="我也為部落格新增了文章訂閱功能——使用 follow.it"></a>我也為部落格新增了文章訂閱功能——使用 follow.it</h2><p>如果你有用過電子報服務，那想必很清楚，它們都有一個共同特色：收費不便宜。</p><p>雖然在一定的訂戶額度、發信量內是不用錢的，但一旦流量提升，隨之而來的費用也相當可觀。</p><p>不同於一些很重視電子報訂閱的 blog，對我來說，我的 email 訂閱主要是方便想收到新文章通知，但又不想用（或沒在用）RSS reader 的讀者。</p><p>所以一般的電子報供應商，對我而言就有點太「重」了——我想要更加簡潔的方案，但心裡一直沒有底。</p><p>直到某天，我在哆啦王的臉書看到<a href="https://www.facebook.com/FfaarrFinance/posts/pfbid0m7TpUSiE3Y2cfFfUpAph4Mq9Gw9pFUfyTbGC3EutxVbhhbdJmhDekRo9jBPD1jS1l">這篇</a>：</p><blockquote><p>雖然我在部落格發文之後，都會也在facebook這邊分享，但之前有讀者覺得因為fb常常觸及不到，所以建議來做一個文章訂閱，因此目前在我部落格的右上角，增設了使用follow.it這個網站的訂閱按鈕，輸入e-mail後按下送出之後，信箱會收到一封follow.it的確認信件，點擊確認之後即完成訂閱文章。</p></blockquote><p>感謝哆啦王！讓我此從知道了 <a href="https://follow.it/">follow.it</a> 這個服務——這不就是我一直在找的嗎！</p><h2 id="follow-it-的優勢與缺點"><a href="#follow-it-的優勢與缺點" class="headerlink" title="follow.it 的優勢與缺點"></a>follow.it 的優勢與缺點</h2><p>follow.it 的主要功能，是幫你把網站的 RSS feed 內容轉成電子報發送。要說它屬於前述 Mailchimp 那種電子報服務，是，但也不完全是。</p><p>它的角色核心比較側重於「<strong>透過 RSS feed 轉 email，輔助並完善網站的內容訂閱</strong>」，而上述的電子報供應商，不一定要你有部落格或 RSS。</p><p>相反的，使用 <a href="http://follow.it/">follow.it</a>，你必須提供 RSS feed 才行。（不然沒有東西可以轉）</p><p><a href="http://follow.it/">follow.it</a> 可以免費使用，而且相比於傳統電子報服務，它的免費方案和 Substack 相同——<strong>沒有訂閱人數限制！</strong>這無疑是免費仔的福音。</p><p>但先別高興得太早，它自然有<strong>別的限制</strong>來促使你付費。比如對電子報而言，舉足輕重的「<strong>email 標題</strong>」和「<strong>寄件者</strong>」欄位，在免費方案裡，都是<strong>無法自訂</strong>的！</p><p>不得不承認這確實有點「<strong>痛</strong>」，難怪可以不限人數，卻不怕你不付費。😂</p><p><img src="https://i.imgur.com/Icrn8xh.png" alt="天下果然沒有白吃的午餐"><span class="cap">天下果然沒有白吃的午餐</span></p><p>透過付費可以得到更多額外的 email 客製化功能，這樣就會愈來愈像真正的電子報了。但老實說，如果要付費，我會選擇<strong>專業的電子報服務</strong>，比如 <a href="https://buttondown.email/">Buttondown</a>。😎</p><hr><h2 id="我對電子報的思考"><a href="#我對電子報的思考" class="headerlink" title="我對電子報的思考"></a>我對電子報的思考</h2><p>就我所知，有些 blog 非常重視透過電子報和讀者互動。比如「<a href="https://pinchlime.com/">Pin 起來</a>」，不僅提供所有文章的電子報訂閱，甚至能讓你<a href="https://pinchlime.com/subscribe/">只訂閱部分內容</a>，可謂非常用心。</p><p>對現階段的我而言，文章訂閱型的電子報僅屬於「<strong>輔助</strong>」地位，基於軟體工程師的簡潔信仰，我一直有意避開上述那些電子報供應商方案。</p><p>本來還想要自己寫（程式），但問過有類似經驗的同事後，才知道土砲（DIY）最難的地方反而是「如何讓 gmail 不把你的電子報歸到垃圾信」——好吧！我放棄XD。</p><p>確定採用 <a href="http://follow.it/">follow.it</a> 後，還有兩個點也讓我掙扎了一番。</p><h2 id="一、是否附上全文？"><a href="#一、是否附上全文？" class="headerlink" title="一、是否附上全文？"></a>一、是否附上全文？</h2><p>我一開始是設定<strong>只顯示文章開頭部分</strong>，然後附上文章連結。心裡打的算盤當然是——「你要看全文就要來站上喔！」這樣瀏覽數會好看一點。</p><p>但仔細想想，這真的很蠢。</p><p>一來是有這類訂閱需求的人就已經很少了，如果還吝於把全文放在 email 裡，實在有些可笑。</p><p>再說，這些 email 內容都是透過 <a href="http://follow.it/">follow.it</a> 從我的 RSS feed 自動轉換過來的，既然 RSS 提供的就是全文，那希望讓讀者<strong>更加方便、好用</strong>的 email 管道，何必再自我閹割？</p><p>追根究柢，到底要在 email 裡讀完，還是到到網站上看，這個「選擇權」應該留給讀者才對。</p><p>所以，後來我就改成全文發送了。</p><h2 id="二、訂閱按鈕放哪好？"><a href="#二、訂閱按鈕放哪好？" class="headerlink" title="二、訂閱按鈕放哪好？"></a>二、訂閱按鈕放哪好？</h2><p>這是另一個有趣且<strong>不可小覷</strong>的議題。</p><p>最常見的方式是放在每一篇文章的<strong>結尾處</strong>，或像<a href="https://finance.ffaarr.com.tw/">哆啦王</a>那樣，放在<strong>側邊欄的 widget</strong>，讓每一篇文章都能看到。</p><p>這樣做無疑能最大化訂戶的數量，因為位置顯眼，讀者想不看到都難，有興趣的人自然就會訂了。</p><p>不過我還是捨棄了上述兩種方案，因為兩者都會一定程度地影響我<strong>文章版面的美感</strong>。</p><p>而且，假設我是讀者，如果我不是很想訂，但願意多看看站上的文章，結果每篇文章結尾都在 push 我訂閱，看著就有點煩。</p><p>或者，我已經訂了，但依舊要繼續看到這些佔空間的訂閱按鈕，也是有點煩。</p><p>所以想了想，我還是把訂閱區塊獨立一個<a href="https://blog.kyomind.tw/subscribe/">分頁</a>，這樣至少它在版面上，只會佔用<strong>兩個字</strong>，把視覺上的妨礙降到最低。</p><p>而且因為分頁已經有點多，為了維持<strong>簡潔的美感</strong>，我同時也拿掉了「首頁」這個連結——其實按左上角的「<a href="https://blog.kyomind.tw/">Code and Me</a>」就能回到首頁。</p><hr><p>看到這裡，不考慮<a href="https://blog.kyomind.tw/subscribe/">訂一下</a>嗎？👀</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sWgUbzT.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在臉書、YouTube 這類「流量大平台」興起之後，很多創作者雖然因此獲得不少流量甚至一夕爆紅，但對&lt;strong&gt;平台演算法&lt;/strong&gt;的心情，仍然是愛恨交加。&lt;/p&gt;
&lt;p&gt;在文字創作領域，為了對抗平台與演算法，古老的&lt;strong&gt;電子報&lt;/strong&gt;也迎來了一波「&lt;strong&gt;文藝復興&lt;/strong&gt;」，造就了一堆電子報服務提供者，比如 &lt;a href=&quot;https://mailchimp.com/&quot;&gt;Mailchimp&lt;/a&gt;、&lt;a href=&quot;https://convertkit.com/&quot;&gt;Convertkit&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;它們讓作者可以直接把內容透過 email 發送給讀者，強化了兩者間的直接連繫。&lt;/p&gt;
&lt;p&gt;因此，你可以看到愈來愈多的部落格，都有提供電子報訂閱功能。可能是推送最新文章給你，也可能是更多額外的內容。&lt;/p&gt;
&lt;p&gt;更別說像 &lt;a href=&quot;https://substack.com/&quot;&gt;Substack&lt;/a&gt; 這樣「&lt;strong&gt;部落格、電子報——我全都要&lt;/strong&gt;」的數位出版服務。&lt;/p&gt;
&lt;p&gt;說這些主要想表達：「&lt;strong&gt;訂閱功能&lt;/strong&gt;」確實是現代部落格的一大需求。&lt;/p&gt;</summary>
    
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="blog" scheme="https://blog.kyomind.tw/tags/blog/"/>
    
    <category term="電子報" scheme="https://blog.kyomind.tw/tags/%E9%9B%BB%E5%AD%90%E5%A0%B1/"/>
    
  </entry>
  
  <entry>
    <title>Linux 開發環境設定大全：zsh、zinit、pyenv、poetry、docker</title>
    <link href="https://blog.kyomind.tw/linux-dev-setup/"/>
    <id>https://blog.kyomind.tw/linux-dev-setup/</id>
    <published>2023-02-19T13:04:51.000Z</published>
    <updated>2023-04-07T05:44:15.398Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/wuqTPvs.jpg" alt="from Pixabay"><span class="cap">from Pixabay</span></p><p>最近為了升級 <a href="https://www.ubuntu-tw.org/modules/tinyd0/">Ubuntu</a> 版本，重建了工作上的 Linux VM（直接升級會怕），所以又得重新設定一次開發環境。</p><p>軟體界有一句名言叫「<a href="https://zh.wikipedia.org/zh-tw/%E5%90%83%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%97%E7%B2%AE">吃自己的狗糧</a>」，通常指的是自己開發的工具，自己先使用。而每次重設 Linux 開發環境時，我也都在吃自己的狗糧——看自己寫的教學文章。</p><p>不誇張，就是一篇篇看，把指令複製貼上，一步一步將環境設定到位。</p><p>做了好幾次以後，這次不禁想到：「<strong>咦？我乾脆整理成一篇就好了啊！</strong>」</p><span id="more"></span><h2 id="本文主旨"><a href="#本文主旨" class="headerlink" title="本文主旨"></a>本文主旨</h2><p>沒錯！本篇講述的是：當我拿到一個<strong>全新的 Linux VM</strong>，為了開發方便，一定會安裝、設定的工具——主要基於「<strong>Python 後端</strong>」角度。</p><p>內容參考自以往數篇文章，且只關注在<strong>建立開發環境的必要步驟</strong>，並適時給出一些額外的提醒與建議。</p><p>如此一來，我們就不必在文章間穿梭，力求節省時間、一步到位！</p><p>本文是以 <strong>Ubuntu 20.04</strong> 實作，如果你用的是別的 Linux 發行版，肯定會有一些差別，這部分還請留意。</p><p>話不多說，讓我們開始。</p><hr><h2 id="一、設定-SSH-連線"><a href="#一、設定-SSH-連線" class="headerlink" title="一、設定 SSH 連線"></a>一、設定 SSH 連線</h2><p>這部分我並沒有寫成文章，因為網路上的資源已經非常多，而且步驟也不算太複雜。</p><p>對我而言，主要設定下面兩種 SSH 連線：</p><ol><li>本機電腦與遠端 VM 的連線。</li><li>VM 與 GitHub（或其它 Git 服務）的連線。</li></ol><p>至於具體要怎麼做，還請自行 Google。</p><h2 id="二、設定-zsh、zinit、Powerlevel10k"><a href="#二、設定-zsh、zinit、Powerlevel10k" class="headerlink" title="二、設定 zsh、zinit、Powerlevel10k"></a>二、設定 zsh、zinit、Powerlevel10k</h2><blockquote><p>參考原文：</p><ul><li><a href="https://blog.kyomind.tw/ubuntu-zsh-zinit/">Ubuntu 安裝使用 zsh + 輕量級套件管理器 zinit</a></li><li><a href="https://blog.kyomind.tw/powerlevel10k/">zsh 透過 zinit 安裝 Powerlevel10k 佈景主題</a></li></ul></blockquote><h3 id="安裝-zsh"><a href="#安裝-zsh" class="headerlink" title="安裝 zsh"></a>安裝 zsh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update;</span><br><span class="line">sudo apt-get upgrade -y;</span><br><span class="line">sudo apt-get install -y zsh;</span><br></pre></td></tr></table></figure><h3 id="將-zsh-設為登入時的「預設」shell"><a href="#將-zsh-設為登入時的「預設」shell" class="headerlink" title="將 zsh 設為登入時的「預設」shell"></a>將 zsh 設為登入時的「預設」shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -s /bin/zsh <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>提醒：請務必先確認 zsh 本身的安裝、設定沒問題，可以正常使用。否則登入後可能直接卡住，需要透過別的帳號例如 admin 來處理。</p><h3 id="新增-zshrc與-zprofile"><a href="#新增-zshrc與-zprofile" class="headerlink" title="新增.zshrc與.zprofile"></a>新增<code>.zshrc</code>與<code>.zprofile</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> .zshrc</span><br><span class="line"><span class="built_in">touch</span> .zprofile</span><br></pre></td></tr></table></figure><h3 id="安裝-zinit-套件管理器"><a href="#安裝-zinit-套件管理器" class="headerlink" title="安裝 zinit 套件管理器"></a>安裝 zinit 套件管理器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="設定-zinit-套件"><a href="#設定-zinit-套件" class="headerlink" title="設定 zinit 套件"></a>設定 zinit 套件</h3><p>安裝完後，zinit 已經自動在<code>.zshrc</code>新增部分內容，請接著繼續新增下列內容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zsh 套件四天王</span></span><br><span class="line">zinit light zsh-users/zsh-completions</span><br><span class="line">zinit light zsh-users/zsh-autosuggestions</span><br><span class="line">zinit light zsh-users/zsh-history-substring-search</span><br><span class="line">zinit light zdharma-continuum/fast-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># Oh My Zsh 功能</span></span><br><span class="line">zinit snippet OMZ::lib/completion.zsh</span><br><span class="line">zinit snippet OMZ::lib/history.zsh</span><br><span class="line">zinit snippet OMZ::lib/key-bindings.zsh</span><br><span class="line">zinit snippet OMZ::lib/theme-and-appearance.zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># key binding</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[A&#x27;</span> history-substring-search-up</span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[B&#x27;</span> history-substring-search-down</span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;,&#x27;</span> autosuggest-accept</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">zinit load djui/alias-tips</span><br></pre></td></tr></table></figure><p>存檔後，重啟 shell。（如果要一併安裝 Powerlevel10k，可先不用重啟。）</p><h3 id="安裝-Powerlevel10k-佈景主題"><a href="#安裝-Powerlevel10k-佈景主題" class="headerlink" title="安裝 Powerlevel10k 佈景主題"></a>安裝 Powerlevel10k 佈景主題</h3><p>非常簡單，只要在 zinit 的設定內容後面，再加上這行即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Powerlevel10k</span></span><br><span class="line">zinit ice depth=1; zinit light romkatv/powerlevel10k</span><br></pre></td></tr></table></figure><p>存檔，重啟 shell，此時就會開始安裝 Powerlevel10k，隨即會進入「<strong>外觀樣式選擇與設定</strong>」畫面。</p><p>之後如果要重新設定，可使用指令<code>p10k configure</code>。</p><hr><h2 id="三、設定-pyenv"><a href="#三、設定-pyenv" class="headerlink" title="三、設定 pyenv"></a>三、設定 pyenv</h2><blockquote><p>參考原文：<a href="https://blog.kyomind.tw/ubuntu-pyenv/">Ubuntu 安裝使用 pyenv + pyenv-virtualenv</a></p></blockquote><h3 id="安裝-dependency"><a href="#安裝-dependency" class="headerlink" title="安裝 dependency"></a>安裝 dependency</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update;</span><br><span class="line">sudo apt-get install -y --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br></pre></td></tr></table></figure><h3 id="安裝-pyenv"><a href="#安裝-pyenv" class="headerlink" title="安裝 pyenv"></a>安裝 pyenv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure><h3 id="設定-pyenv"><a href="#設定-pyenv" class="headerlink" title="設定 pyenv"></a>設定 pyenv</h3><p>這裡直接採用 <a href="https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv">pyenv 2.3.0 以後的設定方式</a>，大幅簡化操作——變得更加無腦、易用，好評！——且 zsh 或 bash 在設定上<strong>已無差別</strong>。</p><p>一律在<code>.zshrc</code>或<code>.bashrc</code>中，新增下列內容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line"><span class="built_in">command</span> -v pyenv &gt;/dev/null || <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>官方的 shell 指令版本（for zsh）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="pyenv-安裝-Python-3-10-10-並設為全域"><a href="#pyenv-安裝-Python-3-10-10-並設為全域" class="headerlink" title="pyenv 安裝 Python 3.10.10 並設為全域"></a>pyenv 安裝 Python 3.10.10 並設為全域</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.10.10</span><br></pre></td></tr></table></figure><p>通常需要等待好一段時間，安裝才會完成。🐸</p><p>接著透過 pyenv，將系統全域的 Python 設定為 <a href="https://www.python.org/downloads/release/python-31010/">3.10.10</a>（或其他版本）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global 3.10.10</span><br></pre></td></tr></table></figure><h3 id="不再安裝-pyenv-virtualenv"><a href="#不再安裝-pyenv-virtualenv" class="headerlink" title="不再安裝 pyenv-virtualenv"></a>不再安裝 pyenv-virtualenv</h3><p>因為 Poetry 自帶了虛擬環境管理功能，容易和 pyenv-virtualenv <strong>疊床架屋</strong>，徒增<strong>管理上的混淆</strong>，所以我現在<strong>一律只使用 Poetry + venv 來管理 Python 虛擬環境</strong>。</p><p>這也是我目前覺得<strong>最簡潔</strong>的做法。</p><hr><h2 id="四、設定-Poetry"><a href="#四、設定-Poetry" class="headerlink" title="四、設定 Poetry"></a>四、設定 Poetry</h2><blockquote><p>參考原文：<a href="https://blog.kyomind.tw/python-poetry/">再見了 pip！最佳 Python 套件管理器——Poetry 完全入門指南</a></p></blockquote><h3 id="安裝-Poetry"><a href="#安裝-Poetry" class="headerlink" title="安裝 Poetry"></a>安裝 Poetry</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://install.python-poetry.org | python3 -</span><br></pre></td></tr></table></figure><h3 id="新增poetry指令至-PATH"><a href="#新增poetry指令至-PATH" class="headerlink" title="新增poetry指令至 PATH"></a>新增<code>poetry</code>指令至 PATH</h3><p>在<code>.zshrc</code>新增以下內容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.local/bin</span><br></pre></td></tr></table></figure><h3 id="修改config，改用專案內的-venv虛擬環境"><a href="#修改config，改用專案內的-venv虛擬環境" class="headerlink" title="修改config，改用專案內的.venv虛擬環境"></a>修改<code>config</code>，改用專案內的<code>.venv</code>虛擬環境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config virtualenvs.in-project <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、安裝-Docker"><a href="#五、安裝-Docker" class="headerlink" title="五、安裝 Docker"></a>五、安裝 Docker</h2><p>安裝細節常常隨著 Docker 版本的更新而有所變動，建議直接看<a href="https://docs.docker.com/engine/install/ubuntu/">官方文件</a>即可。</p><p>這次安裝有兩個發現：</p><ol><li>最新版似乎已經<strong>不需要將使用者加入 Docker 群組了</strong>。</li><li><code>docker compose</code>改以 plugin 的形式安裝，變成 Docker client 的<strong>子命令</strong>，而不再採用舊版的<code>docker-compose</code>。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wuqTPvs.jpg&quot; alt=&quot;from Pixabay&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近為了升級 &lt;a href=&quot;https://www.ubuntu-tw.org/modules/tinyd0/&quot;&gt;Ubuntu&lt;/a&gt; 版本，重建了工作上的 Linux VM（直接升級會怕），所以又得重新設定一次開發環境。&lt;/p&gt;
&lt;p&gt;軟體界有一句名言叫「&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/%E5%90%83%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%97%E7%B2%AE&quot;&gt;吃自己的狗糧&lt;/a&gt;」，通常指的是自己開發的工具，自己先使用。而每次重設 Linux 開發環境時，我也都在吃自己的狗糧——看自己寫的教學文章。&lt;/p&gt;
&lt;p&gt;不誇張，就是一篇篇看，把指令複製貼上，一步一步將環境設定到位。&lt;/p&gt;
&lt;p&gt;做了好幾次以後，這次不禁想到：「&lt;strong&gt;咦？我乾脆整理成一篇就好了啊！&lt;/strong&gt;」&lt;/p&gt;</summary>
    
    
    
    <category term="開發筆記" scheme="https://blog.kyomind.tw/categories/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Linux" scheme="https://blog.kyomind.tw/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://blog.kyomind.tw/tags/Ubuntu/"/>
    
    <category term="zsh" scheme="https://blog.kyomind.tw/tags/zsh/"/>
    
    <category term="zinit" scheme="https://blog.kyomind.tw/tags/zinit/"/>
    
    <category term="Powerlevel10k" scheme="https://blog.kyomind.tw/tags/Powerlevel10k/"/>
    
    <category term="pyenv" scheme="https://blog.kyomind.tw/tags/pyenv/"/>
    
    <category term="Poetry" scheme="https://blog.kyomind.tw/tags/Poetry/"/>
    
    <category term="Docker" scheme="https://blog.kyomind.tw/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>11，我絕不當資訊的聚合者</title>
    <link href="https://blog.kyomind.tw/weekly-review-11/"/>
    <id>https://blog.kyomind.tw/weekly-review-11/</id>
    <published>2023-02-18T14:58:07.000Z</published>
    <updated>2023-03-05T18:42:43.263Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sWgUbzT.png"></p><p>你一定用過 <a href="https://getpocket.com/">Pocket</a> 這類可以幫你把文章、網址存下來，以供日後再讀的服務。現在很多瀏覽器也內建了類似功能。</p><p>可以說，這樣的「<strong>稍後再讀</strong>」服務，幾乎是現代人獲取和管理網路上資訊的起手式。畢竟資訊量實在太大，不可能一看到什麼就讀什麼。</p><p>如果要再進一步，將這些資訊歸納、整合，那可就<strong>非常複雜</strong>了！</p><p>聽聽星箭廣播這期〈<a href="https://blog.starrocket.io/posts/star-rocket-podcast-ep107-statementdog-marketing-manager-wei-yu-lin-talks-about-his-productivity-tools-and-the-system-for-learning/">107: 希望我們的第二大腦都不會太遲緩：聊聊學習生產力工具（ft. 財報狗林威宇）</a>〉，我們可以得知，有一種人，特別熱衷於整理、消化網路上的各種資訊。</p><p>通常，他 &#x2F; 她們也都挺厲害的，比如上述財報狗的<a href="https://wylin.tw/">林威宇</a>。</p><p>而我想說的是——我絕對不要成為這樣的人。</p><span id="more"></span><p><img src="https://i.imgur.com/drRrybF.png" alt="純屬博君一笑"><span class="cap">純屬博君一笑</span></p><h2 id="這樣是哪樣？"><a href="#這樣是哪樣？" class="headerlink" title="這樣是哪樣？"></a>這樣是哪樣？</h2><p>為避免誤解，我們還是要定義一下，所謂的「這樣」，到底是哪樣？</p><p>首先「資訊」一詞你也可以理解為「知識」，這裡請容我混用，因為它們並非重點。</p><p>在部落格「<a href="https://blog.kyomind.tw/about/">關於我</a>」中，我已經表明自己是一個不折不扣的「<strong>筆記控</strong>」，更有多篇文章討論或提及了筆記軟體如 <a href="https://blog.kyomind.tw/tags/Notion/">Notion</a> 與 <a href="https://blog.kyomind.tw/tags/Logseq/">Logseq</a>。</p><p>毫無疑問，我是一個<strong>很愛整理知識</strong>（尤其是<strong>程式相關的知識</strong>）的人，而且也深深信仰著「<a href="https://blog.kyomind.tw/a-mind-for-blogs/#%E6%9C%80%E5%A4%A7%E5%A5%BD%E8%99%95%EF%BC%9A%E5%AF%AB%E4%BD%9C%E5%8D%B3%E6%80%9D%E8%80%83">不寫下來就無法思考</a>」的價值觀。</p><h2 id="善於收集、整理、消化零碎資訊的人"><a href="#善於收集、整理、消化零碎資訊的人" class="headerlink" title="善於收集、整理、消化零碎資訊的人"></a>善於收集、整理、消化零碎資訊的人</h2><p>所以，我不想成為的，是「<strong>零碎資訊的有效聚合者</strong>」，請注意這裡有<strong>兩個重點</strong>：</p><ol><li><strong>零碎</strong>：意味資訊來源眾多，主要可能是網路文章、YouTube 影片、Podcast，甚至臉書、推特發文。</li><li><strong>有效</strong>：有一整套系統（或稱「工作流」），有辦法大量收集眾多來源資訊，並且還能相當程度地進行處理、整合，甚至<strong>內化與輸出</strong>。</li></ol><p>該怎麼形容這樣的人？聽聽上面的那集 Podcast 就能知曉。可想而知，這類人也通常都非常善用工具，有著過人的生產力。</p><p>我就知道好幾個！</p><hr><h2 id="為什麼我不想？"><a href="#為什麼我不想？" class="headerlink" title="為什麼我不想？"></a>為什麼我不想？</h2><p>如果你以為我會說：「我不想是因為，他們把自己限縮成一個資訊收集機器，就算是把資訊收集得很好，但最終沒有把它們轉化為有用的知識……等等等」那你就猜錯了🤣</p><p>不可否認有些人或許是純收集而忽略創造價值，但至少就我所知道的這些人，是真能夠一定程度運用起大量聚合後的資訊，比如上述的林威宇。</p><p>因此，我不想，不是因為沒用，而是因為我個人的因素，主要有二：</p><ol><li>能量不足。</li><li>收集讓人滿足，但也讓我煩躁。</li></ol><p>從這兩個角度看，與其說我不想，不如說「<strong>我辦不到</strong>」，或許更為貼切。</p><h2 id="一、我的能量不足"><a href="#一、我的能量不足" class="headerlink" title="一、我的能量不足"></a>一、我的能量不足</h2><p>說真的，我並不（特別）羨慕那些<a href="https://blog.kyomind.tw/simple-notion/#%E7%AC%AC%E4%B8%80%E7%A8%AE%E4%BA%BA%EF%BC%9A%E7%94%9F%E7%94%A2%E5%8A%9B%E7%8B%82%E9%AD%94">生產力過人的人</a>，因為我知道自己<strong>沒有那麼多能量</strong>。對此，我也不氣餒，只怪自己仍無法將大部分的<strong>專注力</strong>，都盡可能用在刀口上，還是常常在看 <a href="https://youtu.be/MqPj1X_uRME">YouTube 廢片解說</a>🙈。</p><p>而且我知道，即使將時間精力全都用在刀口上了，那依舊是<strong>有限</strong>的。面對有限的資源，我始終不能太貪心，最好集中在少部分關鍵知識材料——比如書本——才是正途。</p><h2 id="二、收集讓人滿足，也讓我煩躁"><a href="#二、收集讓人滿足，也讓我煩躁" class="headerlink" title="二、收集讓人滿足，也讓我煩躁"></a>二、收集讓人滿足，也讓我煩躁</h2><p>收集資訊肯定能帶來一些成就感，因為「<strong>掌控力</strong>」與「<strong>收集欲</strong>」被一定程度滿足了——那種<strong>井然有序</strong>的感覺，我懂！</p><p>然而，知識的 <a href="https://zh.wikipedia.org/zh-tw/%E9%94%99%E5%A4%B1%E6%81%90%E6%83%A7%E7%97%87">FOMO</a>（即<strong>知識焦慮</strong>）是所有軟體工程師的<strong>宿命</strong>，看看胡立這篇〈<a href="https://hulitw.medium.com/what-to-learn-b85ee24c3e8">來談談工程師的知識焦慮</a>〉就能明白。</p><p>真的很焦慮捏！</p><p>程式之海就已一望無際，再看看邊界外的眾多資訊，實在讓人絕望。資訊處理工作流？不可能——能寫好每天的 <a href="https://blog.kyomind.tw/logseq/#%E6%97%A5%E8%AA%8C%EF%BC%88Journal%EF%BC%89%E7%B3%BB%E7%B5%B1">Logseq 日誌</a>和 <a href="https://www.facebook.com/kyomind/posts/pfbid03X7knbcajedDqET2s4xYBGxdD6abpTGzusVb7CXisihbGksHGv2PXzUacpXxcdtdl">Google Sheets 記錄</a>，我已該知足。</p><h2 id="稍後再讀——你真的會讀？"><a href="#稍後再讀——你真的會讀？" class="headerlink" title="稍後再讀——你真的會讀？"></a>稍後再讀——你真的會讀？</h2><p>常見的答案是：「應該會。」</p><p>而你我都知道，真實的答案往往是：「<strong>當然不會</strong>。」</p><p>但我想說的是，絕大部分的時候，<strong>存了不讀才是正確的XD！</strong></p><hr><h2 id="小結：靠別人去聚合"><a href="#小結：靠別人去聚合" class="headerlink" title="小結：靠別人去聚合"></a>小結：靠別人去聚合</h2><blockquote><p>可是，不收集，我會很容易資訊焦慮耶！怕跟不上時代。</p></blockquote><p>真的會！我也會，那要怎麼辦？</p><p>當然是把事情<strong>交給專業的人去做</strong>，然後我再關注這些人就好了，比如追縱臉書或訂閱電子報。</p><p>沒錯，我自己不聚合，我就關注幾個很會聚合的人足矣——這些人自然會幫我們去聚合一大堆已經在大量聚合的人事物（好繞口）。</p><p>但如此一來，你可能又不免擔心，那資訊豈不是已經經過了 N 手後，才被我看到？是的，確實如此。</p><p>然而，對於零碎資訊（相較於完整、有體系的內容），我覺得可以了。</p><p>誤導？沒關係，只要我們保持著一顆<strong>持續思考的心</strong>，你總能嗅到其中的<strong>不對勁</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sWgUbzT.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;你一定用過 &lt;a href=&quot;https://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; 這類可以幫你把文章、網址存下來，以供日後再讀的服務。現在很多瀏覽器也內建了類似功能。&lt;/p&gt;
&lt;p&gt;可以說，這樣的「&lt;strong&gt;稍後再讀&lt;/strong&gt;」服務，幾乎是現代人獲取和管理網路上資訊的起手式。畢竟資訊量實在太大，不可能一看到什麼就讀什麼。&lt;/p&gt;
&lt;p&gt;如果要再進一步，將這些資訊歸納、整合，那可就&lt;strong&gt;非常複雜&lt;/strong&gt;了！&lt;/p&gt;
&lt;p&gt;聽聽星箭廣播這期〈&lt;a href=&quot;https://blog.starrocket.io/posts/star-rocket-podcast-ep107-statementdog-marketing-manager-wei-yu-lin-talks-about-his-productivity-tools-and-the-system-for-learning/&quot;&gt;107: 希望我們的第二大腦都不會太遲緩：聊聊學習生產力工具（ft. 財報狗林威宇）&lt;/a&gt;〉，我們可以得知，有一種人，特別熱衷於整理、消化網路上的各種資訊。&lt;/p&gt;
&lt;p&gt;通常，他 &amp;#x2F; 她們也都挺厲害的，比如上述財報狗的&lt;a href=&quot;https://wylin.tw/&quot;&gt;林威宇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而我想說的是——我絕對不要成為這樣的人。&lt;/p&gt;</summary>
    
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="個人知識管理" scheme="https://blog.kyomind.tw/tags/%E5%80%8B%E4%BA%BA%E7%9F%A5%E8%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="簡潔主義" scheme="https://blog.kyomind.tw/tags/%E7%B0%A1%E6%BD%94%E4%B8%BB%E7%BE%A9/"/>
    
    <category term="學習" scheme="https://blog.kyomind.tw/tags/%E5%AD%B8%E7%BF%92/"/>
    
    <category term="知識焦慮" scheme="https://blog.kyomind.tw/tags/%E7%9F%A5%E8%AD%98%E7%84%A6%E6%85%AE/"/>
    
  </entry>
  
  <entry>
    <title>10，Weekly Review 寫滿 10 回——我的心得與改進</title>
    <link href="https://blog.kyomind.tw/weekly-review-10/"/>
    <id>https://blog.kyomind.tw/weekly-review-10/</id>
    <published>2023-02-12T11:40:51.000Z</published>
    <updated>2023-03-05T18:42:43.263Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sWgUbzT.png"></p><p>從 2022 年 11 月 6 日的〈<a href="https://blog.kyomind.tw/weekly-review-01/">01，為何他們可以，但我不行</a>〉到今天，Weekly Review 剛好滿 10 回了！</p><p>如果是整個 blog 是我在寫作方面的「產品」，那「Weekly Reivew」可以視為產品中的一個重要 feature 與嘗試。</p><p>而一個成長中的 feature，必然經過一次次的迭代與更新。本期就來看看，從第一篇到現在，期間我有哪些感受與發現，以及做了哪些調整。</p><p>以下是我的心得（突然覺得這句話好 GPT🤣）。</p><span id="more"></span><hr><h2 id="一、關於「定期」與「不定期」的取捨"><a href="#一、關於「定期」與「不定期」的取捨" class="headerlink" title="一、關於「定期」與「不定期」的取捨"></a>一、關於「定期」與「不定期」的取捨</h2><p>大部分的電子報都是每週更新一期甚至兩期，除了逢年過節或作者要務纏身不克更新之外，訂閱的讀者們對於出刊規律，有著一定的期待。</p><p>若輕易辜負，難免會給人一種「三天曬網，兩天捕魚」的感覺。</p><p>因此，考慮到我的內容屬性（不易量產）與寫作紀律（毫無紀律），我在一開始就選擇了「<strong>不定期</strong>」的更新模式，藉此逃避週更責任！</p><p>整體而言，我覺得這個選擇還是比較適合我的——因為我確實沒辦法每週都寫出自己覺得有趣的內容。</p><p>但它的<strong>代價</strong>也很明顯：有時候我已經有了想法，只要願意下筆，幾乎一定能成篇。而正因為可以偷懶，所以就真的先偷懶了！拖到下一期甚至下下期才發，這顯然就算不上什麼好事。</p><p>兩者的取捨沒有明確分界可言，端視你<strong>最在乎什麼</strong>。我希望不要勉強自己硬產內容，所以容忍了伴隨的怠惰。</p><p>可是，我也明白，有時候適度的強迫確實就能成事。甚至，很多時候，就是需要你強迫自己「開始」下筆——而輕易的寬容，會因此而失去不少。</p><p>唉，只能說，做人真難，尤難在取捨。</p><h2 id="二、篇幅上限？忘了吧！"><a href="#二、篇幅上限？忘了吧！" class="headerlink" title="二、篇幅上限？忘了吧！"></a>二、篇幅上限？忘了吧！</h2><p>第一期我就為這個系列設定了<a href="https://blog.kyomind.tw/weekly-review-01/#%E4%B8%89%E5%80%8B%E4%B8%BB%E8%A6%81%E9%99%90%E5%88%B6">三個主要限制</a>。現在看來只有「不定期」這個限制，被穩穩地維持了。</p><p>關於篇幅的上限，原則為 1000 字，但從〈<a href="https://blog.kyomind.tw/weekly-review-07/">07，年末特輯上：2022 寫作反省與明年目標</a>〉開始，我連 3 期都超過。（本期也超過）</p><p>這部分失守了，因為有時候一個完整的主題，如果要控制篇幅，需要花費 3、5 成的額外心力去刪減，但這樣做就不符合「<strong>降底寫作摩擦力</strong>」這個上位原則。</p><p>算了吧！這也不是特別重要的限制，但還是會克制一下啦！</p><h2 id="三、我不喜歡「收集型」的創作模式"><a href="#三、我不喜歡「收集型」的創作模式" class="headerlink" title="三、我不喜歡「收集型」的創作模式"></a>三、我不喜歡「收集型」的創作模式</h2><p>這個就非常有趣了！</p><p>如第一期所言：</p><blockquote><p>目前中文創作者中，常見電子報內容架構主流之一是仿效 James Clear 的 《3–2–1 Thursday newsletter》這種。</p></blockquote><p>所以一開始我也從善如流，依樣畫葫蘆——決定每期寫 1 到 3 個主題。</p><p>這裡的重點在於「多個主題」的收集。</p><p>但寫了幾期後發現，我還<strong>真不習慣</strong>這種「<strong>點子收集型</strong>」的內容創作模式，身為作者我會有很強烈的「<strong>拼湊感</strong>」。</p><p>這和我為了不要硬產內容，而選擇了不定期發文，形成「<strong>潛在的價值矛盾</strong>」。</p><p>當然，收集並不等於拼湊，更不等於硬產，只是我自己會有拼湊感而已。</p><p>我常常心中<strong>只有一個主題</strong>，但為了貫徹「<strong>主題的多元</strong>」，卻還得另想一個副主題出來——難怪我幾乎沒寫過 3 個主題的內容🐸，因為兩個就已經讓感到混身不適。</p><p>顯然，這個常見的「3-2-1」框架，並不適合我，我一次還是只寫一個主題就好了。</p><h2 id="四、反省可以，但不必太過言重"><a href="#四、反省可以，但不必太過言重" class="headerlink" title="四、反省可以，但不必太過言重"></a>四、反省可以，但不必太過言重</h2><p>在〈<a href="https://blog.kyomind.tw/weekly-review-05/">05，終於寫了「關於我」頁面</a>〉提到了「Weekly Review 的核心主軸是『<strong>反省』</strong>」，我想，這樣的立意是好的。</p><p>但是！我也不禁發現，反省常常跟「<strong>嚴肅</strong>」產生連結，而嚴肅又和「<strong>沉重</strong>」掛勾。</p><p>長此以往，容易影響寫作的情緒，讓你的筆鋒變得愈來愈重，感覺自己若沒什麼深刻的反省，都不好意思下筆了——這無疑是一種寫作上的摩擦力。</p><p>所以，不反省了啦！</p><h2 id="五、Weekly-Review-只是一個名字而已"><a href="#五、Weekly-Review-只是一個名字而已" class="headerlink" title="五、Weekly Review 只是一個名字而已"></a>五、Weekly Review 只是一個名字而已</h2><p>一開始是說，取材內容會是當週 Logseq 筆記中的思考，但其實很難真的做到，每次都是「當週」才有的想法——「非當週」才是常態。</p><p>真實往往是，很多事，已經翻來覆去想了好幾週了。所以，請不用介意，它就只是一個名字而已。</p><p>但我可以保證，這些思考都是真的。</p><h2 id="六、輕快才是持續寫作的王道"><a href="#六、輕快才是持續寫作的王道" class="headerlink" title="六、輕快才是持續寫作的王道"></a>六、輕快才是持續寫作的王道</h2><p>最後，我想說，寫作務必輕快，既不必太過言重，也不必要求自己太多。</p><p>可以先寫出來，要刪要改，都是以後的事，來日方長，還可以慢慢來。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sWgUbzT.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;從 2022 年 11 月 6 日的〈&lt;a href=&quot;https://blog.kyomind.tw/weekly-review-01/&quot;&gt;01，為何他們可以，但我不行&lt;/a&gt;〉到今天，Weekly Review 剛好滿 10 回了！&lt;/p&gt;
&lt;p&gt;如果是整個 blog 是我在寫作方面的「產品」，那「Weekly Reivew」可以視為產品中的一個重要 feature 與嘗試。&lt;/p&gt;
&lt;p&gt;而一個成長中的 feature，必然經過一次次的迭代與更新。本期就來看看，從第一篇到現在，期間我有哪些感受與發現，以及做了哪些調整。&lt;/p&gt;
&lt;p&gt;以下是我的心得（突然覺得這句話好 GPT🤣）。&lt;/p&gt;</summary>
    
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
  </entry>
  
</feed>
